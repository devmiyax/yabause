     1                                  ; Copyright 2017 devMiyax(smiyaxdev@gmail.com)
     2                                  ; 
     3                                  ; This file is part of Yabause.
     4                                  ; 
     5                                  ; Yabause is free software; you can rrdistribute it and/or modify
     6                                  ; it under the terms of the GNU General Public License as published by
     7                                  ; the Free Software Foundation; either version 2 of the License, or
     8                                  ; (at your option) any later version.
     9                                  ; 
    10                                  ; Yabause is distributed in the hope that it will be useful,
    11                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    12                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13                                  ; GNU General Public License for more details.
    14                                  ; 
    15                                  ; You should have received a copy of the GNU General Public License
    16                                  ; along with Yabause; if not, write to the Free Software
    17                                  ; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
    18                                  ;
    19                                  
    20                                  ; MACH   [GEN_REG, #(16+3+0)*4 ]   [r14]  
    21                                  ; MACL   [GEN_REG, #(16+3+1)*4 ]   [r14, #(1)*4]  
    22                                  ; PR     [GEN_REG, #(16+3+2)*4 ]   [r14, #(2)*4]
    23                                  ; PC     [GEN_REG, #(16+3+3)*4 ]  
    24                                  ; COUNT  [GEN_REG, #(16+3+4)*4 ]  
    25                                  ; ICOUNT [GEN_REG, #(16+3+5)*4 ]  
    26                                  ; SR     [GEN_REG, #(16+0)*4 ]  
    27                                  ; GBR     [GEN_REG, #(16+1)*4 ]  
    28                                  ; VBR     [GEN_REG, #(16+2)*4 ]  
    29                                  ; getmembyte = [GEN_REG, #((16+3+6)*4 + 0 *8) + 4 // Alignment] ;
    30                                  ; getmemword = [GEN_REG, #((16+3+6)*4 + 1 *8) + 4 // Alignment] ;
    31                                  ; getmemlong = [GEN_REG, #((16+3+6)*4 + 2 *8) + 4 // Alignment] ;
    32                                  ; setmembyte = [GEN_REG, #((16+3+6)*4 + 3 *8) + 4 // Alignment] ;
    33                                  ; setmemword = [GEN_REG, #((16+3+6)*4 + 4 *8) + 4 // Alignment] ;
    34                                  ; setmemlong = [GEN_REG, #((16+3+6)*4 + 5 *8) + 4 // Alignment] ;
    35                                  
    36                                  bits 64
    37                                  
    38                                  section .code
    39                                  
    40                                  %macro opfunc 1
    41                                  	global x86_%1
    42                                  	x86_%1:
    43                                  %endmacro
    44                                  
    45                                  %macro opfuncend 1
    46                                  	global x86_%1_end
    47                                  	x86_%1_end:
    48                                  	global %1_size
    49                                  	%1_size dw (x86_%1_end - x86_%1)
    50                                  %endmacro
    51                                  
    52                                  %macro opdesc 6
    53                                  	global x86_%1_end
    54                                  	x86_%1_end:
    55                                  	global %1_size
    56                                  	%1_size dw (x86_%1_end - x86_%1)
    57                                  	global %1_src
    58                                  	%1_src db %2
    59                                  	global %1_dest
    60                                  	%1_dest db %3
    61                                  	global %1_off1
    62                                  	%1_off1 db %4
    63                                  	global %1_imm
    64                                  	%1_imm db %5
    65                                  	global %1_off3
    66                                  	%1_off3 db %6
    67                                  %endmacro
    68                                  
    69                                  %define GEN_REG r12
    70                                  %define CTRL_REG r13
    71                                  %define SYS_REG r14
    72                                  %define PC r15
    73                                  
    74                                  %macro GET_R 1
    75                                  	mov %1, GEN_REG         
    76                                  	add %1,byte 0x7F    
    77                                  %endmacro
    78                                  
    79                                  %macro GET_BYTE_IMM 1      
    80                                  	or %1, 0x7F    
    81                                  %endmacro
    82                                  
    83                                  %macro GET_R_ID 2
    84                                  	mov %2, %1
    85                                  	shl %2, byte 2
    86                                  	add %2, GEN_REG              
    87                                  %endmacro
    88                                  
    89                                  %macro GET_R0 1
    90                                  	mov %1, GEN_REG              
    91                                  %endmacro
    92                                  
    93                                  %macro SET_MACH 1
    94                                   	mov dword [SYS_REG], %1
    95                                  %endmacro
    96                                  
    97                                  %macro SET_MACL 1
    98                                  	mov dword [SYS_REG+4], %1
    99                                  %endmacro
   100                                  
   101                                  %macro GET_MACH 1
   102                                  	mov %1, dword [SYS_REG]
   103                                  %endmacro
   104                                  
   105                                  %macro GET_MACL 1
   106                                  	mov %1, dword [SYS_REG+4]
   107                                  %endmacro
   108                                  
   109                                  %macro GET_PR 1
   110                                  	mov %1, dword [SYS_REG+8]
   111                                  %endmacro
   112                                  
   113                                  %macro SET_PR 1
   114                                  	mov dword [SYS_REG+8], %1
   115                                  %endmacro
   116                                  
   117                                  %macro SET_VBR 1
   118                                  	mov dword [CTRL_REG+8], %1
   119                                  %endmacro
   120                                  
   121                                  %macro GET_SR 1
   122                                  	mov %1, dword [CTRL_REG]
   123                                  %endmacro
   124                                  
   125                                  %macro GET_GBR 1
   126                                  	mov %1, dword [CTRL_REG+4]
   127                                  %endmacro
   128                                  
   129                                  %macro SET_GBR 1
   130                                  	mov dword [CTRL_REG+4], %1
   131                                  %endmacro
   132                                  
   133                                  %macro GET_VBR 1
   134                                  	mov %1, dword [CTRL_REG+8]
   135                                  %endmacro
   136                                  
   137                                  %macro CLEAR_T 0
   138                                  	and dword [CTRL_REG], 0x3FE
   139                                  %endmacro
   140                                  
   141                                  %macro SET_T 0
   142                                  	or dword [CTRL_REG], 0x1
   143                                  %endmacro
   144                                  
   145                                  %macro SET_T_R 1
   146                                  	or dword [CTRL_REG], %1
   147                                  %endmacro
   148                                  
   149                                  %macro GET_T 1
   150                                  	mov %1, dword [CTRL_REG]
   151                                  	and %1, 0x1
   152                                  %endmacro
   153                                  
   154                                  %macro CLEAR_Q 0
   155                                  	and  dword [CTRL_REG],0x2FF
   156                                  %endmacro
   157                                  
   158                                  %macro SET_Q 0
   159                                  	or dword [CTRL_REG], 0x100
   160                                  %endmacro
   161                                  
   162                                  %macro GET_Q 1
   163                                  	mov  %1,[CTRL_REG]
   164                                  	shr  %1,8
   165                                  	and  %1,1
   166                                  %endmacro
   167                                  
   168                                  %macro GET_M 1
   169                                  	mov  %1,[CTRL_REG]
   170                                  	shr  %1,9
   171                                  	and  %1,1
   172                                  %endmacro
   173                                  
   174                                  %macro TEST_IS_Q 0
   175                                  	bt dword [CTRL_REG],0x8
   176                                  %endmacro
   177                                  
   178                                  %macro CLEAR_M 0
   179                                  	and  dword [CTRL_REG],0x1FF
   180                                  %endmacro
   181                                  
   182                                  %macro SET_M 0
   183                                  	or  dword [CTRL_REG],0x200
   184                                  %endmacro
   185                                  
   186                                  %macro TEST_IS_M 0
   187                                  	bt dword [CTRL_REG],0x9 ; M == 1 ?
   188                                  %endmacro
   189                                  
   190                                  %macro TEST_IS_S 0
   191                                  	bt dword [CTRL_REG],0X1
   192                                  %endmacro
   193                                  
   194                                  %macro TEST_IS_T 0
   195                                  	bt dword [CTRL_REG],0x0
   196                                  %endmacro
   197                                  
   198                                  %macro SET_SR 1
   199                                  	and %1, 0x3F3
   200                                  	mov dword [CTRL_REG], %1
   201                                  %endmacro
   202                                  
   203                                  ;Memory Functions
   204                                  extern DelayEachClock, DebugEachClock, DebugDelayClock
   205                                  
   206                                  %macro CALL_FUNC 1
   207                                    mov r8, [SYS_REG + 28 + %1*8]
   208                                    call r8  
   209                                  %endmacro
   210                                  
   211                                  %macro CALL_GETMEM_BYTE 0
   212                                    CALL_FUNC 0  
   213                                  %endmacro
   214                                  
   215                                  %macro CALL_GETMEM_WORD 0
   216                                    CALL_FUNC 1  
   217                                  %endmacro
   218                                  
   219                                  %macro CALL_GETMEM_LONG 0
   220                                    CALL_FUNC 2 
   221                                  %endmacro
   222                                  
   223                                  %macro CALL_SETMEM_BYTE 0
   224                                    CALL_FUNC 3 
   225                                  %endmacro
   226                                  
   227                                  %macro CALL_SETMEM_WORD 0
   228                                    CALL_FUNC 4 
   229                                  %endmacro
   230                                  
   231                                  %macro CALL_SETMEM_LONG 0
   232                                    CALL_FUNC 5 
   233                                  %endmacro
   234                                  
   235                                  %macro CALL_EACH_CLOCK 0
   236                                    CALL_FUNC 6 
   237                                  %endmacro
   238                                  
   239                                  %macro PUSHAD 0
   240                                          push rbx           ;1
   241                                          push rsp           ;1
   242                                          push rbp           ;1
   243                                          push r12           ;1
   244                                          push r13           ;1
   245                                          push r14           ;1
   246                                          push r15           ;1
   247                                  %endmacro
   248                                  
   249                                  %macro POPAD 0
   250                                          pop r15           ;1
   251                                  	pop r14           ;1
   252                                  	pop r13           ;1
   253                                  	pop r12           ;1
   254                                  	pop rbp           ;1
   255                                  	pop rsp           ;1
   256                                  	pop rbx           ;1
   257                                  %endmacro
   258                                  
   259                                  %macro START 1
   260                                  	global %1
   261                                  	%1:
   262                                  %endmacro
   263                                  
   264                                  %macro END 1
   265                                  	global %1_end
   266                                  	%1_end:
   267                                  	global %1_size
   268                                  	%1_size dw (%1_end - %1)
   269                                  %endmacro
   270                                  
   271                                  ;=====================================================
   272                                  ; Basic
   273                                  ;=====================================================
   274                                  
   275                                  ;-----------------------------------------------------
   276                                  ; Begining of block
   277                                  ; u32 GenReg[16] ->r12 (m_pDynaSh2)
   278                                  ; u32 CtrlReg[3] -> r13
   279                                  ; u32 SysReg[6]; -> r14
   280                                  ; PC => SysReg[3] -> r15
   281                                  ; SR => CtrlReg[0] -> r13
   282                                  
   283                                  ; r12  <- Address of GenReg
   284                                  ; r13  <- Address of CtrlReg
   285                                  ; r14  <- Address of SysReg
   286                                  ; r15  <- Address of PC
   287                                  
   288                                  
   289                                  ; Size = 27 Bytes
   290                                  START prologue
   290                              <1>  global %1
   290                              <1>  %1:
   291                                  PUSHAD
   291 00000000 53                  <1>  push rbx
   291 00000001 54                  <1>  push rsp
   291 00000002 55                  <1>  push rbp
   291 00000003 4154                <1>  push r12
   291 00000005 4155                <1>  push r13
   291 00000007 4156                <1>  push r14
   291 00000009 4157                <1>  push r15
   292 0000000B 6A00                    push qword 00      ;4 (JumpAddr)
   293 0000000D 4989FC                  mov GEN_REG,rdi        ;GEN_REG = m_pDynaSh2
   294 00000010 4989FD                  mov CTRL_REG,rdi        
   295 00000013 4983C540                add CTRL_REG,byte 64    ;r13 = m_pDynaSh2 + 16 * 4 bytes   
   296 00000017 4D89EE                  mov SYS_REG,CTRL_REG
   297 0000001A 4983C60C                add SYS_REG,byte 12    ;r14 = m_pDynaSh2 + 16 * 4 bytes + 3 * 4 bytes
   298 0000001E 4D89F7                  mov PC,SYS_REG
   299 00000021 4983C70C                add PC,byte 12    ;r15 = m_pDynaSh2 + 16 * 4 bytes + 3 * 4 bytes + 3 * 4 bytes 
   300                                  END prologue
   300                              <1>  global %1_end
   300                              <1>  %1_end:
   300                              <1>  global %1_size
   300 00000025 2500                <1>  %1_size dw (%1_end - %1)
   301                                  
   302                                  ;-------------------------------------------------------
   303                                  ; normal part par instruction
   304                                  ;Size = 9 Bytes
   305                                  START seperator_normal
   305                              <1>  global %1
   305                              <1>  %1:
   306 00000027 41830702                add dword [PC], byte 2   ;3 PC += 2
   307 0000002B 4183470401              add dword [PC+4], byte 1 ;4 Clock += 1
   308                                  END  seperator_normal
   308                              <1>  global %1_end
   308                              <1>  %1_end:
   308                              <1>  global %1_size
   308 00000030 0900                <1>  %1_size dw (%1_end - %1)
   309                                  
   310                                  ;------------------------------------------------------
   311                                  ; Delay slot part par instruction
   312                                  ;Size = 40 Bytes
   313                                  START seperator_delay_slot
   313                              <1>  global %1
   313                              <1>  %1:
   314 00000032 F70424FFFFFFFF          test dword [rsp], 0xFFFFFFFF ; 7
   315 00000039 7516                    jnz   .continue               ; 2
   316 0000003B 41830702                add dword [PC], byte 2   ;3 PC += 2
   317 0000003F 4183470401              add dword [PC+4], byte 1 ;4 Clock += 1
   318 00000044 58                      pop  rax                     ; 1
   319                                  POPAD
   319 00000045 415F                <1>  pop r15
   319 00000047 415E                <1>  pop r14
   319 00000049 415D                <1>  pop r13
   319 0000004B 415C                <1>  pop r12
   319 0000004D 5D                  <1>  pop rbp
   319 0000004E 5C                  <1>  pop rsp
   319 0000004F 5B                  <1>  pop rbx
   320 00000050 C3                      ret                          ; 1
   321                                  .continue:
   322 00000051 8B0424                  mov  eax, dword [rsp]  
   323 00000054 83E802                  sub  eax,byte 2            ; 3
   324 00000057 418907                  mov  dword [PC],eax             ; 2
   325                                  END seperator_delay_slot
   325                              <1>  global %1_end
   325                              <1>  %1_end:
   325                              <1>  global %1_size
   325 0000005A 2800                <1>  %1_size dw (%1_end - %1)
   326                                  
   327                                  
   328                                  ;------------------------------------------------------
   329                                  ; End part of delay slot
   330                                  ;Size = 19 Bytes
   331                                  START seperator_delay_after
   331                              <1>  global %1
   331                              <1>  %1:
   332 0000005C 41830702                add dword [PC], byte 2   ;3 PC += 2
   333 00000060 4183470401              add dword [PC+4], byte 1 ;4 Clock += 1
   334 00000065 58                      pop  rax                  ; 1
   335                                  POPAD
   335 00000066 415F                <1>  pop r15
   335 00000068 415E                <1>  pop r14
   335 0000006A 415D                <1>  pop r13
   335 0000006C 415C                <1>  pop r12
   335 0000006E 5D                  <1>  pop rbp
   335 0000006F 5C                  <1>  pop rsp
   335 00000070 5B                  <1>  pop rbx
   336 00000071 C3                      ret                       ; 1
   337                                  END seperator_delay_after
   337                              <1>  global %1_end
   337                              <1>  %1_end:
   337                              <1>  global %1_size
   337 00000072 1600                <1>  %1_size dw (%1_end - %1)
   338                                  
   339                                  ;-------------------------------------------------------
   340                                  ; End of block
   341                                  ; Size = 10 Bytes
   342                                  START epilogue
   342                              <1>  global %1
   342                              <1>  %1:
   343 00000074 58                      pop rax         ;1
   344                                  POPAD
   344 00000075 415F                <1>  pop r15
   344 00000077 415E                <1>  pop r14
   344 00000079 415D                <1>  pop r13
   344 0000007B 415C                <1>  pop r12
   344 0000007D 5D                  <1>  pop rbp
   344 0000007E 5C                  <1>  pop rsp
   344 0000007F 5B                  <1>  pop rbx
   345 00000080 C3                      ret             ;1
   346                                  END epilogue
   346                              <1>  global %1_end
   346                              <1>  %1_end:
   346                              <1>  global %1_size
   346 00000081 0D00                <1>  %1_size dw (%1_end - %1)
   347                                  
   348                                  ;------------------------------------------------------
   349                                  ; Jump part
   350                                  ; Size = 27 Bytes
   351                                  START PageFlip
   351                              <1>  global %1
   351                              <1>  %1:
   352 00000083 F70424FFFFFFFF          test dword [rsp], 0xFFFFFFFF ; 7
   353 0000008A 7413                    jz   .continue               ; 2
   354 0000008C 8B0424                  mov  eax,dword [rsp]               ; 3
   355 0000008F 418907                  mov  dword [PC], eax               ; 2
   356 00000092 58                      pop  rax                     ; 1
   357                                  POPAD
   357 00000093 415F                <1>  pop r15
   357 00000095 415E                <1>  pop r14
   357 00000097 415D                <1>  pop r13
   357 00000099 415C                <1>  pop r12
   357 0000009B 5D                  <1>  pop rbp
   357 0000009C 5C                  <1>  pop rsp
   357 0000009D 5B                  <1>  pop rbx
   358 0000009E C3                      ret                          ; 1
   359                                  .continue:
   360                                  END PageFlip
   360                              <1>  global %1_end
   360                              <1>  %1_end:
   360                              <1>  global %1_size
   360 0000009F 1C00                <1>  %1_size dw (%1_end - %1)
   361                                  
   362                                  ;-------------------------------------------------------
   363                                  ; normal part par instruction( for debug build )
   364                                  ;Size = 39 Bytes
   365                                  START seperator_d_normal
   365                              <1>  global %1
   365                              <1>  %1:
   366 000000A1 4183470401              add dword [PC+4], byte 1 ;4 Clock += 1
   367 000000A6 48B8-                   mov  rax,DebugEachClock ;5
   367 000000A8 [0000000000000000] 
   368 000000B0 FFD0                    call rax                 ;2
   369 000000B2 48A901000000            test rax, 0x01           ;5 finish 
   370 000000B8 740D                    jz  NEXT_D_INST          ;2
   371 000000BA 58                      pop rax                  ;1 
   372                                  POPAD
   372 000000BB 415F                <1>  pop r15
   372 000000BD 415E                <1>  pop r14
   372 000000BF 415D                <1>  pop r13
   372 000000C1 415C                <1>  pop r12
   372 000000C3 5D                  <1>  pop rbp
   372 000000C4 5C                  <1>  pop rsp
   372 000000C5 5B                  <1>  pop rbx
   373 000000C6 C3                      ret                      ;1
   374                                  NEXT_D_INST:
   375 000000C7 41830702                add dword [PC], byte 2   ;3 PC += 2
   376                                  END seperator_d_normal
   376                              <1>  global %1_end
   376                              <1>  %1_end:
   376                              <1>  global %1_size
   376 000000CB 2A00                <1>  %1_size dw (%1_end - %1)
   377                                  
   378                                  ;------------------------------------------------------
   379                                  ; Delay slot part par instruction( for debug build )
   380                                  ;Size = 52 Bytes
   381                                  START seperator_d_delay
   381                              <1>  global %1
   381                              <1>  %1:
   382 000000CD 48B8-                   mov  rax,DebugDelayClock ;5
   382 000000CF [0000000000000000] 
   383 000000D7 FFD0                    call rax                   ;2
   384 000000D9 F70424FFFFFFFF          test dword [rsp], 0xFFFFFFFF ; 7
   385 000000E0 7516                    jnz   .continue               ; 2
   386 000000E2 41830702                add dword [PC], byte 2   ;3 PC += 2
   387 000000E6 4183470401              add dword [PC+4], byte 1 ;4 Clock += 1
   388 000000EB 58                      pop  rax                     ; 1
   389                                  POPAD
   389 000000EC 415F                <1>  pop r15
   389 000000EE 415E                <1>  pop r14
   389 000000F0 415D                <1>  pop r13
   389 000000F2 415C                <1>  pop r12
   389 000000F4 5D                  <1>  pop rbp
   389 000000F5 5C                  <1>  pop rsp
   389 000000F6 5B                  <1>  pop rbx
   390 000000F7 C3                      ret                          ; 1
   391                                  .continue:
   392 000000F8 8B0424                  mov  eax,dword [rsp]             ; 3
   393 000000FB 83E802                  sub  eax,byte 2            ; 3
   394 000000FE 8902                    mov  dword [rdx],eax             ; 2
   395                                  END seperator_d_delay
   395                              <1>  global %1_end
   395                              <1>  %1_end:
   395                              <1>  global %1_size
   395 00000100 3300                <1>  %1_size dw (%1_end - %1)
   396                                  
   397                                  ;=================
   398                                  ;Begin x86 Opcodes
   399                                  ;=================
   400                                  
   401                                  opfunc CLRT
   401                              <1>  global x86_%1
   401                              <1>  x86_%1:
   402                                  CLEAR_T
   402 00000102 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   403                                  opdesc CLRT,  0xFF,0xFF,0xFF,0xFF,0xFF
   403                              <1>  global x86_%1_end
   403                              <1>  x86_%1_end:
   403                              <1>  global %1_size
   403 0000010A 0800                <1>  %1_size dw (x86_%1_end - x86_%1)
   403                              <1>  global %1_src
   403 0000010C FF                  <1>  %1_src db %2
   403                              <1>  global %1_dest
   403 0000010D FF                  <1>  %1_dest db %3
   403                              <1>  global %1_off1
   403 0000010E FF                  <1>  %1_off1 db %4
   403                              <1>  global %1_imm
   403 0000010F FF                  <1>  %1_imm db %5
   403                              <1>  global %1_off3
   403 00000110 FF                  <1>  %1_off3 db %6
   404                                  
   405                                  opfunc CLRMAC
   405                              <1>  global x86_%1
   405                              <1>  x86_%1:
   406 00000111 41832600                and dword [SYS_REG], 0   ;4
   407 00000115 4183660400              and dword [SYS_REG+4], 0 ;4
   408                                  opdesc CLRMAC,	0xFF,0xFF,0xFF,0xFF,0xFF
   408                              <1>  global x86_%1_end
   408                              <1>  x86_%1_end:
   408                              <1>  global %1_size
   408 0000011A 0900                <1>  %1_size dw (x86_%1_end - x86_%1)
   408                              <1>  global %1_src
   408 0000011C FF                  <1>  %1_src db %2
   408                              <1>  global %1_dest
   408 0000011D FF                  <1>  %1_dest db %3
   408                              <1>  global %1_off1
   408 0000011E FF                  <1>  %1_off1 db %4
   408                              <1>  global %1_imm
   408 0000011F FF                  <1>  %1_imm db %5
   408                              <1>  global %1_off3
   408 00000120 FF                  <1>  %1_off3 db %6
   409                                  
   410                                  opfunc NOP
   410                              <1>  global x86_%1
   410                              <1>  x86_%1:
   411 00000121 90                      nop
   412                                  opdesc NOP,		0xFF,0xFF,0xFF,0xFF,0xFF
   412                              <1>  global x86_%1_end
   412                              <1>  x86_%1_end:
   412                              <1>  global %1_size
   412 00000122 0100                <1>  %1_size dw (x86_%1_end - x86_%1)
   412                              <1>  global %1_src
   412 00000124 FF                  <1>  %1_src db %2
   412                              <1>  global %1_dest
   412 00000125 FF                  <1>  %1_dest db %3
   412                              <1>  global %1_off1
   412 00000126 FF                  <1>  %1_off1 db %4
   412                              <1>  global %1_imm
   412 00000127 FF                  <1>  %1_imm db %5
   412                              <1>  global %1_off3
   412 00000128 FF                  <1>  %1_off3 db %6
   413                                  
   414                                  opfunc DIV0U
   414                              <1>  global x86_%1
   414                              <1>  x86_%1:
   415 00000129 41816500F2000000        and dword [CTRL_REG],0x0f2
   416                                  opdesc DIV0U,	0xFF,0xFF,0xFF,0xFF,0xFF
   416                              <1>  global x86_%1_end
   416                              <1>  x86_%1_end:
   416                              <1>  global %1_size
   416 00000131 0800                <1>  %1_size dw (x86_%1_end - x86_%1)
   416                              <1>  global %1_src
   416 00000133 FF                  <1>  %1_src db %2
   416                              <1>  global %1_dest
   416 00000134 FF                  <1>  %1_dest db %3
   416                              <1>  global %1_off1
   416 00000135 FF                  <1>  %1_off1 db %4
   416                              <1>  global %1_imm
   416 00000136 FF                  <1>  %1_imm db %5
   416                              <1>  global %1_off3
   416 00000137 FF                  <1>  %1_off3 db %6
   417                                  
   418                                  opfunc SETT
   418                              <1>  global x86_%1
   418                              <1>  x86_%1:
   419                                  SET_T
   419 00000138 41834D0001          <1>  or dword [CTRL_REG], 0x1
   420                                  opdesc SETT,	0xFF,0xFF,0xFF,0xFF,0xFF
   420                              <1>  global x86_%1_end
   420                              <1>  x86_%1_end:
   420                              <1>  global %1_size
   420 0000013D 0500                <1>  %1_size dw (x86_%1_end - x86_%1)
   420                              <1>  global %1_src
   420 0000013F FF                  <1>  %1_src db %2
   420                              <1>  global %1_dest
   420 00000140 FF                  <1>  %1_dest db %3
   420                              <1>  global %1_off1
   420 00000141 FF                  <1>  %1_off1 db %4
   420                              <1>  global %1_imm
   420 00000142 FF                  <1>  %1_imm db %5
   420                              <1>  global %1_off3
   420 00000143 FF                  <1>  %1_off3 db %6
   421                                  
   422                                  opfunc SLEEP
   422                              <1>  global x86_%1
   422                              <1>  x86_%1:
   423 00000144 4183460401              add dword [SYS_REG+4],byte 1   ;4 
   424                                  CALL_EACH_CLOCK
   424                              <1>  CALL_FUNC 6
   424 00000149 4D8B464C            <2>  mov r8, [SYS_REG + 28 + %1*8]
   424 0000014D 41FFD0              <2>  call r8
   425 00000150 58                      pop  rax                     ; 1
   426                                  POPAD
   426 00000151 415F                <1>  pop r15
   426 00000153 415E                <1>  pop r14
   426 00000155 415D                <1>  pop r13
   426 00000157 415C                <1>  pop r12
   426 00000159 5D                  <1>  pop rbp
   426 0000015A 5C                  <1>  pop rsp
   426 0000015B 5B                  <1>  pop rbx
   427 0000015C C3                      ret                 ;1
   428                                  opdesc SLEEP,	0xFF,0xFF,0xFF,0xFF,0xFF
   428                              <1>  global x86_%1_end
   428                              <1>  x86_%1_end:
   428                              <1>  global %1_size
   428 0000015D 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
   428                              <1>  global %1_src
   428 0000015F FF                  <1>  %1_src db %2
   428                              <1>  global %1_dest
   428 00000160 FF                  <1>  %1_dest db %3
   428                              <1>  global %1_off1
   428 00000161 FF                  <1>  %1_off1 db %4
   428                              <1>  global %1_imm
   428 00000162 FF                  <1>  %1_imm db %5
   428                              <1>  global %1_off3
   428 00000163 FF                  <1>  %1_off3 db %6
   429                                  
   430                                  opfunc SWAP_W
   430                              <1>  global x86_%1
   430                              <1>  x86_%1:
   431                                  GET_R rbp
   431 00000164 4C89E5              <1>  mov %1, GEN_REG
   431 00000167 4883C57F            <1>  add %1,byte 0x7F
   432 0000016B 8B4500                  mov eax,dword [rbp]       ;2
   433 0000016E C1C010                  rol eax,16          ;2
   434                                  GET_R rbp
   434 00000171 4C89E5              <1>  mov %1, GEN_REG
   434 00000174 4883C57F            <1>  add %1,byte 0x7F
   435 00000178 894500                  mov dword [rbp],eax       ;2
   436                                  opdesc SWAP_W,	6,19,0xff,0xff,0xff
   436                              <1>  global x86_%1_end
   436                              <1>  x86_%1_end:
   436                              <1>  global %1_size
   436 0000017B 1700                <1>  %1_size dw (x86_%1_end - x86_%1)
   436                              <1>  global %1_src
   436 0000017D 06                  <1>  %1_src db %2
   436                              <1>  global %1_dest
   436 0000017E 13                  <1>  %1_dest db %3
   436                              <1>  global %1_off1
   436 0000017F FF                  <1>  %1_off1 db %4
   436                              <1>  global %1_imm
   436 00000180 FF                  <1>  %1_imm db %5
   436                              <1>  global %1_off3
   436 00000181 FF                  <1>  %1_off3 db %6
   437                                  
   438                                  opfunc SWAP_B
   438                              <1>  global x86_%1
   438                              <1>  x86_%1:
   439                                  GET_R rbp
   439 00000182 4C89E5              <1>  mov %1, GEN_REG
   439 00000185 4883C57F            <1>  add %1,byte 0x7F
   440 00000189 8B4500                  mov eax,dword [rbp]       ;2
   441 0000018C 86E0                    xchg ah,al          ;2
   442                                  GET_R rbp
   442 0000018E 4C89E5              <1>  mov %1, GEN_REG
   442 00000191 4883C57F            <1>  add %1,byte 0x7F
   443 00000195 894500                  mov dword [rbp],eax       ;2
   444                                  opdesc SWAP_B,	6,18,0xff,0xff,0xff
   444                              <1>  global x86_%1_end
   444                              <1>  x86_%1_end:
   444                              <1>  global %1_size
   444 00000198 1600                <1>  %1_size dw (x86_%1_end - x86_%1)
   444                              <1>  global %1_src
   444 0000019A 06                  <1>  %1_src db %2
   444                              <1>  global %1_dest
   444 0000019B 12                  <1>  %1_dest db %3
   444                              <1>  global %1_off1
   444 0000019C FF                  <1>  %1_off1 db %4
   444                              <1>  global %1_imm
   444 0000019D FF                  <1>  %1_imm db %5
   444                              <1>  global %1_off3
   444 0000019E FF                  <1>  %1_off3 db %6
   445                                  
   446                                  opfunc TST
   446                              <1>  global x86_%1
   446                              <1>  x86_%1:
   447                                  GET_R rbp
   447 0000019F 4C89E5              <1>  mov %1, GEN_REG
   447 000001A2 4883C57F            <1>  add %1,byte 0x7F
   448 000001A6 8B4500                  mov eax,dword [rbp]       ;2
   449                                  GET_R rbp
   449 000001A9 4C89E5              <1>  mov %1, GEN_REG
   449 000001AC 4883C57F            <1>  add %1,byte 0x7F
   450                                  CLEAR_T
   450 000001B0 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   451 000001B8 854500                  test dword [rbp],eax      ;2
   452 000001BB 7505                    jne end_tst
   453                                  SET_T
   453 000001BD 41834D0001          <1>  or dword [CTRL_REG], 0x1
   454                                  end_tst:
   455                                  opdesc TST,	6,16,0xff,0xff,0xff
   455                              <1>  global x86_%1_end
   455                              <1>  x86_%1_end:
   455                              <1>  global %1_size
   455 000001C2 2300                <1>  %1_size dw (x86_%1_end - x86_%1)
   455                              <1>  global %1_src
   455 000001C4 06                  <1>  %1_src db %2
   455                              <1>  global %1_dest
   455 000001C5 10                  <1>  %1_dest db %3
   455                              <1>  global %1_off1
   455 000001C6 FF                  <1>  %1_off1 db %4
   455                              <1>  global %1_imm
   455 000001C7 FF                  <1>  %1_imm db %5
   455                              <1>  global %1_off3
   455 000001C8 FF                  <1>  %1_off3 db %6
   456                                  
   457                                  opfunc TSTI
   457                              <1>  global x86_%1
   457                              <1>  x86_%1:
   458                                  GET_R0 rbp
   458 000001C9 4C89E5              <1>  mov %1, GEN_REG
   459 000001CC 8B4500                  mov eax,dword [rbp]       ;2
   460                                  CLEAR_T
   460 000001CF 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   461 000001D7 A800                    test al,$00        ;5  Imidiate Val
   462 000001D9 7505                    jne end_tsti
   463                                  SET_T
   463 000001DB 41834D0001          <1>  or dword [CTRL_REG], 0x1
   464                                  end_tsti:
   465                                  opdesc TSTI,	0xff,0xff,0xff,15,0xff
   465                              <1>  global x86_%1_end
   465                              <1>  x86_%1_end:
   465                              <1>  global %1_size
   465 000001E0 1700                <1>  %1_size dw (x86_%1_end - x86_%1)
   465                              <1>  global %1_src
   465 000001E2 FF                  <1>  %1_src db %2
   465                              <1>  global %1_dest
   465 000001E3 FF                  <1>  %1_dest db %3
   465                              <1>  global %1_off1
   465 000001E4 FF                  <1>  %1_off1 db %4
   465                              <1>  global %1_imm
   465 000001E5 0F                  <1>  %1_imm db %5
   465                              <1>  global %1_off3
   465 000001E6 FF                  <1>  %1_off3 db %6
   466                                  
   467                                  
   468                                  opfunc ANDI
   468                              <1>  global x86_%1
   468                              <1>  x86_%1:
   469                                  GET_R0 rbp
   469 000001E7 4C89E5              <1>  mov %1, GEN_REG
   470 000001EA 31C0                    xor eax, eax
   471                                  GET_BYTE_IMM al
   471 000001EC 0C7F                <1>  or %1, 0x7F
   472 000001EE 214500                  and dword [rbp],eax ;3
   473                                  opdesc ANDI,	0xff,0xff,0xff,6,0xff
   473                              <1>  global x86_%1_end
   473                              <1>  x86_%1_end:
   473                              <1>  global %1_size
   473 000001F1 0A00                <1>  %1_size dw (x86_%1_end - x86_%1)
   473                              <1>  global %1_src
   473 000001F3 FF                  <1>  %1_src db %2
   473                              <1>  global %1_dest
   473 000001F4 FF                  <1>  %1_dest db %3
   473                              <1>  global %1_off1
   473 000001F5 FF                  <1>  %1_off1 db %4
   473                              <1>  global %1_imm
   473 000001F6 06                  <1>  %1_imm db %5
   473                              <1>  global %1_off3
   473 000001F7 FF                  <1>  %1_off3 db %6
   474                                  
   475                                  opfunc XORI
   475                              <1>  global x86_%1
   475                              <1>  x86_%1:
   476                                  GET_R0 rbp
   476 000001F8 4C89E5              <1>  mov %1, GEN_REG
   477 000001FB 31C0                    xor eax, eax
   478                                  GET_BYTE_IMM al
   478 000001FD 0C7F                <1>  or %1, 0x7F
   479 000001FF 314500                  xor dword [rbp],eax ;3
   480                                  opdesc XORI,	0xff,0xff,0xff,6,0xff
   480                              <1>  global x86_%1_end
   480                              <1>  x86_%1_end:
   480                              <1>  global %1_size
   480 00000202 0A00                <1>  %1_size dw (x86_%1_end - x86_%1)
   480                              <1>  global %1_src
   480 00000204 FF                  <1>  %1_src db %2
   480                              <1>  global %1_dest
   480 00000205 FF                  <1>  %1_dest db %3
   480                              <1>  global %1_off1
   480 00000206 FF                  <1>  %1_off1 db %4
   480                              <1>  global %1_imm
   480 00000207 06                  <1>  %1_imm db %5
   480                              <1>  global %1_off3
   480 00000208 FF                  <1>  %1_off3 db %6
   481                                  
   482                                  opfunc ORI
   482                              <1>  global x86_%1
   482                              <1>  x86_%1:
   483                                  GET_R0 rbp
   483 00000209 4C89E5              <1>  mov %1, GEN_REG
   484 0000020C 31C0                    xor eax,eax         ;2
   485                                  GET_BYTE_IMM al
   485 0000020E 0C7F                <1>  or %1, 0x7F
   486 00000210 094500                  or dword [rbp],eax ;3
   487                                  opdesc ORI,	0xff,0xff,0xff,6,0xff
   487                              <1>  global x86_%1_end
   487                              <1>  x86_%1_end:
   487                              <1>  global %1_size
   487 00000213 0A00                <1>  %1_size dw (x86_%1_end - x86_%1)
   487                              <1>  global %1_src
   487 00000215 FF                  <1>  %1_src db %2
   487                              <1>  global %1_dest
   487 00000216 FF                  <1>  %1_dest db %3
   487                              <1>  global %1_off1
   487 00000217 FF                  <1>  %1_off1 db %4
   487                              <1>  global %1_imm
   487 00000218 06                  <1>  %1_imm db %5
   487                              <1>  global %1_off3
   487 00000219 FF                  <1>  %1_off3 db %6
   488                                  
   489                                  opfunc CMP_EQ_IMM
   489                              <1>  global x86_%1
   489                              <1>  x86_%1:
   490 0000021A 418B0424                mov eax, [GEN_REG]            ;2
   491                                  CLEAR_T
   491 0000021E 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   492 00000226 83F87F                  cmp eax, byte 0x7F ;4
   493 00000229 7505                    jne .continue
   494                                  SET_T
   494 0000022B 41834D0001          <1>  or dword [CTRL_REG], 0x1
   495                                  .continue:
   496                                  opdesc CMP_EQ_IMM,	0xff,0xff,0xff,14,0xff
   496                              <1>  global x86_%1_end
   496                              <1>  x86_%1_end:
   496                              <1>  global %1_size
   496 00000230 1600                <1>  %1_size dw (x86_%1_end - x86_%1)
   496                              <1>  global %1_src
   496 00000232 FF                  <1>  %1_src db %2
   496                              <1>  global %1_dest
   496 00000233 FF                  <1>  %1_dest db %3
   496                              <1>  global %1_off1
   496 00000234 FF                  <1>  %1_off1 db %4
   496                              <1>  global %1_imm
   496 00000235 0E                  <1>  %1_imm db %5
   496                              <1>  global %1_off3
   496 00000236 FF                  <1>  %1_off3 db %6
   497                                  
   498                                  opfunc XTRCT
   498                              <1>  global x86_%1
   498                              <1>  x86_%1:
   499                                  GET_R rbp
   499 00000237 4C89E5              <1>  mov %1, GEN_REG
   499 0000023A 4883C57F            <1>  add %1,byte 0x7F
   500 0000023E 8B4500                  mov eax,dword [rbp]       ;2
   501                                  GET_R rbp
   501 00000241 4C89E5              <1>  mov %1, GEN_REG
   501 00000244 4883C57F            <1>  add %1,byte 0x7F
   502 00000248 C1E010                  shl eax,16          ;3
   503 0000024B C16D0010                shr dword [rbp],16  ;3
   504 0000024F 094500                  or dword [rbp],eax        ;2
   505                                  opdesc XTRCT,	6,16,0xff,0xff,0xff
   505                              <1>  global x86_%1_end
   505                              <1>  x86_%1_end:
   505                              <1>  global %1_size
   505 00000252 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
   505                              <1>  global %1_src
   505 00000254 06                  <1>  %1_src db %2
   505                              <1>  global %1_dest
   505 00000255 10                  <1>  %1_dest db %3
   505                              <1>  global %1_off1
   505 00000256 FF                  <1>  %1_off1 db %4
   505                              <1>  global %1_imm
   505 00000257 FF                  <1>  %1_imm db %5
   505                              <1>  global %1_off3
   505 00000258 FF                  <1>  %1_off3 db %6
   506                                  
   507                                  opfunc ADD
   507                              <1>  global x86_%1
   507                              <1>  x86_%1:
   508                                  GET_R rbp
   508 00000259 4C89E5              <1>  mov %1, GEN_REG
   508 0000025C 4883C57F            <1>  add %1,byte 0x7F
   509 00000260 8B4500                  mov dword eax,[rbp]
   510                                  GET_R rbp
   510 00000263 4C89E5              <1>  mov %1, GEN_REG
   510 00000266 4883C57F            <1>  add %1,byte 0x7F
   511 0000026A 014500                  add dword [rbp],eax       ;2
   512                                  opdesc ADD,		6,16,0xff,0xff,0xff
   512                              <1>  global x86_%1_end
   512                              <1>  x86_%1_end:
   512                              <1>  global %1_size
   512 0000026D 1400                <1>  %1_size dw (x86_%1_end - x86_%1)
   512                              <1>  global %1_src
   512 0000026F 06                  <1>  %1_src db %2
   512                              <1>  global %1_dest
   512 00000270 10                  <1>  %1_dest db %3
   512                              <1>  global %1_off1
   512 00000271 FF                  <1>  %1_off1 db %4
   512                              <1>  global %1_imm
   512 00000272 FF                  <1>  %1_imm db %5
   512                              <1>  global %1_off3
   512 00000273 FF                  <1>  %1_off3 db %6
   513                                  
   514                                  opfunc ADDC
   514                              <1>  global x86_%1
   514                              <1>  x86_%1:
   515                                  GET_R rbp
   515 00000274 4C89E5              <1>  mov %1, GEN_REG
   515 00000277 4883C57F            <1>  add %1,byte 0x7F
   516 0000027B 8B4500                  mov dword eax,[rbp]
   517                                  GET_R rbp
   517 0000027E 4C89E5              <1>  mov %1, GEN_REG
   517 00000281 4883C57F            <1>  add %1,byte 0x7F
   518 00000285 8B5D00                  mov dword ebx,[rbp]
   519 00000288 418B4D00                mov dword ecx,[CTRL_REG]
   520 0000028C 0FBAF100                btr dword ecx,0   ;4  Replace x86 T bit with the current one, set the sh2 one
   521 00000290 7308                    jnc ADD_REG
   522 00000292 83C301                  add ebx, 1
   523 00000295 7303                    jnc ADD_REG
   524 00000297 83C901                  or ecx, byte 1    ;3  CTRL_REG |= 1 //Carry
   525                                  ADD_REG:
   526 0000029A 01C3                    add ebx,eax       ;3  rn = rm +rn (with carry)
   527 0000029C 7303                    jnc ADDC_NO_CARRY   ;2
   528 0000029E 83C901                  or ecx, byte 1    ;3  CTRL_REG |= 1 //Carry
   529                                  ADDC_NO_CARRY:
   530 000002A1 895D00                  mov dword [rbp], ebx
   531 000002A4 41894D00                mov dword [CTRL_REG], ecx
   532                                  opdesc ADDC,	6,16,0xff,0xff,0xff
   532                              <1>  global x86_%1_end
   532                              <1>  x86_%1_end:
   532                              <1>  global %1_size
   532 000002A8 3400                <1>  %1_size dw (x86_%1_end - x86_%1)
   532                              <1>  global %1_src
   532 000002AA 06                  <1>  %1_src db %2
   532                              <1>  global %1_dest
   532 000002AB 10                  <1>  %1_dest db %3
   532                              <1>  global %1_off1
   532 000002AC FF                  <1>  %1_off1 db %4
   532                              <1>  global %1_imm
   532 000002AD FF                  <1>  %1_imm db %5
   532                              <1>  global %1_off3
   532 000002AE FF                  <1>  %1_off3 db %6
   533                                  
   534                                  
   535                                  ; add with overflow check
   536                                  opfunc ADDV
   536                              <1>  global x86_%1
   536                              <1>  x86_%1:
   537                                  GET_R rbp
   537 000002AF 4C89E5              <1>  mov %1, GEN_REG
   537 000002B2 4883C57F            <1>  add %1,byte 0x7F
   538 000002B6 8B4500                  mov dword eax,[rbp]
   539                                  GET_R rbp
   539 000002B9 4C89E5              <1>  mov %1, GEN_REG
   539 000002BC 4883C57F            <1>  add %1,byte 0x7F
   540 000002C0 014500                  add dword [rbp],eax ;  rn = rn + rm
   541 000002C3 7105                    jno	 NO_OVER_FLO      ;2
   542                                  SET_T
   542 000002C5 41834D0001          <1>  or dword [CTRL_REG], 0x1
   543                                  NO_OVER_FLO:
   544                                  opdesc ADDV, 6,16,0xff,0xff,0xff
   544                              <1>  global x86_%1_end
   544                              <1>  x86_%1_end:
   544                              <1>  global %1_size
   544 000002CA 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
   544                              <1>  global %1_src
   544 000002CC 06                  <1>  %1_src db %2
   544                              <1>  global %1_dest
   544 000002CD 10                  <1>  %1_dest db %3
   544                              <1>  global %1_off1
   544 000002CE FF                  <1>  %1_off1 db %4
   544                              <1>  global %1_imm
   544 000002CF FF                  <1>  %1_imm db %5
   544                              <1>  global %1_off3
   544 000002D0 FF                  <1>  %1_off3 db %6
   545                                  
   546                                  opfunc SUBC
   546                              <1>  global x86_%1
   546                              <1>  x86_%1:
   547                                  GET_R rbp
   547 000002D1 4C89E5              <1>  mov %1, GEN_REG
   547 000002D4 4883C57F            <1>  add %1,byte 0x7F
   548 000002D8 8B4500                  mov eax,dword [rbp]       ;3
   549                                  GET_R rbp
   549 000002DB 4C89E5              <1>  mov %1, GEN_REG
   549 000002DE 4883C57F            <1>  add %1,byte 0x7F
   550 000002E2 410FBA6D0000            bts dword [CTRL_REG],0   ;4 Clear T
   551 000002E8 194500                  sbb dword [rbp],eax       ;3
   552 000002EB 7307                    jnc	non_carry       ;2
   553                                  SET_T
   553 000002ED 41834D0001          <1>  or dword [CTRL_REG], 0x1
   554 000002F2 EB08                    jmp SUBC_END        ;2
   555                                  non_carry:
   556                                  CLEAR_T
   556 000002F4 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   557                                  SUBC_END:
   558                                  opdesc SUBC,	6,16,0xff,0xff,0xff
   558                              <1>  global x86_%1_end
   558                              <1>  x86_%1_end:
   558                              <1>  global %1_size
   558 000002FC 2B00                <1>  %1_size dw (x86_%1_end - x86_%1)
   558                              <1>  global %1_src
   558 000002FE 06                  <1>  %1_src db %2
   558                              <1>  global %1_dest
   558 000002FF 10                  <1>  %1_dest db %3
   558                              <1>  global %1_off1
   558 00000300 FF                  <1>  %1_off1 db %4
   558                              <1>  global %1_imm
   558 00000301 FF                  <1>  %1_imm db %5
   558                              <1>  global %1_off3
   558 00000302 FF                  <1>  %1_off3 db %6
   559                                  
   560                                  
   561                                  
   562                                  opfunc SUB
   562                              <1>  global x86_%1
   562                              <1>  x86_%1:
   563                                  GET_R rbp
   563 00000303 4C89E5              <1>  mov %1, GEN_REG
   563 00000306 4883C57F            <1>  add %1,byte 0x7F
   564 0000030A 8B4500                  mov dword eax,[rbp]
   565                                  GET_R rbp
   565 0000030D 4C89E5              <1>  mov %1, GEN_REG
   565 00000310 4883C57F            <1>  add %1,byte 0x7F
   566 00000314 294500                  sub dword [rbp],eax       ;2
   567                                  opdesc SUB,		6,16,0xff,0xff,0xff
   567                              <1>  global x86_%1_end
   567                              <1>  x86_%1_end:
   567                              <1>  global %1_size
   567 00000317 1400                <1>  %1_size dw (x86_%1_end - x86_%1)
   567                              <1>  global %1_src
   567 00000319 06                  <1>  %1_src db %2
   567                              <1>  global %1_dest
   567 0000031A 10                  <1>  %1_dest db %3
   567                              <1>  global %1_off1
   567 0000031B FF                  <1>  %1_off1 db %4
   567                              <1>  global %1_imm
   567 0000031C FF                  <1>  %1_imm db %5
   567                              <1>  global %1_off3
   567 0000031D FF                  <1>  %1_off3 db %6
   568                                  
   569                                  
   570                                  opfunc NOT
   570                              <1>  global x86_%1
   570                              <1>  x86_%1:
   571                                  GET_R rbp
   571 0000031E 4C89E5              <1>  mov %1, GEN_REG
   571 00000321 4883C57F            <1>  add %1,byte 0x7F
   572 00000325 8B4500                  mov eax,dword [rbp]       ;2
   573 00000328 F7D0                    not eax             ;2
   574                                  GET_R rbp
   574 0000032A 4C89E5              <1>  mov %1, GEN_REG
   574 0000032D 4883C57F            <1>  add %1,byte 0x7F
   575 00000331 894500                  mov dword [rbp],eax       ;2
   576                                  opdesc NOT,		6,18,0xff,0xff,0xff
   576                              <1>  global x86_%1_end
   576                              <1>  x86_%1_end:
   576                              <1>  global %1_size
   576 00000334 1600                <1>  %1_size dw (x86_%1_end - x86_%1)
   576                              <1>  global %1_src
   576 00000336 06                  <1>  %1_src db %2
   576                              <1>  global %1_dest
   576 00000337 12                  <1>  %1_dest db %3
   576                              <1>  global %1_off1
   576 00000338 FF                  <1>  %1_off1 db %4
   576                              <1>  global %1_imm
   576 00000339 FF                  <1>  %1_imm db %5
   576                              <1>  global %1_off3
   576 0000033A FF                  <1>  %1_off3 db %6
   577                                  
   578                                  opfunc NEG
   578                              <1>  global x86_%1
   578                              <1>  x86_%1:
   579                                  GET_R rbp
   579 0000033B 4C89E5              <1>  mov %1, GEN_REG
   579 0000033E 4883C57F            <1>  add %1,byte 0x7F
   580 00000342 8B4500                  mov eax,dword [rbp]       ;2
   581 00000345 F7D8                    neg eax             ;2
   582                                  GET_R rbp
   582 00000347 4C89E5              <1>  mov %1, GEN_REG
   582 0000034A 4883C57F            <1>  add %1,byte 0x7F
   583 0000034E 894500                  mov dword [rbp],eax       ;2
   584                                  opdesc NEG,		6,18,0xff,0xff,0xff
   584                              <1>  global x86_%1_end
   584                              <1>  x86_%1_end:
   584                              <1>  global %1_size
   584 00000351 1600                <1>  %1_size dw (x86_%1_end - x86_%1)
   584                              <1>  global %1_src
   584 00000353 06                  <1>  %1_src db %2
   584                              <1>  global %1_dest
   584 00000354 12                  <1>  %1_dest db %3
   584                              <1>  global %1_off1
   584 00000355 FF                  <1>  %1_off1 db %4
   584                              <1>  global %1_imm
   584 00000356 FF                  <1>  %1_imm db %5
   584                              <1>  global %1_off3
   584 00000357 FF                  <1>  %1_off3 db %6
   585                                  
   586                                  opfunc NEGC
   586                              <1>  global x86_%1
   586                              <1>  x86_%1:
   587                                  GET_R rbp
   587 00000358 4C89E5              <1>  mov %1, GEN_REG
   587 0000035B 4883C57F            <1>  add %1,byte 0x7F
   588 0000035F 8B4D00                  mov ecx,[rbp]             ;3
   589 00000362 F7D9                    neg ecx                   ;2
   590                                  GET_R rbp
   590 00000364 4C89E5              <1>  mov %1, GEN_REG
   590 00000367 4883C57F            <1>  add %1,byte 0x7F
   591 0000036B 894D00                  mov dword [rbp],ecx             ;3
   592                                  GET_SR eax
   592 0000036E 418B4500            <1>  mov %1, dword [CTRL_REG]
   593 00000372 83E001                  and dword eax,1           ;5
   594 00000375 294500                  sub dword [rbp],eax             ;3
   595                                  CLEAR_T
   595 00000378 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   596 00000380 83F900                  cmp ecx,0                 ;5
   597 00000383 7605                    jna NEGC_NOT_LESS_ZERO    ;2
   598                                  SET_T
   598 00000385 41834D0001          <1>  or dword [CTRL_REG], 0x1
   599                                  NEGC_NOT_LESS_ZERO:
   600 0000038A 394D00                  cmp dword [rbp],ecx             ;3  
   601 0000038D 7605                    jna NEGC_NOT_LESS_OLD     ;2
   602                                  SET_T
   602 0000038F 41834D0001          <1>  or dword [CTRL_REG], 0x1
   603                                  NEGC_NOT_LESS_OLD:
   604                                  opdesc NEGC,	6,18,0xff,0xff,0xff
   604                              <1>  global x86_%1_end
   604                              <1>  x86_%1_end:
   604                              <1>  global %1_size
   604 00000394 3C00                <1>  %1_size dw (x86_%1_end - x86_%1)
   604                              <1>  global %1_src
   604 00000396 06                  <1>  %1_src db %2
   604                              <1>  global %1_dest
   604 00000397 12                  <1>  %1_dest db %3
   604                              <1>  global %1_off1
   604 00000398 FF                  <1>  %1_off1 db %4
   604                              <1>  global %1_imm
   604 00000399 FF                  <1>  %1_imm db %5
   604                              <1>  global %1_off3
   604 0000039A FF                  <1>  %1_off3 db %6
   605                                  
   606                                  opfunc EXTUB
   606                              <1>  global x86_%1
   606                              <1>  x86_%1:
   607                                  GET_R rbp
   607 0000039B 4C89E5              <1>  mov %1, GEN_REG
   607 0000039E 4883C57F            <1>  add %1,byte 0x7F
   608 000003A2 8B4500                  mov eax, dword [rbp]  
   609 000003A5 25FF000000              and dword eax,0x000000ff  ;5
   610                                  GET_R rbp
   610 000003AA 4C89E5              <1>  mov %1, GEN_REG
   610 000003AD 4883C57F            <1>  add %1,byte 0x7F
   611 000003B1 894500                  mov dword [rbp],eax
   612                                  opdesc EXTUB,	6,21,0xff,0xff,0xff
   612                              <1>  global x86_%1_end
   612                              <1>  x86_%1_end:
   612                              <1>  global %1_size
   612 000003B4 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
   612                              <1>  global %1_src
   612 000003B6 06                  <1>  %1_src db %2
   612                              <1>  global %1_dest
   612 000003B7 15                  <1>  %1_dest db %3
   612                              <1>  global %1_off1
   612 000003B8 FF                  <1>  %1_off1 db %4
   612                              <1>  global %1_imm
   612 000003B9 FF                  <1>  %1_imm db %5
   612                              <1>  global %1_off3
   612 000003BA FF                  <1>  %1_off3 db %6
   613                                  
   614                                  opfunc EXTU_W
   614                              <1>  global x86_%1
   614                              <1>  x86_%1:
   615                                  GET_R rbp
   615 000003BB 4C89E5              <1>  mov %1, GEN_REG
   615 000003BE 4883C57F            <1>  add %1,byte 0x7F
   616 000003C2 8B4500                  mov eax, dword [rbp]   
   617 000003C5 25FFFF0000              and dword eax,0xffff;5
   618                                  GET_R rbp
   618 000003CA 4C89E5              <1>  mov %1, GEN_REG
   618 000003CD 4883C57F            <1>  add %1,byte 0x7F
   619 000003D1 894500                  mov dword [rbp],eax
   620                                  opdesc EXTU_W,	6,21,0xff,0xff,0xff
   620                              <1>  global x86_%1_end
   620                              <1>  x86_%1_end:
   620                              <1>  global %1_size
   620 000003D4 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
   620                              <1>  global %1_src
   620 000003D6 06                  <1>  %1_src db %2
   620                              <1>  global %1_dest
   620 000003D7 15                  <1>  %1_dest db %3
   620                              <1>  global %1_off1
   620 000003D8 FF                  <1>  %1_off1 db %4
   620                              <1>  global %1_imm
   620 000003D9 FF                  <1>  %1_imm db %5
   620                              <1>  global %1_off3
   620 000003DA FF                  <1>  %1_off3 db %6
   621                                  
   622                                  opfunc EXTS_B
   622                              <1>  global x86_%1
   622                              <1>  x86_%1:
   623                                  GET_R rbp
   623 000003DB 4C89E5              <1>  mov %1, GEN_REG
   623 000003DE 4883C57F            <1>  add %1,byte 0x7F
   624 000003E2 8B4500                  mov eax, dword [rbp]      
   625 000003E5 6698                    cbw                 ;2
   626 000003E7 98                      cwde                ;1
   627                                  GET_R rbp
   627 000003E8 4C89E5              <1>  mov %1, GEN_REG
   627 000003EB 4883C57F            <1>  add %1,byte 0x7F
   628 000003EF 894500                  mov dword [rbp],eax
   629                                  opdesc EXTS_B,	6,19,0xff,0xff,0xff
   629                              <1>  global x86_%1_end
   629                              <1>  x86_%1_end:
   629                              <1>  global %1_size
   629 000003F2 1700                <1>  %1_size dw (x86_%1_end - x86_%1)
   629                              <1>  global %1_src
   629 000003F4 06                  <1>  %1_src db %2
   629                              <1>  global %1_dest
   629 000003F5 13                  <1>  %1_dest db %3
   629                              <1>  global %1_off1
   629 000003F6 FF                  <1>  %1_off1 db %4
   629                              <1>  global %1_imm
   629 000003F7 FF                  <1>  %1_imm db %5
   629                              <1>  global %1_off3
   629 000003F8 FF                  <1>  %1_off3 db %6
   630                                  
   631                                  opfunc EXTS_W
   631                              <1>  global x86_%1
   631                              <1>  x86_%1:
   632                                  GET_R rbp
   632 000003F9 4C89E5              <1>  mov %1, GEN_REG
   632 000003FC 4883C57F            <1>  add %1,byte 0x7F
   633 00000400 8B4500                  mov eax, dword [rbp]    
   634 00000403 98                      cwde                ;2
   635                                  GET_R rbp
   635 00000404 4C89E5              <1>  mov %1, GEN_REG
   635 00000407 4883C57F            <1>  add %1,byte 0x7F
   636 0000040B 894500                  mov dword [rbp],eax
   637                                  opdesc EXTS_W,	6,17,0xff,0xff,0xff
   637                              <1>  global x86_%1_end
   637                              <1>  x86_%1_end:
   637                              <1>  global %1_size
   637 0000040E 1500                <1>  %1_size dw (x86_%1_end - x86_%1)
   637                              <1>  global %1_src
   637 00000410 06                  <1>  %1_src db %2
   637                              <1>  global %1_dest
   637 00000411 11                  <1>  %1_dest db %3
   637                              <1>  global %1_off1
   637 00000412 FF                  <1>  %1_off1 db %4
   637                              <1>  global %1_imm
   637 00000413 FF                  <1>  %1_imm db %5
   637                              <1>  global %1_off3
   637 00000414 FF                  <1>  %1_off3 db %6
   638                                  
   639                                  ;Store Register Opcodes
   640                                  ;----------------------
   641                                  
   642                                  opfunc STC_SR_MEM
   642                              <1>  global x86_%1
   642                              <1>  x86_%1:
   643                                  GET_R rbp
   643 00000415 4C89E5              <1>  mov %1, GEN_REG
   643 00000418 4883C57F            <1>  add %1,byte 0x7F
   644 0000041C 836D0004                sub  dword [rbp],byte 4 ;4
   645 00000420 8B7D00                  mov edi, dword[rbp]
   646                                  GET_SR esi
   646 00000423 418B7500            <1>  mov %1, dword [CTRL_REG]
   647                                  CALL_SETMEM_LONG
   647                              <1>  CALL_FUNC 5
   647 00000427 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
   647 0000042B 41FFD0              <2>  call r8
   648                                  opdesc STC_SR_MEM,	0xff,6,0xff,0xff,0xff
   648                              <1>  global x86_%1_end
   648                              <1>  x86_%1_end:
   648                              <1>  global %1_size
   648 0000042E 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
   648                              <1>  global %1_src
   648 00000430 FF                  <1>  %1_src db %2
   648                              <1>  global %1_dest
   648 00000431 06                  <1>  %1_dest db %3
   648                              <1>  global %1_off1
   648 00000432 FF                  <1>  %1_off1 db %4
   648                              <1>  global %1_imm
   648 00000433 FF                  <1>  %1_imm db %5
   648                              <1>  global %1_off3
   648 00000434 FF                  <1>  %1_off3 db %6
   649                                  
   650                                  opfunc STC_GBR_MEM
   650                              <1>  global x86_%1
   650                              <1>  x86_%1:
   651                                  GET_R rbp
   651 00000435 4C89E5              <1>  mov %1, GEN_REG
   651 00000438 4883C57F            <1>  add %1,byte 0x7F
   652 0000043C 836D0004                sub  dword [rbp],byte 4 ;4
   653 00000440 8B7D00                  mov edi, dword[rbp]
   654                                  GET_GBR esi
   654 00000443 418B7504            <1>  mov %1, dword [CTRL_REG+4]
   655                                  CALL_SETMEM_LONG
   655                              <1>  CALL_FUNC 5
   655 00000447 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
   655 0000044B 41FFD0              <2>  call r8
   656                                  opdesc STC_GBR_MEM,	0xff,6,0xff,0xff,0xff
   656                              <1>  global x86_%1_end
   656                              <1>  x86_%1_end:
   656                              <1>  global %1_size
   656 0000044E 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
   656                              <1>  global %1_src
   656 00000450 FF                  <1>  %1_src db %2
   656                              <1>  global %1_dest
   656 00000451 06                  <1>  %1_dest db %3
   656                              <1>  global %1_off1
   656 00000452 FF                  <1>  %1_off1 db %4
   656                              <1>  global %1_imm
   656 00000453 FF                  <1>  %1_imm db %5
   656                              <1>  global %1_off3
   656 00000454 FF                  <1>  %1_off3 db %6
   657                                  
   658                                  opfunc STC_VBR_MEM
   658                              <1>  global x86_%1
   658                              <1>  x86_%1:
   659                                  GET_R rbp
   659 00000455 4C89E5              <1>  mov %1, GEN_REG
   659 00000458 4883C57F            <1>  add %1,byte 0x7F
   660 0000045C 836D0004                sub  dword [rbp],byte 4 ;4
   661 00000460 8B7D00                  mov edi, dword[rbp]
   662                                  GET_VBR esi
   662 00000463 418B7508            <1>  mov %1, dword [CTRL_REG+8]
   663                                  CALL_SETMEM_LONG
   663                              <1>  CALL_FUNC 5
   663 00000467 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
   663 0000046B 41FFD0              <2>  call r8
   664                                  opdesc STC_VBR_MEM,	0xff,6,0xff,0xff,0xff
   664                              <1>  global x86_%1_end
   664                              <1>  x86_%1_end:
   664                              <1>  global %1_size
   664 0000046E 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
   664                              <1>  global %1_src
   664 00000470 FF                  <1>  %1_src db %2
   664                              <1>  global %1_dest
   664 00000471 06                  <1>  %1_dest db %3
   664                              <1>  global %1_off1
   664 00000472 FF                  <1>  %1_off1 db %4
   664                              <1>  global %1_imm
   664 00000473 FF                  <1>  %1_imm db %5
   664                              <1>  global %1_off3
   664 00000474 FF                  <1>  %1_off3 db %6
   665                                  
   666                                  
   667                                  ;------------------------------
   668                                  
   669                                  opfunc MOVBL
   669                              <1>  global x86_%1
   669                              <1>  x86_%1:
   670                                  GET_R rbp
   670 00000475 4C89E5              <1>  mov %1, GEN_REG
   670 00000478 4883C57F            <1>  add %1,byte 0x7F
   671 0000047C 8B7D00                  mov edi,dword [rbp]       ;3
   672                                  CALL_GETMEM_BYTE
   672                              <1>  CALL_FUNC 0
   672 0000047F 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
   672 00000483 41FFD0              <2>  call r8
   673                                  GET_R rbp
   673 00000486 4C89E5              <1>  mov %1, GEN_REG
   673 00000489 4883C57F            <1>  add %1,byte 0x7F
   674 0000048D 6698                    cbw                 ;1
   675 0000048F 98                      cwde                ;1
   676 00000490 894500                  mov dword [rbp],eax       ;3
   677                                  opdesc MOVBL,	6,23,0xff,0xff,0xff
   677                              <1>  global x86_%1_end
   677                              <1>  x86_%1_end:
   677                              <1>  global %1_size
   677 00000493 1E00                <1>  %1_size dw (x86_%1_end - x86_%1)
   677                              <1>  global %1_src
   677 00000495 06                  <1>  %1_src db %2
   677                              <1>  global %1_dest
   677 00000496 17                  <1>  %1_dest db %3
   677                              <1>  global %1_off1
   677 00000497 FF                  <1>  %1_off1 db %4
   677                              <1>  global %1_imm
   677 00000498 FF                  <1>  %1_imm db %5
   677                              <1>  global %1_off3
   677 00000499 FF                  <1>  %1_off3 db %6
   678                                  
   679                                  opfunc MOVWL
   679                              <1>  global x86_%1
   679                              <1>  x86_%1:
   680                                  GET_R rbp
   680 0000049A 4C89E5              <1>  mov %1, GEN_REG
   680 0000049D 4883C57F            <1>  add %1,byte 0x7F
   681 000004A1 8B7D00                  mov edi,dword [rbp]       ;3
   682                                  CALL_GETMEM_WORD
   682                              <1>  CALL_FUNC 1
   682 000004A4 4D8B4624            <2>  mov r8, [SYS_REG + 28 + %1*8]
   682 000004A8 41FFD0              <2>  call r8
   683                                  GET_R rbp
   683 000004AB 4C89E5              <1>  mov %1, GEN_REG
   683 000004AE 4883C57F            <1>  add %1,byte 0x7F
   684 000004B2 98                      cwde                ;1
   685 000004B3 894500                  mov dword [rbp],eax       ;3
   686                                  opdesc MOVWL,		6,23,0xff,0xff,0xff
   686                              <1>  global x86_%1_end
   686                              <1>  x86_%1_end:
   686                              <1>  global %1_size
   686 000004B6 1C00                <1>  %1_size dw (x86_%1_end - x86_%1)
   686                              <1>  global %1_src
   686 000004B8 06                  <1>  %1_src db %2
   686                              <1>  global %1_dest
   686 000004B9 17                  <1>  %1_dest db %3
   686                              <1>  global %1_off1
   686 000004BA FF                  <1>  %1_off1 db %4
   686                              <1>  global %1_imm
   686 000004BB FF                  <1>  %1_imm db %5
   686                              <1>  global %1_off3
   686 000004BC FF                  <1>  %1_off3 db %6
   687                                  
   688                                  opfunc MOVL_MEM_REG
   688                              <1>  global x86_%1
   688                              <1>  x86_%1:
   689                                  GET_R rbp
   689 000004BD 4C89E5              <1>  mov %1, GEN_REG
   689 000004C0 4883C57F            <1>  add %1,byte 0x7F
   690 000004C4 8B7D00                  mov edi, dword [rbp]       ;3
   691                                  CALL_GETMEM_LONG
   691                              <1>  CALL_FUNC 2
   691 000004C7 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
   691 000004CB 41FFD0              <2>  call r8
   692                                  GET_R rbp
   692 000004CE 4C89E5              <1>  mov %1, GEN_REG
   692 000004D1 4883C57F            <1>  add %1,byte 0x7F
   693 000004D5 894500                  mov dword [rbp],eax       ;3
   694                                  opdesc MOVL_MEM_REG,	6,23,0xff,0xff,0xff
   694                              <1>  global x86_%1_end
   694                              <1>  x86_%1_end:
   694                              <1>  global %1_size
   694 000004D8 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
   694                              <1>  global %1_src
   694 000004DA 06                  <1>  %1_src db %2
   694                              <1>  global %1_dest
   694 000004DB 17                  <1>  %1_dest db %3
   694                              <1>  global %1_off1
   694 000004DC FF                  <1>  %1_off1 db %4
   694                              <1>  global %1_imm
   694 000004DD FF                  <1>  %1_imm db %5
   694                              <1>  global %1_off3
   694 000004DE FF                  <1>  %1_off3 db %6
   695                                  
   696                                  opfunc MOVBP
   696                              <1>  global x86_%1
   696                              <1>  x86_%1:
   697                                  GET_R rbp
   697 000004DF 4C89E5              <1>  mov %1, GEN_REG
   697 000004E2 4883C57F            <1>  add %1,byte 0x7F
   698 000004E6 8B7D00                  mov edi,dword [rbp]       ;3
   699                                  CALL_GETMEM_BYTE
   699                              <1>  CALL_FUNC 0
   699 000004E9 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
   699 000004ED 41FFD0              <2>  call r8
   700 000004F0 6698                    cbw                 ;1
   701 000004F2 98                      cwde                ;1
   702                                  GET_R rbx
   702 000004F3 4C89E3              <1>  mov %1, GEN_REG
   702 000004F6 4883C37F            <1>  add %1,byte 0x7F
   703 000004FA 4839DD                  cmp rbp,rbx
   704 000004FD 7403                    je continue_movbp
   705 000004FF FF4500                  inc dword [rbp]     ;3
   706                                  continue_movbp:
   707 00000502 8903                    mov dword [rbx],eax       ;3
   708                                  opdesc MOVBP,	6,26,0xff,0xff,0xff
   708                              <1>  global x86_%1_end
   708                              <1>  x86_%1_end:
   708                              <1>  global %1_size
   708 00000504 2500                <1>  %1_size dw (x86_%1_end - x86_%1)
   708                              <1>  global %1_src
   708 00000506 06                  <1>  %1_src db %2
   708                              <1>  global %1_dest
   708 00000507 1A                  <1>  %1_dest db %3
   708                              <1>  global %1_off1
   708 00000508 FF                  <1>  %1_off1 db %4
   708                              <1>  global %1_imm
   708 00000509 FF                  <1>  %1_imm db %5
   708                              <1>  global %1_off3
   708 0000050A FF                  <1>  %1_off3 db %6
   709                                  
   710                                  
   711                                  opfunc MOVWP
   711                              <1>  global x86_%1
   711                              <1>  x86_%1:
   712                                  GET_R rbp
   712 0000050B 4C89E5              <1>  mov %1, GEN_REG
   712 0000050E 4883C57F            <1>  add %1,byte 0x7F
   713 00000512 8B7D00                  mov edi,dword [rbp]       ;3
   714                                  CALL_GETMEM_WORD
   714                              <1>  CALL_FUNC 1
   714 00000515 4D8B4624            <2>  mov r8, [SYS_REG + 28 + %1*8]
   714 00000519 41FFD0              <2>  call r8
   715 0000051C 98                      cwde                ;1
   716                                  GET_R rbx
   716 0000051D 4C89E3              <1>  mov %1, GEN_REG
   716 00000520 4883C37F            <1>  add %1,byte 0x7F
   717 00000524 4839DD                  cmp rbp,rbx
   718 00000527 7404                    je continue_movwp
   719 00000529 83450002                add dword [rbp],byte 2
   720                                  continue_movwp:
   721 0000052D 8903                    mov dword [rbx],eax       ;3
   722                                  opdesc MOVWP,	6,24,0xff,0xff,0xff
   722                              <1>  global x86_%1_end
   722                              <1>  x86_%1_end:
   722                              <1>  global %1_size
   722 0000052F 2400                <1>  %1_size dw (x86_%1_end - x86_%1)
   722                              <1>  global %1_src
   722 00000531 06                  <1>  %1_src db %2
   722                              <1>  global %1_dest
   722 00000532 18                  <1>  %1_dest db %3
   722                              <1>  global %1_off1
   722 00000533 FF                  <1>  %1_off1 db %4
   722                              <1>  global %1_imm
   722 00000534 FF                  <1>  %1_imm db %5
   722                              <1>  global %1_off3
   722 00000535 FF                  <1>  %1_off3 db %6
   723                                  
   724                                  opfunc MOVLP
   724                              <1>  global x86_%1
   724                              <1>  x86_%1:
   725                                  GET_R rbp
   725 00000536 4C89E5              <1>  mov %1, GEN_REG
   725 00000539 4883C57F            <1>  add %1,byte 0x7F
   726 0000053D 8B7D00                  mov edi, dword [rbp]       ;3
   727                                  CALL_GETMEM_LONG
   727                              <1>  CALL_FUNC 2
   727 00000540 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
   727 00000544 41FFD0              <2>  call r8
   728                                  GET_R rbx
   728 00000547 4C89E3              <1>  mov %1, GEN_REG
   728 0000054A 4883C37F            <1>  add %1,byte 0x7F
   729 0000054E 8903                    mov dword [rbx],eax       ;3
   730 00000550 4839EB                  cmp rbx, rbp
   731 00000553 7404                    je end_movlp
   732 00000555 83450004                add dword [rbp],byte 4 ;4
   733                                  end_movlp:
   734                                  opdesc MOVLP,	6,23,0xff,0xff,0xff
   734                              <1>  global x86_%1_end
   734                              <1>  x86_%1_end:
   734                              <1>  global %1_size
   734 00000559 2300                <1>  %1_size dw (x86_%1_end - x86_%1)
   734                              <1>  global %1_src
   734 0000055B 06                  <1>  %1_src db %2
   734                              <1>  global %1_dest
   734 0000055C 17                  <1>  %1_dest db %3
   734                              <1>  global %1_off1
   734 0000055D FF                  <1>  %1_off1 db %4
   734                              <1>  global %1_imm
   734 0000055E FF                  <1>  %1_imm db %5
   734                              <1>  global %1_off3
   734 0000055F FF                  <1>  %1_off3 db %6
   735                                  
   736                                  opfunc MOVI
   736                              <1>  global x86_%1
   736                              <1>  x86_%1:
   737                                  GET_R rbp
   737 00000560 4C89E5              <1>  mov %1, GEN_REG
   737 00000563 4883C57F            <1>  add %1,byte 0x7F
   738 00000567 31C0                    xor eax,eax         ;2
   739                                  GET_BYTE_IMM al
   739 00000569 0C7F                <1>  or %1, 0x7F
   740 0000056B 6698                    cbw
   741 0000056D 98                      cwde
   742 0000056E 894500                  mov dword [rbp],eax       ;3
   743                                  opdesc MOVI,	0xff,6,0xff,10,0xff
   743                              <1>  global x86_%1_end
   743                              <1>  x86_%1_end:
   743                              <1>  global %1_size
   743 00000571 1100                <1>  %1_size dw (x86_%1_end - x86_%1)
   743                              <1>  global %1_src
   743 00000573 FF                  <1>  %1_src db %2
   743                              <1>  global %1_dest
   743 00000574 06                  <1>  %1_dest db %3
   743                              <1>  global %1_off1
   743 00000575 FF                  <1>  %1_off1 db %4
   743                              <1>  global %1_imm
   743 00000576 0A                  <1>  %1_imm db %5
   743                              <1>  global %1_off3
   743 00000577 FF                  <1>  %1_off3 db %6
   744                                  
   745                                  ;----------------------
   746                                  
   747                                  opfunc MOVBL0
   747                              <1>  global x86_%1
   747                              <1>  x86_%1:
   748                                  GET_R rbp
   748 00000578 4C89E5              <1>  mov %1, GEN_REG
   748 0000057B 4883C57F            <1>  add %1,byte 0x7F
   749 0000057F 8B7D00                  mov edi,dword [rbp]        ;3
   750 00000582 41033C24                add edi,dword [GEN_REG]
   751                                  CALL_GETMEM_BYTE
   751                              <1>  CALL_FUNC 0
   751 00000586 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
   751 0000058A 41FFD0              <2>  call r8
   752                                  GET_R rbp
   752 0000058D 4C89E5              <1>  mov %1, GEN_REG
   752 00000590 4883C57F            <1>  add %1,byte 0x7F
   753 00000594 6698                    cbw                  ;1
   754 00000596 98                      cwde                 ;1
   755 00000597 894500                  mov dword [rbp],eax        ;3
   756                                  opdesc MOVBL0,	6,27,0xff,0xff,0xff
   756                              <1>  global x86_%1_end
   756                              <1>  x86_%1_end:
   756                              <1>  global %1_size
   756 0000059A 2200                <1>  %1_size dw (x86_%1_end - x86_%1)
   756                              <1>  global %1_src
   756 0000059C 06                  <1>  %1_src db %2
   756                              <1>  global %1_dest
   756 0000059D 1B                  <1>  %1_dest db %3
   756                              <1>  global %1_off1
   756 0000059E FF                  <1>  %1_off1 db %4
   756                              <1>  global %1_imm
   756 0000059F FF                  <1>  %1_imm db %5
   756                              <1>  global %1_off3
   756 000005A0 FF                  <1>  %1_off3 db %6
   757                                  
   758                                  opfunc MOVWL0
   758                              <1>  global x86_%1
   758                              <1>  x86_%1:
   759                                  GET_R rbp
   759 000005A1 4C89E5              <1>  mov %1, GEN_REG
   759 000005A4 4883C57F            <1>  add %1,byte 0x7F
   760 000005A8 8B7D00                  mov edi,dword [rbp]        ;3
   761 000005AB 41033C24                add edi,dword [GEN_REG]        ;2
   762                                  CALL_GETMEM_WORD
   762                              <1>  CALL_FUNC 1
   762 000005AF 4D8B4624            <2>  mov r8, [SYS_REG + 28 + %1*8]
   762 000005B3 41FFD0              <2>  call r8
   763                                  GET_R rbp
   763 000005B6 4C89E5              <1>  mov %1, GEN_REG
   763 000005B9 4883C57F            <1>  add %1,byte 0x7F
   764 000005BD 98                      cwde                 ;1
   765 000005BE 894500                  mov dword [rbp],eax        ;3
   766                                  opdesc MOVWL0,	6,27,0xff,0xff,0xff
   766                              <1>  global x86_%1_end
   766                              <1>  x86_%1_end:
   766                              <1>  global %1_size
   766 000005C1 2000                <1>  %1_size dw (x86_%1_end - x86_%1)
   766                              <1>  global %1_src
   766 000005C3 06                  <1>  %1_src db %2
   766                              <1>  global %1_dest
   766 000005C4 1B                  <1>  %1_dest db %3
   766                              <1>  global %1_off1
   766 000005C5 FF                  <1>  %1_off1 db %4
   766                              <1>  global %1_imm
   766 000005C6 FF                  <1>  %1_imm db %5
   766                              <1>  global %1_off3
   766 000005C7 FF                  <1>  %1_off3 db %6
   767                                  
   768                                  opfunc MOVLL0
   768                              <1>  global x86_%1
   768                              <1>  x86_%1:
   769                                  GET_R rbp
   769 000005C8 4C89E5              <1>  mov %1, GEN_REG
   769 000005CB 4883C57F            <1>  add %1,byte 0x7F
   770 000005CF 8B7D00                  mov edi,dword [rbp]        ;3
   771 000005D2 41033C24                add edi,dword [GEN_REG]        ;2
   772                                  CALL_GETMEM_LONG
   772                              <1>  CALL_FUNC 2
   772 000005D6 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
   772 000005DA 41FFD0              <2>  call r8
   773                                  GET_R rbp
   773 000005DD 4C89E5              <1>  mov %1, GEN_REG
   773 000005E0 4883C57F            <1>  add %1,byte 0x7F
   774 000005E4 894500                  mov dword [rbp],eax        ;3
   775                                  opdesc MOVLL0,	6,27,0xff,0xff,0xff
   775                              <1>  global x86_%1_end
   775                              <1>  x86_%1_end:
   775                              <1>  global %1_size
   775 000005E7 1F00                <1>  %1_size dw (x86_%1_end - x86_%1)
   775                              <1>  global %1_src
   775 000005E9 06                  <1>  %1_src db %2
   775                              <1>  global %1_dest
   775 000005EA 1B                  <1>  %1_dest db %3
   775                              <1>  global %1_off1
   775 000005EB FF                  <1>  %1_off1 db %4
   775                              <1>  global %1_imm
   775 000005EC FF                  <1>  %1_imm db %5
   775                              <1>  global %1_off3
   775 000005ED FF                  <1>  %1_off3 db %6
   776                                  
   777                                  opfunc MOVT
   777                              <1>  global x86_%1
   777                              <1>  x86_%1:
   778                                  GET_R rbp
   778 000005EE 4C89E5              <1>  mov %1, GEN_REG
   778 000005F1 4883C57F            <1>  add %1,byte 0x7F
   779                                  GET_T eax
   779 000005F5 418B4500            <1>  mov %1, dword [CTRL_REG]
   779 000005F9 83E001              <1>  and %1, 0x1
   780 000005FC 894500                  mov dword [rbp],eax       ;3
   781                                  opdesc MOVT,		0xff,6,0xff,0xff,0xff
   781                              <1>  global x86_%1_end
   781                              <1>  x86_%1_end:
   781                              <1>  global %1_size
   781 000005FF 1100                <1>  %1_size dw (x86_%1_end - x86_%1)
   781                              <1>  global %1_src
   781 00000601 FF                  <1>  %1_src db %2
   781                              <1>  global %1_dest
   781 00000602 06                  <1>  %1_dest db %3
   781                              <1>  global %1_off1
   781 00000603 FF                  <1>  %1_off1 db %4
   781                              <1>  global %1_imm
   781 00000604 FF                  <1>  %1_imm db %5
   781                              <1>  global %1_off3
   781 00000605 FF                  <1>  %1_off3 db %6
   782                                  
   783                                  opfunc MOVBS0
   783                              <1>  global x86_%1
   783                              <1>  x86_%1:
   784                                  GET_R rbp
   784 00000606 4C89E5              <1>  mov %1, GEN_REG
   784 00000609 4883C57F            <1>  add %1,byte 0x7F
   785 0000060D 8B7D00                  mov edi,dword [rbp]        ;3
   786 00000610 41033C24                add edi,dword [GEN_REG]        ;2
   787                                  GET_R rbp
   787 00000614 4C89E5              <1>  mov %1, GEN_REG
   787 00000617 4883C57F            <1>  add %1,byte 0x7F
   788 0000061B 8B7500                  mov  esi,dword [rbp]       ;3
   789                                  CALL_SETMEM_BYTE
   789                              <1>  CALL_FUNC 3
   789 0000061E 4D8B4634            <2>  mov r8, [SYS_REG + 28 + %1*8]
   789 00000622 41FFD0              <2>  call r8
   790                                  opdesc MOVBS0,	20,6,0xff,0xff,0xff
   790                              <1>  global x86_%1_end
   790                              <1>  x86_%1_end:
   790                              <1>  global %1_size
   790 00000625 1F00                <1>  %1_size dw (x86_%1_end - x86_%1)
   790                              <1>  global %1_src
   790 00000627 14                  <1>  %1_src db %2
   790                              <1>  global %1_dest
   790 00000628 06                  <1>  %1_dest db %3
   790                              <1>  global %1_off1
   790 00000629 FF                  <1>  %1_off1 db %4
   790                              <1>  global %1_imm
   790 0000062A FF                  <1>  %1_imm db %5
   790                              <1>  global %1_off3
   790 0000062B FF                  <1>  %1_off3 db %6
   791                                  
   792                                  opfunc MOVWS0
   792                              <1>  global x86_%1
   792                              <1>  x86_%1:
   793                                  GET_R rbp
   793 0000062C 4C89E5              <1>  mov %1, GEN_REG
   793 0000062F 4883C57F            <1>  add %1,byte 0x7F
   794 00000633 8B7D00                  mov edi,dword [rbp]        ;3
   795 00000636 41033C24                add edi,dword [GEN_REG]        ;2
   796                                  GET_R rbp
   796 0000063A 4C89E5              <1>  mov %1, GEN_REG
   796 0000063D 4883C57F            <1>  add %1,byte 0x7F
   797 00000641 8B7500                  mov  esi,dword [rbp]       ;3
   798                                  CALL_SETMEM_WORD         ;1
   798                              <1>  CALL_FUNC 4
   798 00000644 4D8B463C            <2>  mov r8, [SYS_REG + 28 + %1*8]
   798 00000648 41FFD0              <2>  call r8
   799                                  opdesc MOVWS0,	20,6,0xff,0xff,0xff
   799                              <1>  global x86_%1_end
   799                              <1>  x86_%1_end:
   799                              <1>  global %1_size
   799 0000064B 1F00                <1>  %1_size dw (x86_%1_end - x86_%1)
   799                              <1>  global %1_src
   799 0000064D 14                  <1>  %1_src db %2
   799                              <1>  global %1_dest
   799 0000064E 06                  <1>  %1_dest db %3
   799                              <1>  global %1_off1
   799 0000064F FF                  <1>  %1_off1 db %4
   799                              <1>  global %1_imm
   799 00000650 FF                  <1>  %1_imm db %5
   799                              <1>  global %1_off3
   799 00000651 FF                  <1>  %1_off3 db %6
   800                                  
   801                                  opfunc MOVLS0
   801                              <1>  global x86_%1
   801                              <1>  x86_%1:
   802                                  GET_R rbp
   802 00000652 4C89E5              <1>  mov %1, GEN_REG
   802 00000655 4883C57F            <1>  add %1,byte 0x7F
   803 00000659 8B7D00                  mov edi,dword [rbp]        ;3
   804 0000065C 41033C24                add edi,dword [GEN_REG]        ;2
   805                                  GET_R rbp
   805 00000660 4C89E5              <1>  mov %1, GEN_REG
   805 00000663 4883C57F            <1>  add %1,byte 0x7F
   806 00000667 8B7500                  mov  esi,dword [rbp]       ;3
   807                                  CALL_SETMEM_LONG
   807                              <1>  CALL_FUNC 5
   807 0000066A 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
   807 0000066E 41FFD0              <2>  call r8
   808                                  opdesc MOVLS0,	20,6,0xff,0xff,0xff
   808                              <1>  global x86_%1_end
   808                              <1>  x86_%1_end:
   808                              <1>  global %1_size
   808 00000671 1F00                <1>  %1_size dw (x86_%1_end - x86_%1)
   808                              <1>  global %1_src
   808 00000673 14                  <1>  %1_src db %2
   808                              <1>  global %1_dest
   808 00000674 06                  <1>  %1_dest db %3
   808                              <1>  global %1_off1
   808 00000675 FF                  <1>  %1_off1 db %4
   808                              <1>  global %1_imm
   808 00000676 FF                  <1>  %1_imm db %5
   808                              <1>  global %1_off3
   808 00000677 FF                  <1>  %1_off3 db %6
   809                                  
   810                                  ;===========================================================================
   811                                  ;Verified Opcodes
   812                                  ;===========================================================================
   813                                  
   814                                  opfunc DT
   814                              <1>  global x86_%1
   814                              <1>  x86_%1:
   815                                  GET_R rbp
   815 00000678 4C89E5              <1>  mov %1, GEN_REG
   815 0000067B 4883C57F            <1>  add %1,byte 0x7F
   816                                  CLEAR_T
   816 0000067F 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   817 00000687 FF4D00                  dec dword [rbp]     ;3
   818 0000068A 837D0000                cmp dword [rbp], 0 ;4
   819 0000068E 7505                    jne .continue       ;2
   820                                  SET_T
   820 00000690 41834D0001          <1>  or dword [CTRL_REG], 0x1
   821                                  .continue:
   822                                  opdesc DT,		0xff,6,0xff,0xff,0xff
   822                              <1>  global x86_%1_end
   822                              <1>  x86_%1_end:
   822                              <1>  global %1_size
   822 00000695 1D00                <1>  %1_size dw (x86_%1_end - x86_%1)
   822                              <1>  global %1_src
   822 00000697 FF                  <1>  %1_src db %2
   822                              <1>  global %1_dest
   822 00000698 06                  <1>  %1_dest db %3
   822                              <1>  global %1_off1
   822 00000699 FF                  <1>  %1_off1 db %4
   822                              <1>  global %1_imm
   822 0000069A FF                  <1>  %1_imm db %5
   822                              <1>  global %1_off3
   822 0000069B FF                  <1>  %1_off3 db %6
   823                                  
   824                                  opfunc CMP_PZ
   824                              <1>  global x86_%1
   824                              <1>  x86_%1:
   825                                  GET_R rbp
   825 0000069C 4C89E5              <1>  mov %1, GEN_REG
   825 0000069F 4883C57F            <1>  add %1,byte 0x7F
   826                                  CLEAR_T
   826 000006A3 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   827 000006AB 837D0000                cmp dword [rbp],byte 0    ;4
   828 000006AF 7C05                    jl .continue              ;2
   829                                  SET_T
   829 000006B1 41834D0001          <1>  or dword [CTRL_REG], 0x1
   830                                  .continue:
   831                                  opdesc CMP_PZ,	0xff,6,0xff,0xff,0xff
   831                              <1>  global x86_%1_end
   831                              <1>  x86_%1_end:
   831                              <1>  global %1_size
   831 000006B6 1A00                <1>  %1_size dw (x86_%1_end - x86_%1)
   831                              <1>  global %1_src
   831 000006B8 FF                  <1>  %1_src db %2
   831                              <1>  global %1_dest
   831 000006B9 06                  <1>  %1_dest db %3
   831                              <1>  global %1_off1
   831 000006BA FF                  <1>  %1_off1 db %4
   831                              <1>  global %1_imm
   831 000006BB FF                  <1>  %1_imm db %5
   831                              <1>  global %1_off3
   831 000006BC FF                  <1>  %1_off3 db %6
   832                                  
   833                                  opfunc CMP_PL
   833                              <1>  global x86_%1
   833                              <1>  x86_%1:
   834                                  GET_R rbp
   834 000006BD 4C89E5              <1>  mov %1, GEN_REG
   834 000006C0 4883C57F            <1>  add %1,byte 0x7F
   835                                  CLEAR_T
   835 000006C4 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   836 000006CC 837D0000                cmp dword [rbp], 0          ;7
   837 000006D0 7E05                    jle .continue               ;2
   838                                  SET_T
   838 000006D2 41834D0001          <1>  or dword [CTRL_REG], 0x1
   839                                  .continue:
   840                                  opdesc CMP_PL,	0xff,6,0xff,0xff,0xff
   840                              <1>  global x86_%1_end
   840                              <1>  x86_%1_end:
   840                              <1>  global %1_size
   840 000006D7 1A00                <1>  %1_size dw (x86_%1_end - x86_%1)
   840                              <1>  global %1_src
   840 000006D9 FF                  <1>  %1_src db %2
   840                              <1>  global %1_dest
   840 000006DA 06                  <1>  %1_dest db %3
   840                              <1>  global %1_off1
   840 000006DB FF                  <1>  %1_off1 db %4
   840                              <1>  global %1_imm
   840 000006DC FF                  <1>  %1_imm db %5
   840                              <1>  global %1_off3
   840 000006DD FF                  <1>  %1_off3 db %6
   841                                  
   842                                  opfunc CMP_EQ
   842                              <1>  global x86_%1
   842                              <1>  x86_%1:
   843                                  GET_R rbp
   843 000006DE 4C89E5              <1>  mov %1, GEN_REG
   843 000006E1 4883C57F            <1>  add %1,byte 0x7F
   844 000006E5 8B4500                  mov eax,[rbp]       ;2
   845                                  GET_R rbp
   845 000006E8 4C89E5              <1>  mov %1, GEN_REG
   845 000006EB 4883C57F            <1>  add %1,byte 0x7F
   846                                  CLEAR_T
   846 000006EF 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   847 000006F7 394500                  cmp [rbp],eax       ;3
   848 000006FA 7505                    jne .continue       ;2  
   849                                  SET_T
   849 000006FC 41834D0001          <1>  or dword [CTRL_REG], 0x1
   850                                  .continue:
   851                                  opdesc CMP_EQ,	6,16,0xff,0xff,0xff
   851                              <1>  global x86_%1_end
   851                              <1>  x86_%1_end:
   851                              <1>  global %1_size
   851 00000701 2300                <1>  %1_size dw (x86_%1_end - x86_%1)
   851                              <1>  global %1_src
   851 00000703 06                  <1>  %1_src db %2
   851                              <1>  global %1_dest
   851 00000704 10                  <1>  %1_dest db %3
   851                              <1>  global %1_off1
   851 00000705 FF                  <1>  %1_off1 db %4
   851                              <1>  global %1_imm
   851 00000706 FF                  <1>  %1_imm db %5
   851                              <1>  global %1_off3
   851 00000707 FF                  <1>  %1_off3 db %6
   852                                  
   853                                  opfunc CMP_HS
   853                              <1>  global x86_%1
   853                              <1>  x86_%1:
   854                                  GET_R rbp
   854 00000708 4C89E5              <1>  mov %1, GEN_REG
   854 0000070B 4883C57F            <1>  add %1,byte 0x7F
   855 0000070F 8B4500                  mov eax,[rbp]       ;3
   856                                  GET_R rbp
   856 00000712 4C89E5              <1>  mov %1, GEN_REG
   856 00000715 4883C57F            <1>  add %1,byte 0x7F
   857                                  CLEAR_T
   857 00000719 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   858 00000721 394500                  cmp [rbp],eax       ;3
   859 00000724 7205                    jb .continue        ;2
   860                                  SET_T
   860 00000726 41834D0001          <1>  or dword [CTRL_REG], 0x1
   861                                  .continue:
   862                                  opdesc CMP_HS,	6,16,0xff,0xff,0xff
   862                              <1>  global x86_%1_end
   862                              <1>  x86_%1_end:
   862                              <1>  global %1_size
   862 0000072B 2300                <1>  %1_size dw (x86_%1_end - x86_%1)
   862                              <1>  global %1_src
   862 0000072D 06                  <1>  %1_src db %2
   862                              <1>  global %1_dest
   862 0000072E 10                  <1>  %1_dest db %3
   862                              <1>  global %1_off1
   862 0000072F FF                  <1>  %1_off1 db %4
   862                              <1>  global %1_imm
   862 00000730 FF                  <1>  %1_imm db %5
   862                              <1>  global %1_off3
   862 00000731 FF                  <1>  %1_off3 db %6
   863                                  
   864                                  opfunc CMP_HI
   864                              <1>  global x86_%1
   864                              <1>  x86_%1:
   865                                  GET_R rbp
   865 00000732 4C89E5              <1>  mov %1, GEN_REG
   865 00000735 4883C57F            <1>  add %1,byte 0x7F
   866 00000739 8B4500                  mov eax,[rbp]       ;2
   867                                  GET_R rbp
   867 0000073C 4C89E5              <1>  mov %1, GEN_REG
   867 0000073F 4883C57F            <1>  add %1,byte 0x7F
   868                                  CLEAR_T
   868 00000743 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   869 0000074B 394500                  cmp [rbp],eax       ;3
   870 0000074E 7605                    jbe .continue       ;2
   871                                  SET_T 
   871 00000750 41834D0001          <1>  or dword [CTRL_REG], 0x1
   872                                  .continue:
   873                                  opdesc CMP_HI,	6,16,0xff,0xff,0xff
   873                              <1>  global x86_%1_end
   873                              <1>  x86_%1_end:
   873                              <1>  global %1_size
   873 00000755 2300                <1>  %1_size dw (x86_%1_end - x86_%1)
   873                              <1>  global %1_src
   873 00000757 06                  <1>  %1_src db %2
   873                              <1>  global %1_dest
   873 00000758 10                  <1>  %1_dest db %3
   873                              <1>  global %1_off1
   873 00000759 FF                  <1>  %1_off1 db %4
   873                              <1>  global %1_imm
   873 0000075A FF                  <1>  %1_imm db %5
   873                              <1>  global %1_off3
   873 0000075B FF                  <1>  %1_off3 db %6
   874                                  
   875                                  opfunc CMP_GE
   875                              <1>  global x86_%1
   875                              <1>  x86_%1:
   876                                  GET_R rbp
   876 0000075C 4C89E5              <1>  mov %1, GEN_REG
   876 0000075F 4883C57F            <1>  add %1,byte 0x7F
   877 00000763 8B4500                  mov eax,dword [rbp]       ;2
   878                                  GET_R rbp
   878 00000766 4C89E5              <1>  mov %1, GEN_REG
   878 00000769 4883C57F            <1>  add %1,byte 0x7F
   879                                  CLEAR_T
   879 0000076D 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   880 00000775 394500                  cmp dword [rbp],eax       ;3
   881 00000778 7C05                    jl .continue        ;2
   882                                  SET_T  
   882 0000077A 41834D0001          <1>  or dword [CTRL_REG], 0x1
   883                                  .continue:
   884                                  opdesc CMP_GE,	6,16,0xff,0xff,0xff
   884                              <1>  global x86_%1_end
   884                              <1>  x86_%1_end:
   884                              <1>  global %1_size
   884 0000077F 2300                <1>  %1_size dw (x86_%1_end - x86_%1)
   884                              <1>  global %1_src
   884 00000781 06                  <1>  %1_src db %2
   884                              <1>  global %1_dest
   884 00000782 10                  <1>  %1_dest db %3
   884                              <1>  global %1_off1
   884 00000783 FF                  <1>  %1_off1 db %4
   884                              <1>  global %1_imm
   884 00000784 FF                  <1>  %1_imm db %5
   884                              <1>  global %1_off3
   884 00000785 FF                  <1>  %1_off3 db %6
   885                                  
   886                                  opfunc CMP_GT
   886                              <1>  global x86_%1
   886                              <1>  x86_%1:
   887                                  GET_R rbp
   887 00000786 4C89E5              <1>  mov %1, GEN_REG
   887 00000789 4883C57F            <1>  add %1,byte 0x7F
   888 0000078D 8B4500                  mov eax,[rbp]       ;2
   889                                  GET_R rbp
   889 00000790 4C89E5              <1>  mov %1, GEN_REG
   889 00000793 4883C57F            <1>  add %1,byte 0x7F
   890                                  CLEAR_T
   890 00000797 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   891 0000079F 394500                  cmp [rbp],eax       ;3
   892 000007A2 7E05                    jle .continue       ;2
   893                                  SET_T
   893 000007A4 41834D0001          <1>  or dword [CTRL_REG], 0x1
   894                                  .continue:
   895                                  opdesc CMP_GT,	6,16,0xff,0xff,0xff
   895                              <1>  global x86_%1_end
   895                              <1>  x86_%1_end:
   895                              <1>  global %1_size
   895 000007A9 2300                <1>  %1_size dw (x86_%1_end - x86_%1)
   895                              <1>  global %1_src
   895 000007AB 06                  <1>  %1_src db %2
   895                              <1>  global %1_dest
   895 000007AC 10                  <1>  %1_dest db %3
   895                              <1>  global %1_off1
   895 000007AD FF                  <1>  %1_off1 db %4
   895                              <1>  global %1_imm
   895 000007AE FF                  <1>  %1_imm db %5
   895                              <1>  global %1_off3
   895 000007AF FF                  <1>  %1_off3 db %6
   896                                  
   897                                  opfunc ROTR
   897                              <1>  global x86_%1
   897                              <1>  x86_%1:
   898                                  GET_R rbp
   898 000007B0 4C89E5              <1>  mov %1, GEN_REG
   898 000007B3 4883C57F            <1>  add %1,byte 0x7F
   899 000007B7 8B4500                  mov eax,dword [rbp]       ;2
   900 000007BA C16D0001                shr dword [rbp],byte 1     ;3
   901 000007BE 83E001                  and eax,byte 1     ;3
   902                                  CLEAR_T
   902 000007C1 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   903                                  SET_T_R eax
   903 000007C9 41094500            <1>  or dword [CTRL_REG], %1
   904                                  TEST_IS_T
   904 000007CD 410FBA650000        <1>  bt dword [CTRL_REG],0x0
   905 000007D3 730B                    jnc continue_rotr
   906 000007D5 31C0                    xor eax, eax
   907 000007D7 83C801                  or eax, byte 1
   908 000007DA C1E01F                  shl eax, byte 31
   909 000007DD 094500                  or dword [rbp],eax
   910                                  continue_rotr:
   911                                  opdesc ROTR,	0xff,6,0xff,0xff,0xff
   911                              <1>  global x86_%1_end
   911                              <1>  x86_%1_end:
   911                              <1>  global %1_size
   911 000007E0 3000                <1>  %1_size dw (x86_%1_end - x86_%1)
   911                              <1>  global %1_src
   911 000007E2 FF                  <1>  %1_src db %2
   911                              <1>  global %1_dest
   911 000007E3 06                  <1>  %1_dest db %3
   911                              <1>  global %1_off1
   911 000007E4 FF                  <1>  %1_off1 db %4
   911                              <1>  global %1_imm
   911 000007E5 FF                  <1>  %1_imm db %5
   911                              <1>  global %1_off3
   911 000007E6 FF                  <1>  %1_off3 db %6
   912                                  
   913                                  opfunc ROTCR
   913                              <1>  global x86_%1
   913                              <1>  x86_%1:
   914                                  GET_R rbp
   914 000007E7 4C89E5              <1>  mov %1, GEN_REG
   914 000007EA 4883C57F            <1>  add %1,byte 0x7F
   915 000007EE 8B4500                  mov eax,dword [rbp]       ;2
   916 000007F1 C16D0001                shr dword [rbp],byte 1     ;3
   917 000007F5 83E001                  and eax,byte 1     ;3
   918                                  TEST_IS_T
   918 000007F8 410FBA650000        <1>  bt dword [CTRL_REG],0x0
   919 000007FE 730B                    jnc continue_rotcr
   920 00000800 B901000000              mov ecx, 1
   921 00000805 C1E11F                  shl ecx, byte 31
   922 00000808 094D00                  or dword [rbp],ecx
   923                                  continue_rotcr:  ;2
   924                                  CLEAR_T
   924 0000080B 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   925                                  SET_T_R eax
   925 00000813 41094500            <1>  or dword [CTRL_REG], %1
   926                                  opdesc ROTCR,	0xff,6,0xff,0xff,0xff
   926                              <1>  global x86_%1_end
   926                              <1>  x86_%1_end:
   926                              <1>  global %1_size
   926 00000817 3000                <1>  %1_size dw (x86_%1_end - x86_%1)
   926                              <1>  global %1_src
   926 00000819 FF                  <1>  %1_src db %2
   926                              <1>  global %1_dest
   926 0000081A 06                  <1>  %1_dest db %3
   926                              <1>  global %1_off1
   926 0000081B FF                  <1>  %1_off1 db %4
   926                              <1>  global %1_imm
   926 0000081C FF                  <1>  %1_imm db %5
   926                              <1>  global %1_off3
   926 0000081D FF                  <1>  %1_off3 db %6
   927                                  
   928                                  opfunc ROTL
   928                              <1>  global x86_%1
   928                              <1>  x86_%1:
   929                                  GET_R rbp
   929 0000081E 4C89E5              <1>  mov %1, GEN_REG
   929 00000821 4883C57F            <1>  add %1,byte 0x7F
   930 00000825 8B4500                  mov eax,dword [rbp]       ;2
   931 00000828 C1650001                shl dword [rbp],byte 1     ;3
   932 0000082C C1E81F                  shr eax,byte 31     ;3
   933 0000082F 83E001                  and eax,byte 1     ;3
   934                                  CLEAR_T
   934 00000832 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   935                                  SET_T_R eax
   935 0000083A 41094500            <1>  or dword [CTRL_REG], %1
   936                                  TEST_IS_T
   936 0000083E 410FBA650000        <1>  bt dword [CTRL_REG],0x0
   937 00000844 7304                    jnc continue_rotl
   938 00000846 834D0001                or dword [rbp],byte 1
   939                                  continue_rotl:
   940                                  opdesc ROTL,	0xff,6,0xff,0xff,0xff
   940                              <1>  global x86_%1_end
   940                              <1>  x86_%1_end:
   940                              <1>  global %1_size
   940 0000084A 2C00                <1>  %1_size dw (x86_%1_end - x86_%1)
   940                              <1>  global %1_src
   940 0000084C FF                  <1>  %1_src db %2
   940                              <1>  global %1_dest
   940 0000084D 06                  <1>  %1_dest db %3
   940                              <1>  global %1_off1
   940 0000084E FF                  <1>  %1_off1 db %4
   940                              <1>  global %1_imm
   940 0000084F FF                  <1>  %1_imm db %5
   940                              <1>  global %1_off3
   940 00000850 FF                  <1>  %1_off3 db %6
   941                                  
   942                                  opfunc ROTCL
   942                              <1>  global x86_%1
   942                              <1>  x86_%1:
   943                                  GET_R rbp
   943 00000851 4C89E5              <1>  mov %1, GEN_REG
   943 00000854 4883C57F            <1>  add %1,byte 0x7F
   944 00000858 8B4500                  mov eax,dword [rbp]       ;2
   945 0000085B C1650001                shl dword [rbp],byte 1     ;3
   946 0000085F C1E81F                  shr eax,byte 31     ;3
   947 00000862 83E001                  and eax,byte 1     ;3
   948                                  TEST_IS_T
   948 00000865 410FBA650000        <1>  bt dword [CTRL_REG],0x0
   949 0000086B 7304                    jnc continue_rotcl
   950 0000086D 834D0001                or dword [rbp],byte 1
   951                                  continue_rotcl:
   952                                  CLEAR_T
   952 00000871 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   953                                  SET_T_R eax
   953 00000879 41094500            <1>  or dword [CTRL_REG], %1
   954                                  opdesc ROTCL,	0xff,6,0xff,0xff,0xff
   954                              <1>  global x86_%1_end
   954                              <1>  x86_%1_end:
   954                              <1>  global %1_size
   954 0000087D 2C00                <1>  %1_size dw (x86_%1_end - x86_%1)
   954                              <1>  global %1_src
   954 0000087F FF                  <1>  %1_src db %2
   954                              <1>  global %1_dest
   954 00000880 06                  <1>  %1_dest db %3
   954                              <1>  global %1_off1
   954 00000881 FF                  <1>  %1_off1 db %4
   954                              <1>  global %1_imm
   954 00000882 FF                  <1>  %1_imm db %5
   954                              <1>  global %1_off3
   954 00000883 FF                  <1>  %1_off3 db %6
   955                                  
   956                                  opfunc SHL
   956                              <1>  global x86_%1
   956                              <1>  x86_%1:
   957                                  GET_R rbp
   957 00000884 4C89E5              <1>  mov %1, GEN_REG
   957 00000887 4883C57F            <1>  add %1,byte 0x7F
   958 0000088B 8B4500                  mov eax, dword [rbp]
   959 0000088E C1650001                shl dword [rbp], byte 1
   960                                  CLEAR_T
   960 00000892 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   961 0000089A C1E81F                  shr eax,byte 31     ;3
   962 0000089D A901000000              test eax, 1
   963 000008A2 7405                    je cont_shl
   964                                  SET_T
   964 000008A4 41834D0001          <1>  or dword [CTRL_REG], 0x1
   965                                  cont_shl:
   966                                  opdesc SHL,		0xff,6,0xff,0xff,0xff
   966                              <1>  global x86_%1_end
   966                              <1>  x86_%1_end:
   966                              <1>  global %1_size
   966 000008A9 2500                <1>  %1_size dw (x86_%1_end - x86_%1)
   966                              <1>  global %1_src
   966 000008AB FF                  <1>  %1_src db %2
   966                              <1>  global %1_dest
   966 000008AC 06                  <1>  %1_dest db %3
   966                              <1>  global %1_off1
   966 000008AD FF                  <1>  %1_off1 db %4
   966                              <1>  global %1_imm
   966 000008AE FF                  <1>  %1_imm db %5
   966                              <1>  global %1_off3
   966 000008AF FF                  <1>  %1_off3 db %6
   967                                  
   968                                  opfunc SHLR
   968                              <1>  global x86_%1
   968                              <1>  x86_%1:
   969                                  GET_R rbp
   969 000008B0 4C89E5              <1>  mov %1, GEN_REG
   969 000008B3 4883C57F            <1>  add %1,byte 0x7F
   970 000008B7 8B4500                  mov eax, dword [rbp]
   971 000008BA C16D0001                shr dword [rbp], byte 1
   972 000008BE 83E001                  and dword eax,1             ;5
   973                                  CLEAR_T
   973 000008C1 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   974 000008C9 A901000000              test eax, 1
   975 000008CE 7405                    je cont_shlr
   976                                  SET_T
   976 000008D0 41834D0001          <1>  or dword [CTRL_REG], 0x1
   977                                  cont_shlr:
   978                                  opdesc SHLR,	0xff,6,0xff,0xff,0xff
   978                              <1>  global x86_%1_end
   978                              <1>  x86_%1_end:
   978                              <1>  global %1_size
   978 000008D5 2500                <1>  %1_size dw (x86_%1_end - x86_%1)
   978                              <1>  global %1_src
   978 000008D7 FF                  <1>  %1_src db %2
   978                              <1>  global %1_dest
   978 000008D8 06                  <1>  %1_dest db %3
   978                              <1>  global %1_off1
   978 000008D9 FF                  <1>  %1_off1 db %4
   978                              <1>  global %1_imm
   978 000008DA FF                  <1>  %1_imm db %5
   978                              <1>  global %1_off3
   978 000008DB FF                  <1>  %1_off3 db %6
   979                                  
   980                                  opfunc SHAR
   980                              <1>  global x86_%1
   980                              <1>  x86_%1:
   981                                  GET_R rbp
   981 000008DC 4C89E5              <1>  mov %1, GEN_REG
   981 000008DF 4883C57F            <1>  add %1,byte 0x7F
   982 000008E3 8B4500                  mov eax,dword [rbp]
   983 000008E6 C16D0001                shr dword [rbp], byte 1
   984                                  CLEAR_T
   984 000008EA 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
   985 000008F2 A901000000              test eax, 1
   986 000008F7 7405                    je cont_shar
   987                                  SET_T
   987 000008F9 41834D0001          <1>  or dword [CTRL_REG], 0x1
   988                                  cont_shar:
   989 000008FE C1E81F                  shr eax, byte 31
   990 00000901 C1E01F                  shl eax, byte 31
   991 00000904 094500                  or dword [rbp], eax
   992                                  opdesc SHAR,	0xff,6,0xff,0xff,0xff
   992                              <1>  global x86_%1_end
   992                              <1>  x86_%1_end:
   992                              <1>  global %1_size
   992 00000907 2B00                <1>  %1_size dw (x86_%1_end - x86_%1)
   992                              <1>  global %1_src
   992 00000909 FF                  <1>  %1_src db %2
   992                              <1>  global %1_dest
   992 0000090A 06                  <1>  %1_dest db %3
   992                              <1>  global %1_off1
   992 0000090B FF                  <1>  %1_off1 db %4
   992                              <1>  global %1_imm
   992 0000090C FF                  <1>  %1_imm db %5
   992                              <1>  global %1_off3
   992 0000090D FF                  <1>  %1_off3 db %6
   993                                  
   994                                  
   995                                  opfunc SHLL2
   995                              <1>  global x86_%1
   995                              <1>  x86_%1:
   996                                  GET_R rbp
   996 0000090E 4C89E5              <1>  mov %1, GEN_REG
   996 00000911 4883C57F            <1>  add %1,byte 0x7F
   997 00000915 C1650002                shl dword [rbp],byte 2 ;4
   998                                  opdesc SHLL2,	0xff,6,0xff,0xff,0xff
   998                              <1>  global x86_%1_end
   998                              <1>  x86_%1_end:
   998                              <1>  global %1_size
   998 00000919 0B00                <1>  %1_size dw (x86_%1_end - x86_%1)
   998                              <1>  global %1_src
   998 0000091B FF                  <1>  %1_src db %2
   998                              <1>  global %1_dest
   998 0000091C 06                  <1>  %1_dest db %3
   998                              <1>  global %1_off1
   998 0000091D FF                  <1>  %1_off1 db %4
   998                              <1>  global %1_imm
   998 0000091E FF                  <1>  %1_imm db %5
   998                              <1>  global %1_off3
   998 0000091F FF                  <1>  %1_off3 db %6
   999                                  
  1000                                  opfunc SHLR2
  1000                              <1>  global x86_%1
  1000                              <1>  x86_%1:
  1001                                  GET_R rbp
  1001 00000920 4C89E5              <1>  mov %1, GEN_REG
  1001 00000923 4883C57F            <1>  add %1,byte 0x7F
  1002 00000927 C16D0002                shr dword [rbp],byte 2 ;4
  1003                                  opdesc SHLR2,	0xff,6,0xff,0xff,0xff
  1003                              <1>  global x86_%1_end
  1003                              <1>  x86_%1_end:
  1003                              <1>  global %1_size
  1003 0000092B 0B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1003                              <1>  global %1_src
  1003 0000092D FF                  <1>  %1_src db %2
  1003                              <1>  global %1_dest
  1003 0000092E 06                  <1>  %1_dest db %3
  1003                              <1>  global %1_off1
  1003 0000092F FF                  <1>  %1_off1 db %4
  1003                              <1>  global %1_imm
  1003 00000930 FF                  <1>  %1_imm db %5
  1003                              <1>  global %1_off3
  1003 00000931 FF                  <1>  %1_off3 db %6
  1004                                  
  1005                                  opfunc SHLL8
  1005                              <1>  global x86_%1
  1005                              <1>  x86_%1:
  1006                                  GET_R rbp
  1006 00000932 4C89E5              <1>  mov %1, GEN_REG
  1006 00000935 4883C57F            <1>  add %1,byte 0x7F
  1007 00000939 C1650008                shl dword [rbp],byte 8 ;4
  1008                                  opdesc SHLL8,	0xff,6,0xff,0xff,0xff
  1008                              <1>  global x86_%1_end
  1008                              <1>  x86_%1_end:
  1008                              <1>  global %1_size
  1008 0000093D 0B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1008                              <1>  global %1_src
  1008 0000093F FF                  <1>  %1_src db %2
  1008                              <1>  global %1_dest
  1008 00000940 06                  <1>  %1_dest db %3
  1008                              <1>  global %1_off1
  1008 00000941 FF                  <1>  %1_off1 db %4
  1008                              <1>  global %1_imm
  1008 00000942 FF                  <1>  %1_imm db %5
  1008                              <1>  global %1_off3
  1008 00000943 FF                  <1>  %1_off3 db %6
  1009                                  
  1010                                  opfunc SHLR8
  1010                              <1>  global x86_%1
  1010                              <1>  x86_%1:
  1011                                  GET_R rbp
  1011 00000944 4C89E5              <1>  mov %1, GEN_REG
  1011 00000947 4883C57F            <1>  add %1,byte 0x7F
  1012 0000094B C16D0008                shr dword [rbp],byte 8 ;4
  1013                                  opdesc SHLR8,	0xff,6,0xff,0xff,0xff
  1013                              <1>  global x86_%1_end
  1013                              <1>  x86_%1_end:
  1013                              <1>  global %1_size
  1013 0000094F 0B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1013                              <1>  global %1_src
  1013 00000951 FF                  <1>  %1_src db %2
  1013                              <1>  global %1_dest
  1013 00000952 06                  <1>  %1_dest db %3
  1013                              <1>  global %1_off1
  1013 00000953 FF                  <1>  %1_off1 db %4
  1013                              <1>  global %1_imm
  1013 00000954 FF                  <1>  %1_imm db %5
  1013                              <1>  global %1_off3
  1013 00000955 FF                  <1>  %1_off3 db %6
  1014                                  
  1015                                  
  1016                                  opfunc SHLL16
  1016                              <1>  global x86_%1
  1016                              <1>  x86_%1:
  1017                                  GET_R rbp
  1017 00000956 4C89E5              <1>  mov %1, GEN_REG
  1017 00000959 4883C57F            <1>  add %1,byte 0x7F
  1018 0000095D C1650010                shl dword [rbp],byte 16 ;4
  1019                                  opdesc SHLL16,	0xff,6,0xff,0xff,0xff
  1019                              <1>  global x86_%1_end
  1019                              <1>  x86_%1_end:
  1019                              <1>  global %1_size
  1019 00000961 0B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1019                              <1>  global %1_src
  1019 00000963 FF                  <1>  %1_src db %2
  1019                              <1>  global %1_dest
  1019 00000964 06                  <1>  %1_dest db %3
  1019                              <1>  global %1_off1
  1019 00000965 FF                  <1>  %1_off1 db %4
  1019                              <1>  global %1_imm
  1019 00000966 FF                  <1>  %1_imm db %5
  1019                              <1>  global %1_off3
  1019 00000967 FF                  <1>  %1_off3 db %6
  1020                                  
  1021                                  opfunc SHLR16
  1021                              <1>  global x86_%1
  1021                              <1>  x86_%1:
  1022                                  GET_R rbp
  1022 00000968 4C89E5              <1>  mov %1, GEN_REG
  1022 0000096B 4883C57F            <1>  add %1,byte 0x7F
  1023 0000096F C16D0010                shr dword [rbp],byte 16 ;4
  1024                                  opdesc SHLR16,	0xff,6,0xff,0xff,0xff
  1024                              <1>  global x86_%1_end
  1024                              <1>  x86_%1_end:
  1024                              <1>  global %1_size
  1024 00000973 0B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1024                              <1>  global %1_src
  1024 00000975 FF                  <1>  %1_src db %2
  1024                              <1>  global %1_dest
  1024 00000976 06                  <1>  %1_dest db %3
  1024                              <1>  global %1_off1
  1024 00000977 FF                  <1>  %1_off1 db %4
  1024                              <1>  global %1_imm
  1024 00000978 FF                  <1>  %1_imm db %5
  1024                              <1>  global %1_off3
  1024 00000979 FF                  <1>  %1_off3 db %6
  1025                                  
  1026                                  opfunc AND
  1026                              <1>  global x86_%1
  1026                              <1>  x86_%1:
  1027                                  GET_R rbp
  1027 0000097A 4C89E5              <1>  mov %1, GEN_REG
  1027 0000097D 4883C57F            <1>  add %1,byte 0x7F
  1028 00000981 8B4500                  mov eax,dword [rbp]       ;2
  1029                                  GET_R rbp
  1029 00000984 4C89E5              <1>  mov %1, GEN_REG
  1029 00000987 4883C57F            <1>  add %1,byte 0x7F
  1030 0000098B 214500                  and dword [rbp],eax       ;2
  1031                                  opdesc AND,		6,16,0xff,0xff,0xff
  1031                              <1>  global x86_%1_end
  1031                              <1>  x86_%1_end:
  1031                              <1>  global %1_size
  1031 0000098E 1400                <1>  %1_size dw (x86_%1_end - x86_%1)
  1031                              <1>  global %1_src
  1031 00000990 06                  <1>  %1_src db %2
  1031                              <1>  global %1_dest
  1031 00000991 10                  <1>  %1_dest db %3
  1031                              <1>  global %1_off1
  1031 00000992 FF                  <1>  %1_off1 db %4
  1031                              <1>  global %1_imm
  1031 00000993 FF                  <1>  %1_imm db %5
  1031                              <1>  global %1_off3
  1031 00000994 FF                  <1>  %1_off3 db %6
  1032                                  
  1033                                  opfunc OR
  1033                              <1>  global x86_%1
  1033                              <1>  x86_%1:
  1034                                  GET_R rbp
  1034 00000995 4C89E5              <1>  mov %1, GEN_REG
  1034 00000998 4883C57F            <1>  add %1,byte 0x7F
  1035 0000099C 8B4500                  mov eax,dword [rbp]       ;2
  1036                                  GET_R rbp
  1036 0000099F 4C89E5              <1>  mov %1, GEN_REG
  1036 000009A2 4883C57F            <1>  add %1,byte 0x7F
  1037 000009A6 094500                  or dword [rbp],eax       ;2
  1038                                  opdesc OR,		6,16,0xff,0xff,0xff
  1038                              <1>  global x86_%1_end
  1038                              <1>  x86_%1_end:
  1038                              <1>  global %1_size
  1038 000009A9 1400                <1>  %1_size dw (x86_%1_end - x86_%1)
  1038                              <1>  global %1_src
  1038 000009AB 06                  <1>  %1_src db %2
  1038                              <1>  global %1_dest
  1038 000009AC 10                  <1>  %1_dest db %3
  1038                              <1>  global %1_off1
  1038 000009AD FF                  <1>  %1_off1 db %4
  1038                              <1>  global %1_imm
  1038 000009AE FF                  <1>  %1_imm db %5
  1038                              <1>  global %1_off3
  1038 000009AF FF                  <1>  %1_off3 db %6
  1039                                  
  1040                                  opfunc XOR
  1040                              <1>  global x86_%1
  1040                              <1>  x86_%1:
  1041                                  GET_R rbp
  1041 000009B0 4C89E5              <1>  mov %1, GEN_REG
  1041 000009B3 4883C57F            <1>  add %1,byte 0x7F
  1042 000009B7 8B4500                  mov eax,dword [rbp]       ;2
  1043                                  GET_R rbp
  1043 000009BA 4C89E5              <1>  mov %1, GEN_REG
  1043 000009BD 4883C57F            <1>  add %1,byte 0x7F
  1044 000009C1 314500                  xor dword[rbp],eax       ;3
  1045                                  opdesc XOR,		6,16,0xff,0xff,0xff
  1045                              <1>  global x86_%1_end
  1045                              <1>  x86_%1_end:
  1045                              <1>  global %1_size
  1045 000009C4 1400                <1>  %1_size dw (x86_%1_end - x86_%1)
  1045                              <1>  global %1_src
  1045 000009C6 06                  <1>  %1_src db %2
  1045                              <1>  global %1_dest
  1045 000009C7 10                  <1>  %1_dest db %3
  1045                              <1>  global %1_off1
  1045 000009C8 FF                  <1>  %1_off1 db %4
  1045                              <1>  global %1_imm
  1045 000009C9 FF                  <1>  %1_imm db %5
  1045                              <1>  global %1_off3
  1045 000009CA FF                  <1>  %1_off3 db %6
  1046                                  
  1047                                  opfunc ADDI
  1047                              <1>  global x86_%1
  1047                              <1>  x86_%1:
  1048                                  GET_R rbp
  1048 000009CB 4C89E5              <1>  mov %1, GEN_REG
  1048 000009CE 4883C57F            <1>  add %1,byte 0x7F
  1049 000009D2 83450000                add dword [rbp],byte $00 ;4
  1050                                  opdesc ADDI,	0xff,6,0xff,10,0xff
  1050                              <1>  global x86_%1_end
  1050                              <1>  x86_%1_end:
  1050                              <1>  global %1_size
  1050 000009D6 0B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1050                              <1>  global %1_src
  1050 000009D8 FF                  <1>  %1_src db %2
  1050                              <1>  global %1_dest
  1050 000009D9 06                  <1>  %1_dest db %3
  1050                              <1>  global %1_off1
  1050 000009DA FF                  <1>  %1_off1 db %4
  1050                              <1>  global %1_imm
  1050 000009DB 0A                  <1>  %1_imm db %5
  1050                              <1>  global %1_off3
  1050 000009DC FF                  <1>  %1_off3 db %6
  1051                                  
  1052                                  opfunc AND_B
  1052                              <1>  global x86_%1
  1052                              <1>  x86_%1:
  1053                                  GET_R0 rbp
  1053 000009DD 4C89E5              <1>  mov %1, GEN_REG
  1054                                  GET_GBR ebx
  1054 000009E0 418B5D04            <1>  mov %1, dword [CTRL_REG+4]
  1055 000009E4 035D00                  add  ebx, dword [rbp]
  1056 000009E7 89DF                    mov edi, ebx
  1057                                  CALL_GETMEM_BYTE
  1057                              <1>  CALL_FUNC 0
  1057 000009E9 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1057 000009ED 41FFD0              <2>  call r8
  1058 000009F0 247F                    and al, $7F     ;2
  1059 000009F2 89DF                    mov edi, ebx
  1060 000009F4 89C6                    mov esi, eax
  1061                                  CALL_SETMEM_BYTE
  1061                              <1>  CALL_FUNC 3
  1061 000009F6 4D8B4634            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1061 000009FA 41FFD0              <2>  call r8
  1062                                  opdesc AND_B,	0xff,0xff,0xff,20,0xff
  1062                              <1>  global x86_%1_end
  1062                              <1>  x86_%1_end:
  1062                              <1>  global %1_size
  1062 000009FD 2000                <1>  %1_size dw (x86_%1_end - x86_%1)
  1062                              <1>  global %1_src
  1062 000009FF FF                  <1>  %1_src db %2
  1062                              <1>  global %1_dest
  1062 00000A00 FF                  <1>  %1_dest db %3
  1062                              <1>  global %1_off1
  1062 00000A01 FF                  <1>  %1_off1 db %4
  1062                              <1>  global %1_imm
  1062 00000A02 14                  <1>  %1_imm db %5
  1062                              <1>  global %1_off3
  1062 00000A03 FF                  <1>  %1_off3 db %6
  1063                                  
  1064                                  opfunc OR_B
  1064                              <1>  global x86_%1
  1064                              <1>  x86_%1:
  1065                                  GET_R0 rbp
  1065 00000A04 4C89E5              <1>  mov %1, GEN_REG
  1066                                  GET_GBR ebx
  1066 00000A07 418B5D04            <1>  mov %1, dword [CTRL_REG+4]
  1067 00000A0B 035D00                  add  ebx, dword [rbp]
  1068 00000A0E 89DF                    mov edi, ebx
  1069                                  CALL_GETMEM_BYTE
  1069                              <1>  CALL_FUNC 0
  1069 00000A10 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1069 00000A14 41FFD0              <2>  call r8
  1070 00000A17 0C00                    or al, $00      ;2
  1071 00000A19 89DF                    mov edi, ebx
  1072 00000A1B 89C6                    mov esi, eax
  1073                                  CALL_SETMEM_BYTE
  1073                              <1>  CALL_FUNC 3
  1073 00000A1D 4D8B4634            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1073 00000A21 41FFD0              <2>  call r8
  1074                                  opdesc OR_B,	0xff,0xff,0xff,20,0xff
  1074                              <1>  global x86_%1_end
  1074                              <1>  x86_%1_end:
  1074                              <1>  global %1_size
  1074 00000A24 2000                <1>  %1_size dw (x86_%1_end - x86_%1)
  1074                              <1>  global %1_src
  1074 00000A26 FF                  <1>  %1_src db %2
  1074                              <1>  global %1_dest
  1074 00000A27 FF                  <1>  %1_dest db %3
  1074                              <1>  global %1_off1
  1074 00000A28 FF                  <1>  %1_off1 db %4
  1074                              <1>  global %1_imm
  1074 00000A29 14                  <1>  %1_imm db %5
  1074                              <1>  global %1_off3
  1074 00000A2A FF                  <1>  %1_off3 db %6
  1075                                  
  1076                                  opfunc XOR_B
  1076                              <1>  global x86_%1
  1076                              <1>  x86_%1:
  1077                                  GET_R0 rbp
  1077 00000A2B 4C89E5              <1>  mov %1, GEN_REG
  1078                                  GET_GBR ebx
  1078 00000A2E 418B5D04            <1>  mov %1, dword [CTRL_REG+4]
  1079 00000A32 035D00                  add  ebx, dword [rbp]
  1080 00000A35 89DF                    mov edi, ebx
  1081                                  CALL_GETMEM_BYTE
  1081                              <1>  CALL_FUNC 0
  1081 00000A37 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1081 00000A3B 41FFD0              <2>  call r8
  1082 00000A3E 34FF                    xor al, 0xFF      ;2
  1083 00000A40 89DF                    mov edi, ebx
  1084 00000A42 89C6                    mov esi, eax
  1085                                  CALL_SETMEM_BYTE
  1085                              <1>  CALL_FUNC 3
  1085 00000A44 4D8B4634            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1085 00000A48 41FFD0              <2>  call r8
  1086                                  opdesc XOR_B,	0xff,0xff,0xff,20,0xff
  1086                              <1>  global x86_%1_end
  1086                              <1>  x86_%1_end:
  1086                              <1>  global %1_size
  1086 00000A4B 2000                <1>  %1_size dw (x86_%1_end - x86_%1)
  1086                              <1>  global %1_src
  1086 00000A4D FF                  <1>  %1_src db %2
  1086                              <1>  global %1_dest
  1086 00000A4E FF                  <1>  %1_dest db %3
  1086                              <1>  global %1_off1
  1086 00000A4F FF                  <1>  %1_off1 db %4
  1086                              <1>  global %1_imm
  1086 00000A50 14                  <1>  %1_imm db %5
  1086                              <1>  global %1_off3
  1086 00000A51 FF                  <1>  %1_off3 db %6
  1087                                  
  1088                                  opfunc TST_B
  1088                              <1>  global x86_%1
  1088                              <1>  x86_%1:
  1089                                  GET_R0 rbp
  1089 00000A52 4C89E5              <1>  mov %1, GEN_REG
  1090                                  CLEAR_T
  1090 00000A55 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
  1091                                  GET_GBR ebx
  1091 00000A5D 418B5D04            <1>  mov %1, dword [CTRL_REG+4]
  1092 00000A61 035D00                  add  ebx, dword [rbp]
  1093 00000A64 89DF                    mov edi, ebx
  1094                                  CALL_GETMEM_BYTE
  1094                              <1>  CALL_FUNC 0
  1094 00000A66 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1094 00000A6A 41FFD0              <2>  call r8
  1095 00000A6D A800                    test al, $00
  1096 00000A6F 7505                    jne .continue         ;2
  1097                                  SET_T
  1097 00000A71 41834D0001          <1>  or dword [CTRL_REG], 0x1
  1098                                  .continue:
  1099                                  opdesc TST_B,	0xff,0xff,0xff,28,0xff
  1099                              <1>  global x86_%1_end
  1099                              <1>  x86_%1_end:
  1099                              <1>  global %1_size
  1099 00000A76 2400                <1>  %1_size dw (x86_%1_end - x86_%1)
  1099                              <1>  global %1_src
  1099 00000A78 FF                  <1>  %1_src db %2
  1099                              <1>  global %1_dest
  1099 00000A79 FF                  <1>  %1_dest db %3
  1099                              <1>  global %1_off1
  1099 00000A7A FF                  <1>  %1_off1 db %4
  1099                              <1>  global %1_imm
  1099 00000A7B 1C                  <1>  %1_imm db %5
  1099                              <1>  global %1_off3
  1099 00000A7C FF                  <1>  %1_off3 db %6
  1100                                  
  1101                                  ;Jump Opcodes
  1102                                  ;------------
  1103                                  
  1104                                  opfunc JMP
  1104                              <1>  global x86_%1
  1104                              <1>  x86_%1:
  1105                                  GET_R rbp
  1105 00000A7D 4C89E5              <1>  mov %1, GEN_REG
  1105 00000A80 4883C57F            <1>  add %1,byte 0x7F
  1106 00000A84 8B4500                  mov eax,dword [rbp]       ;2
  1107 00000A87 890424                  mov dword [rsp],eax       ;3
  1108                                  opdesc JMP,		0xff,6,0xff,0xff,0xff
  1108                              <1>  global x86_%1_end
  1108                              <1>  x86_%1_end:
  1108                              <1>  global %1_size
  1108 00000A8A 0D00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1108                              <1>  global %1_src
  1108 00000A8C FF                  <1>  %1_src db %2
  1108                              <1>  global %1_dest
  1108 00000A8D 06                  <1>  %1_dest db %3
  1108                              <1>  global %1_off1
  1108 00000A8E FF                  <1>  %1_off1 db %4
  1108                              <1>  global %1_imm
  1108 00000A8F FF                  <1>  %1_imm db %5
  1108                              <1>  global %1_off3
  1108 00000A90 FF                  <1>  %1_off3 db %6
  1109                                  
  1110                                  opfunc JSR
  1110                              <1>  global x86_%1
  1110                              <1>  x86_%1:
  1111 00000A91 418B07                  mov eax, dword [PC]       ;2
  1112 00000A94 83C004                  add eax,byte 4      ;3
  1113                                  SET_PR eax
  1113 00000A97 41894608            <1>  mov dword [SYS_REG+8], %1
  1114                                  GET_R rbp
  1114 00000A9B 4C89E5              <1>  mov %1, GEN_REG
  1114 00000A9E 4883C57F            <1>  add %1,byte 0x7F
  1115 00000AA2 8B4500                  mov eax,dword [rbp]       ;3
  1116 00000AA5 890424                  mov dword [rsp],eax       ;3
  1117                                  opdesc JSR,		0xff,16,0xff,0xff,0xff
  1117                              <1>  global x86_%1_end
  1117                              <1>  x86_%1_end:
  1117                              <1>  global %1_size
  1117 00000AA8 1700                <1>  %1_size dw (x86_%1_end - x86_%1)
  1117                              <1>  global %1_src
  1117 00000AAA FF                  <1>  %1_src db %2
  1117                              <1>  global %1_dest
  1117 00000AAB 10                  <1>  %1_dest db %3
  1117                              <1>  global %1_off1
  1117 00000AAC FF                  <1>  %1_off1 db %4
  1117                              <1>  global %1_imm
  1117 00000AAD FF                  <1>  %1_imm db %5
  1117                              <1>  global %1_off3
  1117 00000AAE FF                  <1>  %1_off3 db %6
  1118                                  
  1119                                  opfunc BRA
  1119                              <1>  global x86_%1
  1119                              <1>  x86_%1:
  1120 00000AAF 66B8BF0A                mov ax, 0x0ABF     ;3
  1121 00000AB3 660FBAE00B              bt ax, 11        ;4
  1122 00000AB8 7304                    jnc .continue       ;2
  1123 00000ABA 660D00F0                or ax,0xf000   ;5
  1124                                  .continue:
  1125 00000ABE 98                      cwde
  1126 00000ABF D1E0                    shl eax, 1
  1127 00000AC1 83C004                  add eax,byte 4      ;3
  1128 00000AC4 410307                  add eax,dword [PC] ;2
  1129 00000AC7 890424                  mov dword [rsp], eax       ;3
  1130                                  opdesc BRA,		0xff,0xff,0xff,0xff,2
  1130                              <1>  global x86_%1_end
  1130                              <1>  x86_%1_end:
  1130                              <1>  global %1_size
  1130 00000ACA 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1130                              <1>  global %1_src
  1130 00000ACC FF                  <1>  %1_src db %2
  1130                              <1>  global %1_dest
  1130 00000ACD FF                  <1>  %1_dest db %3
  1130                              <1>  global %1_off1
  1130 00000ACE FF                  <1>  %1_off1 db %4
  1130                              <1>  global %1_imm
  1130 00000ACF FF                  <1>  %1_imm db %5
  1130                              <1>  global %1_off3
  1130 00000AD0 02                  <1>  %1_off3 db %6
  1131                                  
  1132                                  opfunc BSR
  1132                              <1>  global x86_%1
  1132                              <1>  x86_%1:
  1133 00000AD1 418B07                  mov eax,dword [PC]       ;2
  1134 00000AD4 83C004                  add eax,byte 4      ;3
  1135                                  SET_PR eax
  1135 00000AD7 41894608            <1>  mov dword [SYS_REG+8], %1
  1136 00000ADB 31DB                    xor ebx, ebx
  1137 00000ADD 6681CBBE0A              or bx,word 0x0ABE   ;3
  1138 00000AE2 0FBAE30B                bt ebx, 11        ;4
  1139 00000AE6 7306                    jnc .continue       ;2
  1140 00000AE8 81CB00F0FFFF            or ebx,0xfffff000   ;5
  1141                                  .continue:
  1142 00000AEE C1E301                  shl ebx,byte 1      ;3
  1143 00000AF1 01C3                    add ebx,eax ;2
  1144 00000AF3 891C24                  mov dword [rsp],ebx       ;3
  1145                                  opdesc BSR,		0xff,0xff,0xff,0xff,15
  1145                              <1>  global x86_%1_end
  1145                              <1>  x86_%1_end:
  1145                              <1>  global %1_size
  1145 00000AF6 2500                <1>  %1_size dw (x86_%1_end - x86_%1)
  1145                              <1>  global %1_src
  1145 00000AF8 FF                  <1>  %1_src db %2
  1145                              <1>  global %1_dest
  1145 00000AF9 FF                  <1>  %1_dest db %3
  1145                              <1>  global %1_off1
  1145 00000AFA FF                  <1>  %1_off1 db %4
  1145                              <1>  global %1_imm
  1145 00000AFB FF                  <1>  %1_imm db %5
  1145                              <1>  global %1_off3
  1145 00000AFC 0F                  <1>  %1_off3 db %6
  1146                                  
  1147                                  opfunc BSRF
  1147                              <1>  global x86_%1
  1147                              <1>  x86_%1:
  1148                                  GET_R rbp
  1148 00000AFD 4C89E5              <1>  mov %1, GEN_REG
  1148 00000B00 4883C57F            <1>  add %1,byte 0x7F
  1149 00000B04 418B07                  mov eax,dword [PC]       ;2
  1150 00000B07 83C004                  add eax,byte 4      ;3
  1151                                  SET_PR eax
  1151 00000B0A 41894608            <1>  mov dword [SYS_REG+8], %1
  1152 00000B0E 418B07                  mov eax,[PC]       ;3
  1153 00000B11 034500                  add eax,dword [rbp] ;3
  1154 00000B14 83C004                  add eax,byte 4      ;3
  1155 00000B17 890424                  mov dword [rsp],eax       ;3
  1156                                  opdesc BSRF,		0xff,6,0xff,0xff,0xff
  1156                              <1>  global x86_%1_end
  1156                              <1>  x86_%1_end:
  1156                              <1>  global %1_size
  1156 00000B1A 1D00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1156                              <1>  global %1_src
  1156 00000B1C FF                  <1>  %1_src db %2
  1156                              <1>  global %1_dest
  1156 00000B1D 06                  <1>  %1_dest db %3
  1156                              <1>  global %1_off1
  1156 00000B1E FF                  <1>  %1_off1 db %4
  1156                              <1>  global %1_imm
  1156 00000B1F FF                  <1>  %1_imm db %5
  1156                              <1>  global %1_off3
  1156 00000B20 FF                  <1>  %1_off3 db %6
  1157                                  
  1158                                  opfunc BRAF
  1158                              <1>  global x86_%1
  1158                              <1>  x86_%1:
  1159                                  GET_R rbp
  1159 00000B21 4C89E5              <1>  mov %1, GEN_REG
  1159 00000B24 4883C57F            <1>  add %1,byte 0x7F
  1160 00000B28 418B07                  mov eax,dword [PC]       ;2
  1161 00000B2B 034500                  add eax,dword [rbp] ;3
  1162 00000B2E 83C004                  add eax,byte 4      ;4
  1163 00000B31 890424                  mov dword [rsp],eax       ;3
  1164                                  opdesc BRAF,		0xff,6,0xff,0xff,0xff
  1164                              <1>  global x86_%1_end
  1164                              <1>  x86_%1_end:
  1164                              <1>  global %1_size
  1164 00000B34 1300                <1>  %1_size dw (x86_%1_end - x86_%1)
  1164                              <1>  global %1_src
  1164 00000B36 FF                  <1>  %1_src db %2
  1164                              <1>  global %1_dest
  1164 00000B37 06                  <1>  %1_dest db %3
  1164                              <1>  global %1_off1
  1164 00000B38 FF                  <1>  %1_off1 db %4
  1164                              <1>  global %1_imm
  1164 00000B39 FF                  <1>  %1_imm db %5
  1164                              <1>  global %1_off3
  1164 00000B3A FF                  <1>  %1_off3 db %6
  1165                                  
  1166                                  
  1167                                  opfunc RTS
  1167                              <1>  global x86_%1
  1167                              <1>  x86_%1:
  1168                                  GET_PR eax     ;3
  1168 00000B3B 418B4608            <1>  mov %1, dword [SYS_REG+8]
  1169 00000B3F 890424                  mov dword [rsp],eax       ;3
  1170                                  opdesc RTS,			0xFF,0xFF,0xFF,0xFF,0xFF
  1170                              <1>  global x86_%1_end
  1170                              <1>  x86_%1_end:
  1170                              <1>  global %1_size
  1170 00000B42 0700                <1>  %1_size dw (x86_%1_end - x86_%1)
  1170                              <1>  global %1_src
  1170 00000B44 FF                  <1>  %1_src db %2
  1170                              <1>  global %1_dest
  1170 00000B45 FF                  <1>  %1_dest db %3
  1170                              <1>  global %1_off1
  1170 00000B46 FF                  <1>  %1_off1 db %4
  1170                              <1>  global %1_imm
  1170 00000B47 FF                  <1>  %1_imm db %5
  1170                              <1>  global %1_off3
  1170 00000B48 FF                  <1>  %1_off3 db %6
  1171                                  
  1172                                  opfunc RTE
  1172                              <1>  global x86_%1
  1172                              <1>  x86_%1:
  1173                                  GET_R_ID 15,rbp
  1173 00000B49 BD0F000000          <1>  mov %2, %1
  1173 00000B4E 48C1E502            <1>  shl %2, byte 2
  1173 00000B52 4C01E5              <1>  add %2, GEN_REG
  1174 00000B55 8B7D00                  mov edi, dword [rbp]        ;3
  1175                                  CALL_GETMEM_LONG
  1175                              <1>  CALL_FUNC 2
  1175 00000B58 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1175 00000B5C 41FFD0              <2>  call r8
  1176 00000B5F 890424                  mov dword [rsp], eax
  1177 00000B62 83450004                add dword [rbp], byte 4
  1178 00000B66 8B7D00                  mov edi, dword [rbp]
  1179                                  CALL_GETMEM_LONG 
  1179                              <1>  CALL_FUNC 2
  1179 00000B69 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1179 00000B6D 41FFD0              <2>  call r8
  1180                                  SET_SR eax
  1180 00000B70 25F3030000          <1>  and %1, 0x3F3
  1180 00000B75 41894500            <1>  mov dword [CTRL_REG], %1
  1181 00000B79 83450004                add dword [rbp], byte 4
  1182                                  opdesc RTE,			0xFF,0xFF,0xFF,0xFF,0xFF
  1182                              <1>  global x86_%1_end
  1182                              <1>  x86_%1_end:
  1182                              <1>  global %1_size
  1182 00000B7D 3400                <1>  %1_size dw (x86_%1_end - x86_%1)
  1182                              <1>  global %1_src
  1182 00000B7F FF                  <1>  %1_src db %2
  1182                              <1>  global %1_dest
  1182 00000B80 FF                  <1>  %1_dest db %3
  1182                              <1>  global %1_off1
  1182 00000B81 FF                  <1>  %1_off1 db %4
  1182                              <1>  global %1_imm
  1182 00000B82 FF                  <1>  %1_imm db %5
  1182                              <1>  global %1_off3
  1182 00000B83 FF                  <1>  %1_off3 db %6
  1183                                  
  1184                                  opfunc TRAPA
  1184                              <1>  global x86_%1
  1184                              <1>  x86_%1:
  1185                                  GET_R_ID 15,rbp
  1185 00000B84 BD0F000000          <1>  mov %2, %1
  1185 00000B89 48C1E502            <1>  shl %2, byte 2
  1185 00000B8D 4C01E5              <1>  add %2, GEN_REG
  1186 00000B90 836D0004                sub  dword [rbp], byte 4    ;7
  1187 00000B94 8B7D00                  mov edi, dword [rbp]        ;3
  1188                                  GET_SR esi
  1188 00000B97 418B7500            <1>  mov %1, dword [CTRL_REG]
  1189                                  CALL_SETMEM_LONG
  1189                              <1>  CALL_FUNC 5
  1189 00000B9B 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1189 00000B9F 41FFD0              <2>  call r8
  1190 00000BA2 836D0004                sub  dword [rbp], byte 4    ;7
  1191 00000BA6 418B37                  mov  esi,dword [PC]        ;3 PC
  1192 00000BA9 83C602                  add  esi,byte 2       ;3
  1193 00000BAC 8B7D00                  mov edi, dword [rbp]        ;3
  1194                                  CALL_SETMEM_LONG
  1194                              <1>  CALL_FUNC 5
  1194 00000BAF 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1194 00000BB3 41FFD0              <2>  call r8
  1195 00000BB6 31C0                    xor  eax,eax          ;2
  1196                                  GET_BYTE_IMM al
  1196 00000BB8 0C7F                <1>  or %1, 0x7F
  1197 00000BBA C1E002                  shl  eax,2            ;3
  1198 00000BBD 41034508                add  eax, dword [CTRL_REG+8]      ;3 ADD VBR
  1199 00000BC1 89C7                    mov  edi,eax
  1200                                  CALL_GETMEM_LONG
  1200                              <1>  CALL_FUNC 2
  1200 00000BC3 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1200 00000BC7 41FFD0              <2>  call r8
  1201 00000BCA 890424                  mov  dword [rsp],eax        ;3
  1202                                  opdesc TRAPA,	      0xFF,0xFF,0xFF,53,0xFF
  1202                              <1>  global x86_%1_end
  1202                              <1>  x86_%1_end:
  1202                              <1>  global %1_size
  1202 00000BCD 4900                <1>  %1_size dw (x86_%1_end - x86_%1)
  1202                              <1>  global %1_src
  1202 00000BCF FF                  <1>  %1_src db %2
  1202                              <1>  global %1_dest
  1202 00000BD0 FF                  <1>  %1_dest db %3
  1202                              <1>  global %1_off1
  1202 00000BD1 FF                  <1>  %1_off1 db %4
  1202                              <1>  global %1_imm
  1202 00000BD2 35                  <1>  %1_imm db %5
  1202                              <1>  global %1_off3
  1202 00000BD3 FF                  <1>  %1_off3 db %6
  1203                                  
  1204                                  opfunc BT
  1204                              <1>  global x86_%1
  1204                              <1>  x86_%1:
  1205 00000BD4 31C0                    xor eax,eax     ;3
  1206                                  TEST_IS_T
  1206 00000BD6 410FBA650000        <1>  bt dword [CTRL_REG],0x0
  1207 00000BDC 730E                    jnc .continue        ;2
  1208                                  GET_BYTE_IMM al
  1208 00000BDE 0C7F                <1>  or %1, 0x7F
  1209 00000BE0 6698                    cbw
  1210 00000BE2 98                      cwde
  1211 00000BE3 C1E001                  shl eax,byte 1      ;3
  1212 00000BE6 83C002                  add eax,byte 2      ;3
  1213 00000BE9 410107                  add dword [PC], eax
  1214                                  .continue:
  1215                                  opdesc BT,		0xFF,0xFF,0xFF,11,0xFF
  1215                              <1>  global x86_%1_end
  1215                              <1>  x86_%1_end:
  1215                              <1>  global %1_size
  1215 00000BEC 1800                <1>  %1_size dw (x86_%1_end - x86_%1)
  1215                              <1>  global %1_src
  1215 00000BEE FF                  <1>  %1_src db %2
  1215                              <1>  global %1_dest
  1215 00000BEF FF                  <1>  %1_dest db %3
  1215                              <1>  global %1_off1
  1215 00000BF0 FF                  <1>  %1_off1 db %4
  1215                              <1>  global %1_imm
  1215 00000BF1 0B                  <1>  %1_imm db %5
  1215                              <1>  global %1_off3
  1215 00000BF2 FF                  <1>  %1_off3 db %6
  1216                                  
  1217                                  opfunc BT_S
  1217                              <1>  global x86_%1
  1217                              <1>  x86_%1:
  1218 00000BF3 31C0                    xor eax,eax     ;3
  1219                                  TEST_IS_T
  1219 00000BF5 410FBA650000        <1>  bt dword [CTRL_REG],0x0
  1220 00000BFB 7308                    jnc .continue        ;2
  1221                                  GET_BYTE_IMM al
  1221 00000BFD 0C7F                <1>  or %1, 0x7F
  1222 00000BFF 6698                    cbw
  1223 00000C01 98                      cwde
  1224 00000C02 C1E001                  shl eax, byte 1      ;3
  1225                                  .continue:
  1226 00000C05 83C004                  add eax, byte 4      ;3
  1227 00000C08 410307                  add eax, dword [PC] ;2
  1228 00000C0B 890424                  mov dword [rsp], eax
  1229                                  opdesc BT_S,		0xFF,0xFF,0xFF,11,0xFF
  1229                              <1>  global x86_%1_end
  1229                              <1>  x86_%1_end:
  1229                              <1>  global %1_size
  1229 00000C0E 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1229                              <1>  global %1_src
  1229 00000C10 FF                  <1>  %1_src db %2
  1229                              <1>  global %1_dest
  1229 00000C11 FF                  <1>  %1_dest db %3
  1229                              <1>  global %1_off1
  1229 00000C12 FF                  <1>  %1_off1 db %4
  1229                              <1>  global %1_imm
  1229 00000C13 0B                  <1>  %1_imm db %5
  1229                              <1>  global %1_off3
  1229 00000C14 FF                  <1>  %1_off3 db %6
  1230                                  
  1231                                  opfunc BF
  1231                              <1>  global x86_%1
  1231                              <1>  x86_%1:
  1232 00000C15 31C0                    xor eax,eax     ;3
  1233                                  TEST_IS_T
  1233 00000C17 410FBA650000        <1>  bt dword [CTRL_REG],0x0
  1234 00000C1D 720E                    jc .continue        ;2
  1235                                  GET_BYTE_IMM al
  1235 00000C1F 0C7F                <1>  or %1, 0x7F
  1236 00000C21 6698                    cbw
  1237 00000C23 98                      cwde
  1238 00000C24 C1E001                  shl eax, byte 1      ;3
  1239 00000C27 83C002                  add eax, byte 2      ;3
  1240 00000C2A 410107                  add dword [PC], eax ;2
  1241                                  .continue:
  1242                                  opdesc BF,		0xFF,0xFF,0xFF,11,0xFF
  1242                              <1>  global x86_%1_end
  1242                              <1>  x86_%1_end:
  1242                              <1>  global %1_size
  1242 00000C2D 1800                <1>  %1_size dw (x86_%1_end - x86_%1)
  1242                              <1>  global %1_src
  1242 00000C2F FF                  <1>  %1_src db %2
  1242                              <1>  global %1_dest
  1242 00000C30 FF                  <1>  %1_dest db %3
  1242                              <1>  global %1_off1
  1242 00000C31 FF                  <1>  %1_off1 db %4
  1242                              <1>  global %1_imm
  1242 00000C32 0B                  <1>  %1_imm db %5
  1242                              <1>  global %1_off3
  1242 00000C33 FF                  <1>  %1_off3 db %6
  1243                                  
  1244                                  opfunc BF_S
  1244                              <1>  global x86_%1
  1244                              <1>  x86_%1:
  1245 00000C34 31C0                    xor eax,eax     ;3
  1246                                  TEST_IS_T
  1246 00000C36 410FBA650000        <1>  bt dword [CTRL_REG],0x0
  1247 00000C3C 7208                    jc .continue        ;2
  1248                                  GET_BYTE_IMM al
  1248 00000C3E 0C7F                <1>  or %1, 0x7F
  1249 00000C40 6698                    cbw
  1250 00000C42 98                      cwde
  1251 00000C43 C1E001                  shl eax, byte 1      ;3
  1252                                  .continue:
  1253 00000C46 83C004                  add eax, byte 4      ;3
  1254 00000C49 410307                  add eax, dword [PC] ;2
  1255 00000C4C 890424                  mov dword [rsp], eax
  1256                                  opdesc BF_S,		0xFF,0xFF,0xFF,11,0xFF
  1256                              <1>  global x86_%1_end
  1256                              <1>  x86_%1_end:
  1256                              <1>  global %1_size
  1256 00000C4F 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1256                              <1>  global %1_src
  1256 00000C51 FF                  <1>  %1_src db %2
  1256                              <1>  global %1_dest
  1256 00000C52 FF                  <1>  %1_dest db %3
  1256                              <1>  global %1_off1
  1256 00000C53 FF                  <1>  %1_off1 db %4
  1256                              <1>  global %1_imm
  1256 00000C54 0B                  <1>  %1_imm db %5
  1256                              <1>  global %1_off3
  1256 00000C55 FF                  <1>  %1_off3 db %6
  1257                                  
  1258                                  ;Store/Load Opcodes
  1259                                  ;------------------
  1260                                  
  1261                                  opfunc STC_SR
  1261                              <1>  global x86_%1
  1261                              <1>  x86_%1:
  1262                                  GET_R rbp
  1262 00000C56 4C89E5              <1>  mov %1, GEN_REG
  1262 00000C59 4883C57F            <1>  add %1,byte 0x7F
  1263                                  GET_SR eax     ;2
  1263 00000C5D 418B4500            <1>  mov %1, dword [CTRL_REG]
  1264 00000C61 894500                  mov dword [rbp],eax     ;2
  1265                                  opdesc STC_SR,	0xFF,6,0xFF,0xFF,0xFF
  1265                              <1>  global x86_%1_end
  1265                              <1>  x86_%1_end:
  1265                              <1>  global %1_size
  1265 00000C64 0E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1265                              <1>  global %1_src
  1265 00000C66 FF                  <1>  %1_src db %2
  1265                              <1>  global %1_dest
  1265 00000C67 06                  <1>  %1_dest db %3
  1265                              <1>  global %1_off1
  1265 00000C68 FF                  <1>  %1_off1 db %4
  1265                              <1>  global %1_imm
  1265 00000C69 FF                  <1>  %1_imm db %5
  1265                              <1>  global %1_off3
  1265 00000C6A FF                  <1>  %1_off3 db %6
  1266                                  
  1267                                  opfunc STC_GBR
  1267                              <1>  global x86_%1
  1267                              <1>  x86_%1:
  1268                                  GET_R rbp
  1268 00000C6B 4C89E5              <1>  mov %1, GEN_REG
  1268 00000C6E 4883C57F            <1>  add %1,byte 0x7F
  1269                                  GET_GBR eax
  1269 00000C72 418B4504            <1>  mov %1, dword [CTRL_REG+4]
  1270 00000C76 894500                  mov dword [rbp],eax
  1271                                  opdesc STC_GBR,	0xFF,6,0xFF,0xFF,0xFF
  1271                              <1>  global x86_%1_end
  1271                              <1>  x86_%1_end:
  1271                              <1>  global %1_size
  1271 00000C79 0E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1271                              <1>  global %1_src
  1271 00000C7B FF                  <1>  %1_src db %2
  1271                              <1>  global %1_dest
  1271 00000C7C 06                  <1>  %1_dest db %3
  1271                              <1>  global %1_off1
  1271 00000C7D FF                  <1>  %1_off1 db %4
  1271                              <1>  global %1_imm
  1271 00000C7E FF                  <1>  %1_imm db %5
  1271                              <1>  global %1_off3
  1271 00000C7F FF                  <1>  %1_off3 db %6
  1272                                  
  1273                                  opfunc STC_VBR
  1273                              <1>  global x86_%1
  1273                              <1>  x86_%1:
  1274                                  GET_R rbp
  1274 00000C80 4C89E5              <1>  mov %1, GEN_REG
  1274 00000C83 4883C57F            <1>  add %1,byte 0x7F
  1275                                  GET_VBR eax
  1275 00000C87 418B4508            <1>  mov %1, dword [CTRL_REG+8]
  1276 00000C8B 894500                  mov dword [rbp],eax
  1277                                  opdesc STC_VBR,	0xFF,6,0xFF,0xFF,0xFF
  1277                              <1>  global x86_%1_end
  1277                              <1>  x86_%1_end:
  1277                              <1>  global %1_size
  1277 00000C8E 0E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1277                              <1>  global %1_src
  1277 00000C90 FF                  <1>  %1_src db %2
  1277                              <1>  global %1_dest
  1277 00000C91 06                  <1>  %1_dest db %3
  1277                              <1>  global %1_off1
  1277 00000C92 FF                  <1>  %1_off1 db %4
  1277                              <1>  global %1_imm
  1277 00000C93 FF                  <1>  %1_imm db %5
  1277                              <1>  global %1_off3
  1277 00000C94 FF                  <1>  %1_off3 db %6
  1278                                  
  1279                                  opfunc STS_MACH
  1279                              <1>  global x86_%1
  1279                              <1>  x86_%1:
  1280                                  GET_R rbp
  1280 00000C95 4C89E5              <1>  mov %1, GEN_REG
  1280 00000C98 4883C57F            <1>  add %1,byte 0x7F
  1281                                  GET_MACH eax     ;2
  1281 00000C9C 418B06              <1>  mov %1, dword [SYS_REG]
  1282 00000C9F 894500                  mov dword [rbp],eax     ;2
  1283                                  opdesc STS_MACH, 0xFF,6,0xFF,0xFF,0xFF
  1283                              <1>  global x86_%1_end
  1283                              <1>  x86_%1_end:
  1283                              <1>  global %1_size
  1283 00000CA2 0D00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1283                              <1>  global %1_src
  1283 00000CA4 FF                  <1>  %1_src db %2
  1283                              <1>  global %1_dest
  1283 00000CA5 06                  <1>  %1_dest db %3
  1283                              <1>  global %1_off1
  1283 00000CA6 FF                  <1>  %1_off1 db %4
  1283                              <1>  global %1_imm
  1283 00000CA7 FF                  <1>  %1_imm db %5
  1283                              <1>  global %1_off3
  1283 00000CA8 FF                  <1>  %1_off3 db %6
  1284                                  
  1285                                  opfunc STS_MACH_DEC
  1285                              <1>  global x86_%1
  1285                              <1>  x86_%1:
  1286                                  GET_R rbp
  1286 00000CA9 4C89E5              <1>  mov %1, GEN_REG
  1286 00000CAC 4883C57F            <1>  add %1,byte 0x7F
  1287 00000CB0 836D0004                sub dword [rbp],byte 4 ;3
  1288                                  GET_MACH esi 
  1288 00000CB4 418B36              <1>  mov %1, dword [SYS_REG]
  1289 00000CB7 8B7D00                  mov edi,dword [rbp]     ;2
  1290                                  CALL_SETMEM_LONG
  1290                              <1>  CALL_FUNC 5
  1290 00000CBA 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1290 00000CBE 41FFD0              <2>  call r8
  1291                                  opdesc STS_MACH_DEC,	0xFF,6,0xFF,0xFF,0xFF
  1291                              <1>  global x86_%1_end
  1291                              <1>  x86_%1_end:
  1291                              <1>  global %1_size
  1291 00000CC1 1800                <1>  %1_size dw (x86_%1_end - x86_%1)
  1291                              <1>  global %1_src
  1291 00000CC3 FF                  <1>  %1_src db %2
  1291                              <1>  global %1_dest
  1291 00000CC4 06                  <1>  %1_dest db %3
  1291                              <1>  global %1_off1
  1291 00000CC5 FF                  <1>  %1_off1 db %4
  1291                              <1>  global %1_imm
  1291 00000CC6 FF                  <1>  %1_imm db %5
  1291                              <1>  global %1_off3
  1291 00000CC7 FF                  <1>  %1_off3 db %6
  1292                                  
  1293                                  opfunc STS_MACL
  1293                              <1>  global x86_%1
  1293                              <1>  x86_%1:
  1294                                  GET_R rbp
  1294 00000CC8 4C89E5              <1>  mov %1, GEN_REG
  1294 00000CCB 4883C57F            <1>  add %1,byte 0x7F
  1295                                  GET_MACL eax     ;2
  1295 00000CCF 418B4604            <1>  mov %1, dword [SYS_REG+4]
  1296 00000CD3 894500                  mov dword [rbp],eax     ;2
  1297                                  opdesc STS_MACL, 0xFF,6,0xFF,0xFF,0xFF
  1297                              <1>  global x86_%1_end
  1297                              <1>  x86_%1_end:
  1297                              <1>  global %1_size
  1297 00000CD6 0E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1297                              <1>  global %1_src
  1297 00000CD8 FF                  <1>  %1_src db %2
  1297                              <1>  global %1_dest
  1297 00000CD9 06                  <1>  %1_dest db %3
  1297                              <1>  global %1_off1
  1297 00000CDA FF                  <1>  %1_off1 db %4
  1297                              <1>  global %1_imm
  1297 00000CDB FF                  <1>  %1_imm db %5
  1297                              <1>  global %1_off3
  1297 00000CDC FF                  <1>  %1_off3 db %6
  1298                                  
  1299                                  opfunc STS_MACL_DEC
  1299                              <1>  global x86_%1
  1299                              <1>  x86_%1:
  1300                                  GET_R rbp
  1300 00000CDD 4C89E5              <1>  mov %1, GEN_REG
  1300 00000CE0 4883C57F            <1>  add %1,byte 0x7F
  1301 00000CE4 836D0004                sub dword [rbp],byte 4 ;3
  1302                                  GET_MACL esi 
  1302 00000CE8 418B7604            <1>  mov %1, dword [SYS_REG+4]
  1303 00000CEC 8B7D00                  mov edi,dword [rbp]     ;2
  1304                                  CALL_SETMEM_LONG
  1304                              <1>  CALL_FUNC 5
  1304 00000CEF 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1304 00000CF3 41FFD0              <2>  call r8
  1305                                  opdesc STS_MACL_DEC,	0xFF,6,0xFF,0xFF,0xFF
  1305                              <1>  global x86_%1_end
  1305                              <1>  x86_%1_end:
  1305                              <1>  global %1_size
  1305 00000CF6 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
  1305                              <1>  global %1_src
  1305 00000CF8 FF                  <1>  %1_src db %2
  1305                              <1>  global %1_dest
  1305 00000CF9 06                  <1>  %1_dest db %3
  1305                              <1>  global %1_off1
  1305 00000CFA FF                  <1>  %1_off1 db %4
  1305                              <1>  global %1_imm
  1305 00000CFB FF                  <1>  %1_imm db %5
  1305                              <1>  global %1_off3
  1305 00000CFC FF                  <1>  %1_off3 db %6
  1306                                  
  1307                                  opfunc LDC_SR
  1307                              <1>  global x86_%1
  1307                              <1>  x86_%1:
  1308                                  GET_R rbp
  1308 00000CFD 4C89E5              <1>  mov %1, GEN_REG
  1308 00000D00 4883C57F            <1>  add %1,byte 0x7F
  1309 00000D04 8B4500                  mov eax,dword [rbp]       ;2
  1310                                  SET_SR eax
  1310 00000D07 25F3030000          <1>  and %1, 0x3F3
  1310 00000D0C 41894500            <1>  mov dword [CTRL_REG], %1
  1311                                  opdesc LDC_SR,	0xFF,6,0xFF,0xFF,0xFF
  1311                              <1>  global x86_%1_end
  1311                              <1>  x86_%1_end:
  1311                              <1>  global %1_size
  1311 00000D10 1300                <1>  %1_size dw (x86_%1_end - x86_%1)
  1311                              <1>  global %1_src
  1311 00000D12 FF                  <1>  %1_src db %2
  1311                              <1>  global %1_dest
  1311 00000D13 06                  <1>  %1_dest db %3
  1311                              <1>  global %1_off1
  1311 00000D14 FF                  <1>  %1_off1 db %4
  1311                              <1>  global %1_imm
  1311 00000D15 FF                  <1>  %1_imm db %5
  1311                              <1>  global %1_off3
  1311 00000D16 FF                  <1>  %1_off3 db %6
  1312                                  
  1313                                  opfunc LDC_SR_INC
  1313                              <1>  global x86_%1
  1313                              <1>  x86_%1:
  1314                                  GET_R rbp
  1314 00000D17 4C89E5              <1>  mov %1, GEN_REG
  1314 00000D1A 4883C57F            <1>  add %1,byte 0x7F
  1315 00000D1E 8B7D00                  mov edi,dword [rbp]       ;2
  1316                                  CALL_GETMEM_LONG
  1316                              <1>  CALL_FUNC 2
  1316 00000D21 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1316 00000D25 41FFD0              <2>  call r8
  1317                                  SET_SR eax ;3
  1317 00000D28 25F3030000          <1>  and %1, 0x3F3
  1317 00000D2D 41894500            <1>  mov dword [CTRL_REG], %1
  1318 00000D31 83450004                add dword [rbp],byte 4 ;3
  1319                                  opdesc LDC_SR_INC,	0xFF,6,0xFF,0xFF,0xFF
  1319                              <1>  global x86_%1_end
  1319                              <1>  x86_%1_end:
  1319                              <1>  global %1_size
  1319 00000D35 1E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1319                              <1>  global %1_src
  1319 00000D37 FF                  <1>  %1_src db %2
  1319                              <1>  global %1_dest
  1319 00000D38 06                  <1>  %1_dest db %3
  1319                              <1>  global %1_off1
  1319 00000D39 FF                  <1>  %1_off1 db %4
  1319                              <1>  global %1_imm
  1319 00000D3A FF                  <1>  %1_imm db %5
  1319                              <1>  global %1_off3
  1319 00000D3B FF                  <1>  %1_off3 db %6
  1320                                  
  1321                                  opfunc LDCGBR
  1321                              <1>  global x86_%1
  1321                              <1>  x86_%1:
  1322                                  GET_R rbp
  1322 00000D3C 4C89E5              <1>  mov %1, GEN_REG
  1322 00000D3F 4883C57F            <1>  add %1,byte 0x7F
  1323 00000D43 8B4500                  mov eax,dword [rbp]       ;3
  1324                                  SET_GBR eax
  1324 00000D46 41894504            <1>  mov dword [CTRL_REG+4], %1
  1325                                  opdesc LDCGBR,	0xff,6,0xFF,0xFF,0xFF
  1325                              <1>  global x86_%1_end
  1325                              <1>  x86_%1_end:
  1325                              <1>  global %1_size
  1325 00000D4A 0E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1325                              <1>  global %1_src
  1325 00000D4C FF                  <1>  %1_src db %2
  1325                              <1>  global %1_dest
  1325 00000D4D 06                  <1>  %1_dest db %3
  1325                              <1>  global %1_off1
  1325 00000D4E FF                  <1>  %1_off1 db %4
  1325                              <1>  global %1_imm
  1325 00000D4F FF                  <1>  %1_imm db %5
  1325                              <1>  global %1_off3
  1325 00000D50 FF                  <1>  %1_off3 db %6
  1326                                  
  1327                                  opfunc LDC_GBR_INC
  1327                              <1>  global x86_%1
  1327                              <1>  x86_%1:
  1328                                  GET_R rbp
  1328 00000D51 4C89E5              <1>  mov %1, GEN_REG
  1328 00000D54 4883C57F            <1>  add %1,byte 0x7F
  1329 00000D58 8B7D00                  mov edi,dword [rbp]       ;2
  1330                                  CALL_GETMEM_LONG
  1330                              <1>  CALL_FUNC 2
  1330 00000D5B 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1330 00000D5F 41FFD0              <2>  call r8
  1331                                  SET_GBR eax ;3
  1331 00000D62 41894504            <1>  mov dword [CTRL_REG+4], %1
  1332 00000D66 83450004                add dword [rbp],byte 4 ;3
  1333                                  opdesc LDC_GBR_INC,	0xFF,6,0xFF,0xFF,0xFF
  1333                              <1>  global x86_%1_end
  1333                              <1>  x86_%1_end:
  1333                              <1>  global %1_size
  1333 00000D6A 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
  1333                              <1>  global %1_src
  1333 00000D6C FF                  <1>  %1_src db %2
  1333                              <1>  global %1_dest
  1333 00000D6D 06                  <1>  %1_dest db %3
  1333                              <1>  global %1_off1
  1333 00000D6E FF                  <1>  %1_off1 db %4
  1333                              <1>  global %1_imm
  1333 00000D6F FF                  <1>  %1_imm db %5
  1333                              <1>  global %1_off3
  1333 00000D70 FF                  <1>  %1_off3 db %6
  1334                                  
  1335                                  opfunc LDC_VBR
  1335                              <1>  global x86_%1
  1335                              <1>  x86_%1:
  1336                                  GET_R rbp
  1336 00000D71 4C89E5              <1>  mov %1, GEN_REG
  1336 00000D74 4883C57F            <1>  add %1,byte 0x7F
  1337 00000D78 8B4500                  mov eax,dword [rbp]       ;2
  1338                                  SET_VBR eax
  1338 00000D7B 41894508            <1>  mov dword [CTRL_REG+8], %1
  1339                                  opdesc LDC_VBR,	0xFF,6,0xFF,0xFF,0xFF
  1339                              <1>  global x86_%1_end
  1339                              <1>  x86_%1_end:
  1339                              <1>  global %1_size
  1339 00000D7F 0E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1339                              <1>  global %1_src
  1339 00000D81 FF                  <1>  %1_src db %2
  1339                              <1>  global %1_dest
  1339 00000D82 06                  <1>  %1_dest db %3
  1339                              <1>  global %1_off1
  1339 00000D83 FF                  <1>  %1_off1 db %4
  1339                              <1>  global %1_imm
  1339 00000D84 FF                  <1>  %1_imm db %5
  1339                              <1>  global %1_off3
  1339 00000D85 FF                  <1>  %1_off3 db %6
  1340                                  
  1341                                  opfunc LDC_VBR_INC
  1341                              <1>  global x86_%1
  1341                              <1>  x86_%1:
  1342                                  GET_R rbp
  1342 00000D86 4C89E5              <1>  mov %1, GEN_REG
  1342 00000D89 4883C57F            <1>  add %1,byte 0x7F
  1343 00000D8D 8B7D00                  mov edi,dword [rbp]       ;2
  1344                                  CALL_GETMEM_LONG
  1344                              <1>  CALL_FUNC 2
  1344 00000D90 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1344 00000D94 41FFD0              <2>  call r8
  1345                                  SET_VBR eax ;3
  1345 00000D97 41894508            <1>  mov dword [CTRL_REG+8], %1
  1346 00000D9B 83450004                add dword [rbp],byte 4 ;3
  1347                                  opdesc LDC_VBR_INC,	0xFF,6,0xFF,0xFF,0xFF
  1347                              <1>  global x86_%1_end
  1347                              <1>  x86_%1_end:
  1347                              <1>  global %1_size
  1347 00000D9F 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
  1347                              <1>  global %1_src
  1347 00000DA1 FF                  <1>  %1_src db %2
  1347                              <1>  global %1_dest
  1347 00000DA2 06                  <1>  %1_dest db %3
  1347                              <1>  global %1_off1
  1347 00000DA3 FF                  <1>  %1_off1 db %4
  1347                              <1>  global %1_imm
  1347 00000DA4 FF                  <1>  %1_imm db %5
  1347                              <1>  global %1_off3
  1347 00000DA5 FF                  <1>  %1_off3 db %6
  1348                                  
  1349                                  opfunc STS_PR
  1349                              <1>  global x86_%1
  1349                              <1>  x86_%1:
  1350                                  GET_R rbp
  1350 00000DA6 4C89E5              <1>  mov %1, GEN_REG
  1350 00000DA9 4883C57F            <1>  add %1,byte 0x7F
  1351                                  GET_PR eax     ;2
  1351 00000DAD 418B4608            <1>  mov %1, dword [SYS_REG+8]
  1352 00000DB1 894500                  mov dword [rbp],eax     ;2
  1353                                  opdesc STS_PR,		0xFF,6,0xFF,0xFF,0xFF
  1353                              <1>  global x86_%1_end
  1353                              <1>  x86_%1_end:
  1353                              <1>  global %1_size
  1353 00000DB4 0E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1353                              <1>  global %1_src
  1353 00000DB6 FF                  <1>  %1_src db %2
  1353                              <1>  global %1_dest
  1353 00000DB7 06                  <1>  %1_dest db %3
  1353                              <1>  global %1_off1
  1353 00000DB8 FF                  <1>  %1_off1 db %4
  1353                              <1>  global %1_imm
  1353 00000DB9 FF                  <1>  %1_imm db %5
  1353                              <1>  global %1_off3
  1353 00000DBA FF                  <1>  %1_off3 db %6
  1354                                  
  1355                                  opfunc STSMPR
  1355                              <1>  global x86_%1
  1355                              <1>  x86_%1:
  1356                                  GET_R rbp
  1356 00000DBB 4C89E5              <1>  mov %1, GEN_REG
  1356 00000DBE 4883C57F            <1>  add %1,byte 0x7F
  1357 00000DC2 836D0004                sub  dword [rbp],byte 4 ;4
  1358 00000DC6 8B7D00                  mov edi, dword[rbp]
  1359                                  GET_PR esi
  1359 00000DC9 418B7608            <1>  mov %1, dword [SYS_REG+8]
  1360                                  CALL_SETMEM_LONG
  1360                              <1>  CALL_FUNC 5
  1360 00000DCD 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1360 00000DD1 41FFD0              <2>  call r8
  1361                                  opdesc STSMPR,	0xFF,6,0xFF,0xFF,0xFF
  1361                              <1>  global x86_%1_end
  1361                              <1>  x86_%1_end:
  1361                              <1>  global %1_size
  1361 00000DD4 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
  1361                              <1>  global %1_src
  1361 00000DD6 FF                  <1>  %1_src db %2
  1361                              <1>  global %1_dest
  1361 00000DD7 06                  <1>  %1_dest db %3
  1361                              <1>  global %1_off1
  1361 00000DD8 FF                  <1>  %1_off1 db %4
  1361                              <1>  global %1_imm
  1361 00000DD9 FF                  <1>  %1_imm db %5
  1361                              <1>  global %1_off3
  1361 00000DDA FF                  <1>  %1_off3 db %6
  1362                                  
  1363                                  opfunc LDS_PR
  1363                              <1>  global x86_%1
  1363                              <1>  x86_%1:
  1364                                  GET_R rbp
  1364 00000DDB 4C89E5              <1>  mov %1, GEN_REG
  1364 00000DDE 4883C57F            <1>  add %1,byte 0x7F
  1365 00000DE2 8B4500                  mov eax,dword [rbp]       ;2
  1366                                  SET_PR eax
  1366 00000DE5 41894608            <1>  mov dword [SYS_REG+8], %1
  1367                                  opdesc LDS_PR,		0xFF,6,0xFF,0xFF,0xFF
  1367                              <1>  global x86_%1_end
  1367                              <1>  x86_%1_end:
  1367                              <1>  global %1_size
  1367 00000DE9 0E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1367                              <1>  global %1_src
  1367 00000DEB FF                  <1>  %1_src db %2
  1367                              <1>  global %1_dest
  1367 00000DEC 06                  <1>  %1_dest db %3
  1367                              <1>  global %1_off1
  1367 00000DED FF                  <1>  %1_off1 db %4
  1367                              <1>  global %1_imm
  1367 00000DEE FF                  <1>  %1_imm db %5
  1367                              <1>  global %1_off3
  1367 00000DEF FF                  <1>  %1_off3 db %6
  1368                                  
  1369                                  opfunc LDS_PR_INC
  1369                              <1>  global x86_%1
  1369                              <1>  x86_%1:
  1370                                  GET_R rbp
  1370 00000DF0 4C89E5              <1>  mov %1, GEN_REG
  1370 00000DF3 4883C57F            <1>  add %1,byte 0x7F
  1371 00000DF7 8B7D00                  mov edi,dword [rbp]       ;3
  1372                                  CALL_GETMEM_LONG
  1372                              <1>  CALL_FUNC 2
  1372 00000DFA 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1372 00000DFE 41FFD0              <2>  call r8
  1373                                  SET_PR eax
  1373 00000E01 41894608            <1>  mov dword [SYS_REG+8], %1
  1374 00000E05 83450004                add dword [rbp],byte 4 ;4
  1375                                  opdesc LDS_PR_INC,	0xFF,6,0xFF,0xFF,0xFF
  1375                              <1>  global x86_%1_end
  1375                              <1>  x86_%1_end:
  1375                              <1>  global %1_size
  1375 00000E09 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
  1375                              <1>  global %1_src
  1375 00000E0B FF                  <1>  %1_src db %2
  1375                              <1>  global %1_dest
  1375 00000E0C 06                  <1>  %1_dest db %3
  1375                              <1>  global %1_off1
  1375 00000E0D FF                  <1>  %1_off1 db %4
  1375                              <1>  global %1_imm
  1375 00000E0E FF                  <1>  %1_imm db %5
  1375                              <1>  global %1_off3
  1375 00000E0F FF                  <1>  %1_off3 db %6
  1376                                  
  1377                                  opfunc LDS_MACH
  1377                              <1>  global x86_%1
  1377                              <1>  x86_%1:
  1378                                  GET_R rbp
  1378 00000E10 4C89E5              <1>  mov %1, GEN_REG
  1378 00000E13 4883C57F            <1>  add %1,byte 0x7F
  1379 00000E17 8B4500                  mov eax,dword [rbp]       ;2
  1380                                  SET_MACH eax
  1380 00000E1A 418906              <1>  mov dword [SYS_REG], %1
  1381                                  opdesc LDS_MACH,		0xFF,6,0xFF,0xFF,0xFF
  1381                              <1>  global x86_%1_end
  1381                              <1>  x86_%1_end:
  1381                              <1>  global %1_size
  1381 00000E1D 0D00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1381                              <1>  global %1_src
  1381 00000E1F FF                  <1>  %1_src db %2
  1381                              <1>  global %1_dest
  1381 00000E20 06                  <1>  %1_dest db %3
  1381                              <1>  global %1_off1
  1381 00000E21 FF                  <1>  %1_off1 db %4
  1381                              <1>  global %1_imm
  1381 00000E22 FF                  <1>  %1_imm db %5
  1381                              <1>  global %1_off3
  1381 00000E23 FF                  <1>  %1_off3 db %6
  1382                                  
  1383                                  opfunc LDS_MACH_INC
  1383                              <1>  global x86_%1
  1383                              <1>  x86_%1:
  1384                                  GET_R rbp
  1384 00000E24 4C89E5              <1>  mov %1, GEN_REG
  1384 00000E27 4883C57F            <1>  add %1,byte 0x7F
  1385 00000E2B 8B7D00                  mov edi,dword [rbp]          ;2
  1386                                  CALL_GETMEM_LONG
  1386                              <1>  CALL_FUNC 2
  1386 00000E2E 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1386 00000E32 41FFD0              <2>  call r8
  1387                                  SET_MACH eax        ;2
  1387 00000E35 418906              <1>  mov dword [SYS_REG], %1
  1388 00000E38 83450004                add dword [rbp],byte 4 ;3
  1389                                  opdesc LDS_MACH_INC,	0xFF,6,0xFF,0xFF,0xFF
  1389                              <1>  global x86_%1_end
  1389                              <1>  x86_%1_end:
  1389                              <1>  global %1_size
  1389 00000E3C 1800                <1>  %1_size dw (x86_%1_end - x86_%1)
  1389                              <1>  global %1_src
  1389 00000E3E FF                  <1>  %1_src db %2
  1389                              <1>  global %1_dest
  1389 00000E3F 06                  <1>  %1_dest db %3
  1389                              <1>  global %1_off1
  1389 00000E40 FF                  <1>  %1_off1 db %4
  1389                              <1>  global %1_imm
  1389 00000E41 FF                  <1>  %1_imm db %5
  1389                              <1>  global %1_off3
  1389 00000E42 FF                  <1>  %1_off3 db %6
  1390                                  
  1391                                  opfunc LDS_MACL
  1391                              <1>  global x86_%1
  1391                              <1>  x86_%1:
  1392                                  GET_R rbp
  1392 00000E43 4C89E5              <1>  mov %1, GEN_REG
  1392 00000E46 4883C57F            <1>  add %1,byte 0x7F
  1393 00000E4A 8B4500                  mov eax,dword [rbp]       ;2
  1394                                  SET_MACL eax
  1394 00000E4D 41894604            <1>  mov dword [SYS_REG+4], %1
  1395                                  opdesc LDS_MACL,		0xFF,6,0xFF,0xFF,0xFF
  1395                              <1>  global x86_%1_end
  1395                              <1>  x86_%1_end:
  1395                              <1>  global %1_size
  1395 00000E51 0E00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1395                              <1>  global %1_src
  1395 00000E53 FF                  <1>  %1_src db %2
  1395                              <1>  global %1_dest
  1395 00000E54 06                  <1>  %1_dest db %3
  1395                              <1>  global %1_off1
  1395 00000E55 FF                  <1>  %1_off1 db %4
  1395                              <1>  global %1_imm
  1395 00000E56 FF                  <1>  %1_imm db %5
  1395                              <1>  global %1_off3
  1395 00000E57 FF                  <1>  %1_off3 db %6
  1396                                  
  1397                                  
  1398                                  opfunc LDS_MACL_INC
  1398                              <1>  global x86_%1
  1398                              <1>  x86_%1:
  1399                                  GET_R rbp
  1399 00000E58 4C89E5              <1>  mov %1, GEN_REG
  1399 00000E5B 4883C57F            <1>  add %1,byte 0x7F
  1400 00000E5F 8B7D00                  mov edi,dword [rbp]          ;2
  1401                                  CALL_GETMEM_LONG
  1401                              <1>  CALL_FUNC 2
  1401 00000E62 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1401 00000E66 41FFD0              <2>  call r8
  1402                                  SET_MACL eax        ;2
  1402 00000E69 41894604            <1>  mov dword [SYS_REG+4], %1
  1403 00000E6D 83450004                add dword [rbp],byte 4 ;3
  1404                                  opdesc LDS_MACL_INC,	0xFF,6,0xFF,0xFF,0xFF
  1404                              <1>  global x86_%1_end
  1404                              <1>  x86_%1_end:
  1404                              <1>  global %1_size
  1404 00000E71 1900                <1>  %1_size dw (x86_%1_end - x86_%1)
  1404                              <1>  global %1_src
  1404 00000E73 FF                  <1>  %1_src db %2
  1404                              <1>  global %1_dest
  1404 00000E74 06                  <1>  %1_dest db %3
  1404                              <1>  global %1_off1
  1404 00000E75 FF                  <1>  %1_off1 db %4
  1404                              <1>  global %1_imm
  1404 00000E76 FF                  <1>  %1_imm db %5
  1404                              <1>  global %1_off3
  1404 00000E77 FF                  <1>  %1_off3 db %6
  1405                                  
  1406                                  ;Mov Opcodes
  1407                                  ;-----------
  1408                                  
  1409                                  opfunc MOVA
  1409                              <1>  global x86_%1
  1409                              <1>  x86_%1:
  1410                                  GET_R0 rbp
  1410 00000E78 4C89E5              <1>  mov %1, GEN_REG
  1411 00000E7B 418B1F                  mov ebx,[PC]       ;2
  1412 00000E7E 83E3FC                  and ebx, 0xfffffffc   ;3
  1413 00000E81 83C304                  add ebx,byte 4      ;3
  1414 00000E84 31C0                    xor eax,eax         ;2
  1415                                  GET_BYTE_IMM al
  1415 00000E86 0C7F                <1>  or %1, 0x7F
  1416 00000E88 C1E002                  shl eax,byte 2      ;3
  1417 00000E8B 01D8                    add eax, ebx ;2
  1418 00000E8D 894500                  mov dword [rbp],eax       ;2
  1419                                  opdesc MOVA,	0xFF,0xFF,0xFF,15,0xFF
  1419                              <1>  global x86_%1_end
  1419                              <1>  x86_%1_end:
  1419                              <1>  global %1_size
  1419 00000E90 1800                <1>  %1_size dw (x86_%1_end - x86_%1)
  1419                              <1>  global %1_src
  1419 00000E92 FF                  <1>  %1_src db %2
  1419                              <1>  global %1_dest
  1419 00000E93 FF                  <1>  %1_dest db %3
  1419                              <1>  global %1_off1
  1419 00000E94 FF                  <1>  %1_off1 db %4
  1419                              <1>  global %1_imm
  1419 00000E95 0F                  <1>  %1_imm db %5
  1419                              <1>  global %1_off3
  1419 00000E96 FF                  <1>  %1_off3 db %6
  1420                                  
  1421                                  
  1422                                  opfunc MOVWI
  1422                              <1>  global x86_%1
  1422                              <1>  x86_%1:
  1423                                  GET_R rbp
  1423 00000E97 4C89E5              <1>  mov %1, GEN_REG
  1423 00000E9A 4883C57F            <1>  add %1,byte 0x7F
  1424 00000E9E 31C0                    xor eax,eax         ;2
  1425                                  GET_BYTE_IMM al
  1425 00000EA0 0C7F                <1>  or %1, 0x7F
  1426 00000EA2 C1E001                  shl eax,byte 1       ;1
  1427 00000EA5 410307                  add eax,[PC]       ;2 
  1428 00000EA8 83C004                  add eax,byte 4      ;3
  1429 00000EAB 89C7                    mov edi, eax
  1430                                  CALL_GETMEM_WORD
  1430                              <1>  CALL_FUNC 1
  1430 00000EAD 4D8B4624            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1430 00000EB1 41FFD0              <2>  call r8
  1431 00000EB4 98                      cwde                ;1
  1432 00000EB5 894500                  mov dword [rbp], eax       ;3
  1433                                  opdesc MOVWI,	0xFF,6,0xFF,10,0xFF
  1433                              <1>  global x86_%1_end
  1433                              <1>  x86_%1_end:
  1433                              <1>  global %1_size
  1433 00000EB8 2100                <1>  %1_size dw (x86_%1_end - x86_%1)
  1433                              <1>  global %1_src
  1433 00000EBA FF                  <1>  %1_src db %2
  1433                              <1>  global %1_dest
  1433 00000EBB 06                  <1>  %1_dest db %3
  1433                              <1>  global %1_off1
  1433 00000EBC FF                  <1>  %1_off1 db %4
  1433                              <1>  global %1_imm
  1433 00000EBD 0A                  <1>  %1_imm db %5
  1433                              <1>  global %1_off3
  1433 00000EBE FF                  <1>  %1_off3 db %6
  1434                                  
  1435                                  
  1436                                  opfunc MOVLI
  1436                              <1>  global x86_%1
  1436                              <1>  x86_%1:
  1437                                  GET_R rbp
  1437 00000EBF 4C89E5              <1>  mov %1, GEN_REG
  1437 00000EC2 4883C57F            <1>  add %1,byte 0x7F
  1438 00000EC6 31C0                    xor eax,eax         ;2
  1439                                  GET_BYTE_IMM al
  1439 00000EC8 0C7F                <1>  or %1, 0x7F
  1440 00000ECA C1E002                  shl eax,byte 2       ;3
  1441 00000ECD 418B3F                  mov edi,dword [PC]       ;2
  1442 00000ED0 83E7FC                  and edi,0xFFFFFFFC  ;6
  1443 00000ED3 83C704                  add edi,byte 4      ;3
  1444 00000ED6 01C7                    add edi,eax         ;2            ;1
  1445                                  CALL_GETMEM_LONG
  1445                              <1>  CALL_FUNC 2
  1445 00000ED8 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1445 00000EDC 41FFD0              <2>  call r8
  1446 00000EDF 894500                  mov dword [rbp],eax       ;3
  1447                                  opdesc MOVLI,       0xFF,6,0xFF,10,0xFF
  1447                              <1>  global x86_%1_end
  1447                              <1>  x86_%1_end:
  1447                              <1>  global %1_size
  1447 00000EE2 2300                <1>  %1_size dw (x86_%1_end - x86_%1)
  1447                              <1>  global %1_src
  1447 00000EE4 FF                  <1>  %1_src db %2
  1447                              <1>  global %1_dest
  1447 00000EE5 06                  <1>  %1_dest db %3
  1447                              <1>  global %1_off1
  1447 00000EE6 FF                  <1>  %1_off1 db %4
  1447                              <1>  global %1_imm
  1447 00000EE7 0A                  <1>  %1_imm db %5
  1447                              <1>  global %1_off3
  1447 00000EE8 FF                  <1>  %1_off3 db %6
  1448                                  
  1449                                  opfunc MOVBL4
  1449                              <1>  global x86_%1
  1449                              <1>  x86_%1:
  1450                                  GET_R rbp
  1450 00000EE9 4C89E5              <1>  mov %1, GEN_REG
  1450 00000EEC 4883C57F            <1>  add %1,byte 0x7F
  1451 00000EF0 31C0                    xor  eax,eax          ;2  Clear rax
  1452                                  GET_BYTE_IMM al
  1452 00000EF2 0C7F                <1>  or %1, 0x7F
  1453 00000EF4 034500                  add  eax,dword [rbp]        ;3
  1454 00000EF7 89C7                    mov edi, eax
  1455                                  CALL_GETMEM_BYTE
  1455                              <1>  CALL_FUNC 0
  1455 00000EF9 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1455 00000EFD 41FFD0              <2>  call r8
  1456                                  GET_R0 rbp
  1456 00000F00 4C89E5              <1>  mov %1, GEN_REG
  1457 00000F03 6698                    cbw                   ;1  Sign extension byte -> word
  1458 00000F05 98                      cwde                  ;1  Sign extension qword -> dword
  1459 00000F06 894500                  mov  dword [rbp],eax        ;3
  1460                                  opdesc MOVBL4, 6,0xFF,10,0xFF,0xFF
  1460                              <1>  global x86_%1_end
  1460                              <1>  x86_%1_end:
  1460                              <1>  global %1_size
  1460 00000F09 2000                <1>  %1_size dw (x86_%1_end - x86_%1)
  1460                              <1>  global %1_src
  1460 00000F0B 06                  <1>  %1_src db %2
  1460                              <1>  global %1_dest
  1460 00000F0C FF                  <1>  %1_dest db %3
  1460                              <1>  global %1_off1
  1460 00000F0D 0A                  <1>  %1_off1 db %4
  1460                              <1>  global %1_imm
  1460 00000F0E FF                  <1>  %1_imm db %5
  1460                              <1>  global %1_off3
  1460 00000F0F FF                  <1>  %1_off3 db %6
  1461                                  
  1462                                  
  1463                                  opfunc MOVWL4
  1463                              <1>  global x86_%1
  1463                              <1>  x86_%1:
  1464                                  GET_R rbp
  1464 00000F10 4C89E5              <1>  mov %1, GEN_REG
  1464 00000F13 4883C57F            <1>  add %1,byte 0x7F
  1465 00000F17 31C0                    xor  eax,eax          ;2  Clear rax
  1466                                  GET_BYTE_IMM al
  1466 00000F19 0C7F                <1>  or %1, 0x7F
  1467 00000F1B 66C1E001                shl  ax, byte 1       ;3  << 1
  1468 00000F1F 034500                  add  eax,dword [rbp]        ;2
  1469 00000F22 89C7                    mov edi, eax
  1470                                  CALL_GETMEM_WORD
  1470                              <1>  CALL_FUNC 1
  1470 00000F24 4D8B4624            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1470 00000F28 41FFD0              <2>  call r8
  1471                                  GET_R0 rbp
  1471 00000F2B 4C89E5              <1>  mov %1, GEN_REG
  1472 00000F2E 98                      cwde                  ;2  sign 
  1473 00000F2F 894500                  mov  dword [rbp],eax        ;3
  1474                                  opdesc MOVWL4, 6,0xFF,10,0xFF,0xFF
  1474                              <1>  global x86_%1_end
  1474                              <1>  x86_%1_end:
  1474                              <1>  global %1_size
  1474 00000F32 2200                <1>  %1_size dw (x86_%1_end - x86_%1)
  1474                              <1>  global %1_src
  1474 00000F34 06                  <1>  %1_src db %2
  1474                              <1>  global %1_dest
  1474 00000F35 FF                  <1>  %1_dest db %3
  1474                              <1>  global %1_off1
  1474 00000F36 0A                  <1>  %1_off1 db %4
  1474                              <1>  global %1_imm
  1474 00000F37 FF                  <1>  %1_imm db %5
  1474                              <1>  global %1_off3
  1474 00000F38 FF                  <1>  %1_off3 db %6
  1475                                  
  1476                                  opfunc MOVLL4
  1476                              <1>  global x86_%1
  1476                              <1>  x86_%1:
  1477                                  GET_R rbp
  1477 00000F39 4C89E5              <1>  mov %1, GEN_REG
  1477 00000F3C 4883C57F            <1>  add %1,byte 0x7F
  1478 00000F40 31C0                    xor  eax,eax          ;2  Clear rax
  1479                                  GET_BYTE_IMM al
  1479 00000F42 0C7F                <1>  or %1, 0x7F
  1480 00000F44 66C1E002                shl  ax, byte 2       ;3  << 2
  1481 00000F48 034500                  add  eax,dword [rbp]        ;2
  1482 00000F4B 89C7                    mov edi, eax
  1483                                  CALL_GETMEM_LONG
  1483                              <1>  CALL_FUNC 2
  1483 00000F4D 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1483 00000F51 41FFD0              <2>  call r8
  1484                                  GET_R rbp
  1484 00000F54 4C89E5              <1>  mov %1, GEN_REG
  1484 00000F57 4883C57F            <1>  add %1,byte 0x7F
  1485 00000F5B 894500                  mov  dword [rbp],eax        ;3
  1486                                  opdesc MOVLL4, 6,33,10,0xFF,0xFF
  1486                              <1>  global x86_%1_end
  1486                              <1>  x86_%1_end:
  1486                              <1>  global %1_size
  1486 00000F5E 2500                <1>  %1_size dw (x86_%1_end - x86_%1)
  1486                              <1>  global %1_src
  1486 00000F60 06                  <1>  %1_src db %2
  1486                              <1>  global %1_dest
  1486 00000F61 21                  <1>  %1_dest db %3
  1486                              <1>  global %1_off1
  1486 00000F62 0A                  <1>  %1_off1 db %4
  1486                              <1>  global %1_imm
  1486 00000F63 FF                  <1>  %1_imm db %5
  1486                              <1>  global %1_off3
  1486 00000F64 FF                  <1>  %1_off3 db %6
  1487                                  
  1488                                   
  1489                                  opfunc MOVBS4
  1489                              <1>  global x86_%1
  1489                              <1>  x86_%1:
  1490                                  GET_R0 rbp
  1490 00000F65 4C89E5              <1>  mov %1, GEN_REG
  1491 00000F68 8B7500                  mov esi, dword [rbp]     ;3
  1492                                  GET_R rbp
  1492 00000F6B 4C89E5              <1>  mov %1, GEN_REG
  1492 00000F6E 4883C57F            <1>  add %1,byte 0x7F
  1493 00000F72 83E700                  and edi,00000000h   ;5  
  1494 00000F75 83CF00                  or  edi,byte $00    ;3  Get Disp value
  1495 00000F78 037D00                  add edi,dword [rbp]       ;3  Add Disp value
  1496                                  CALL_SETMEM_BYTE
  1496                              <1>  CALL_FUNC 3
  1496 00000F7B 4D8B4634            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1496 00000F7F 41FFD0              <2>  call r8
  1497                                  opdesc MOVBS4,	12,0xFF,18,0xFF,0xFF
  1497                              <1>  global x86_%1_end
  1497                              <1>  x86_%1_end:
  1497                              <1>  global %1_size
  1497 00000F82 1D00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1497                              <1>  global %1_src
  1497 00000F84 0C                  <1>  %1_src db %2
  1497                              <1>  global %1_dest
  1497 00000F85 FF                  <1>  %1_dest db %3
  1497                              <1>  global %1_off1
  1497 00000F86 12                  <1>  %1_off1 db %4
  1497                              <1>  global %1_imm
  1497 00000F87 FF                  <1>  %1_imm db %5
  1497                              <1>  global %1_off3
  1497 00000F88 FF                  <1>  %1_off3 db %6
  1498                                  
  1499                                  opfunc MOVWS4
  1499                              <1>  global x86_%1
  1499                              <1>  x86_%1:
  1500                                  GET_R0 rbp
  1500 00000F89 4C89E5              <1>  mov %1, GEN_REG
  1501 00000F8C 8B7500                  mov esi, dword [rbp]     ;3
  1502                                  GET_R rbp
  1502 00000F8F 4C89E5              <1>  mov %1, GEN_REG
  1502 00000F92 4883C57F            <1>  add %1,byte 0x7F
  1503 00000F96 83E700                  and edi,00000000h   ;5  
  1504 00000F99 83CF00                  or  edi,byte $00    ;3  Get Disp value
  1505 00000F9C C1E701                  shl edi,byte 1      ;3  Shift Left
  1506 00000F9F 037D00                  add edi,dword [rbp]       ;3  Add Disp value
  1507                                  CALL_SETMEM_WORD
  1507                              <1>  CALL_FUNC 4
  1507 00000FA2 4D8B463C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1507 00000FA6 41FFD0              <2>  call r8
  1508                                  opdesc MOVWS4,	12,0xFF,18,0xFF,0xFF
  1508                              <1>  global x86_%1_end
  1508                              <1>  x86_%1_end:
  1508                              <1>  global %1_size
  1508 00000FA9 2000                <1>  %1_size dw (x86_%1_end - x86_%1)
  1508                              <1>  global %1_src
  1508 00000FAB 0C                  <1>  %1_src db %2
  1508                              <1>  global %1_dest
  1508 00000FAC FF                  <1>  %1_dest db %3
  1508                              <1>  global %1_off1
  1508 00000FAD 12                  <1>  %1_off1 db %4
  1508                              <1>  global %1_imm
  1508 00000FAE FF                  <1>  %1_imm db %5
  1508                              <1>  global %1_off3
  1508 00000FAF FF                  <1>  %1_off3 db %6
  1509                                  
  1510                                  
  1511                                  opfunc MOVLS4
  1511                              <1>  global x86_%1
  1511                              <1>  x86_%1:
  1512                                  GET_R rbp
  1512 00000FB0 4C89E5              <1>  mov %1, GEN_REG
  1512 00000FB3 4883C57F            <1>  add %1,byte 0x7F
  1513 00000FB7 8B7500                  mov esi, dword [rbp]     ;3
  1514                                  GET_R rbp
  1514 00000FBA 4C89E5              <1>  mov %1, GEN_REG
  1514 00000FBD 4883C57F            <1>  add %1,byte 0x7F
  1515 00000FC1 8B7D00                  mov edi, dword [rbp]     ;3
  1516 00000FC4 31C0                    xor eax,eax         ;2
  1517                                  GET_BYTE_IMM al
  1517 00000FC6 0C7F                <1>  or %1, 0x7F
  1518 00000FC8 C1E002                  shl eax,byte 2      ;3
  1519 00000FCB 01C7                    add edi,eax ;2
  1520                                  CALL_SETMEM_LONG
  1520                              <1>  CALL_FUNC 5
  1520 00000FCD 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1520 00000FD1 41FFD0              <2>  call r8
  1521                                  opdesc MOVLS4,	6,16,23,0xFF,0xFF
  1521                              <1>  global x86_%1_end
  1521                              <1>  x86_%1_end:
  1521                              <1>  global %1_size
  1521 00000FD4 2400                <1>  %1_size dw (x86_%1_end - x86_%1)
  1521                              <1>  global %1_src
  1521 00000FD6 06                  <1>  %1_src db %2
  1521                              <1>  global %1_dest
  1521 00000FD7 10                  <1>  %1_dest db %3
  1521                              <1>  global %1_off1
  1521 00000FD8 17                  <1>  %1_off1 db %4
  1521                              <1>  global %1_imm
  1521 00000FD9 FF                  <1>  %1_imm db %5
  1521                              <1>  global %1_off3
  1521 00000FDA FF                  <1>  %1_off3 db %6
  1522                                  
  1523                                   
  1524                                  opfunc MOVBLG
  1524                              <1>  global x86_%1
  1524                              <1>  x86_%1:
  1525                                  GET_R0 rbp
  1525 00000FDB 4C89E5              <1>  mov %1, GEN_REG
  1526 00000FDE 31C0                    xor  eax,eax           ;2  clear rax
  1527                                  GET_BYTE_IMM al
  1527 00000FE0 0C7F                <1>  or %1, 0x7F
  1528                                  GET_GBR edi
  1528 00000FE2 418B7D04            <1>  mov %1, dword [CTRL_REG+4]
  1529 00000FE6 01C7                    add  edi, eax;3  GBR + IMM( Adress for Get Value )
  1530                                  CALL_GETMEM_BYTE
  1530                              <1>  CALL_FUNC 0
  1530 00000FE8 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1530 00000FEC 41FFD0              <2>  call r8
  1531 00000FEF 6698                    cbw                    ;1
  1532 00000FF1 98                      cwde                   ;1
  1533 00000FF2 894500                  mov  dword [rbp],eax         ;3
  1534                                  opdesc MOVBLG,    0xFF,0xFF,0xFF,6,0xFF
  1534                              <1>  global x86_%1_end
  1534                              <1>  x86_%1_end:
  1534                              <1>  global %1_size
  1534 00000FF5 1A00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1534                              <1>  global %1_src
  1534 00000FF7 FF                  <1>  %1_src db %2
  1534                              <1>  global %1_dest
  1534 00000FF8 FF                  <1>  %1_dest db %3
  1534                              <1>  global %1_off1
  1534 00000FF9 FF                  <1>  %1_off1 db %4
  1534                              <1>  global %1_imm
  1534 00000FFA 06                  <1>  %1_imm db %5
  1534                              <1>  global %1_off3
  1534 00000FFB FF                  <1>  %1_off3 db %6
  1535                                  
  1536                                  
  1537                                  opfunc MOVWLG
  1537                              <1>  global x86_%1
  1537                              <1>  x86_%1:
  1538                                  GET_R0 rbp
  1538 00000FFC 4C89E5              <1>  mov %1, GEN_REG
  1539 00000FFF 31C0                    xor  eax,eax           ;2  clear rax
  1540                                  GET_BYTE_IMM al
  1540 00001001 0C7F                <1>  or %1, 0x7F
  1541 00001003 C1E001                  shl  eax,byte 1         ;3  Shift left 2
  1542                                  GET_GBR edi
  1542 00001006 418B7D04            <1>  mov %1, dword [CTRL_REG+4]
  1543 0000100A 01C7                    add  edi, eax;3  GBR + IMM( Adress for Get Value )
  1544                                  CALL_GETMEM_WORD
  1544                              <1>  CALL_FUNC 1
  1544 0000100C 4D8B4624            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1544 00001010 41FFD0              <2>  call r8
  1545 00001013 98                      cwde                   ;1
  1546 00001014 894500                  mov  dword [rbp],eax         ;3
  1547                                  opdesc MOVWLG,    0xFF,0xFF,0xFF,6,0xFF
  1547                              <1>  global x86_%1_end
  1547                              <1>  x86_%1_end:
  1547                              <1>  global %1_size
  1547 00001017 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1547                              <1>  global %1_src
  1547 00001019 FF                  <1>  %1_src db %2
  1547                              <1>  global %1_dest
  1547 0000101A FF                  <1>  %1_dest db %3
  1547                              <1>  global %1_off1
  1547 0000101B FF                  <1>  %1_off1 db %4
  1547                              <1>  global %1_imm
  1547 0000101C 06                  <1>  %1_imm db %5
  1547                              <1>  global %1_off3
  1547 0000101D FF                  <1>  %1_off3 db %6
  1548                                  
  1549                                  
  1550                                  opfunc MOVLLG
  1550                              <1>  global x86_%1
  1550                              <1>  x86_%1:
  1551                                  GET_R0 rbp
  1551 0000101E 4C89E5              <1>  mov %1, GEN_REG
  1552 00001021 31C0                    xor  eax,eax           ;2  clear rax
  1553                                  GET_BYTE_IMM al
  1553 00001023 0C7F                <1>  or %1, 0x7F
  1554 00001025 C1E002                  shl  eax,byte 2         ;3  Shift left 2
  1555                                  GET_GBR edi
  1555 00001028 418B7D04            <1>  mov %1, dword [CTRL_REG+4]
  1556 0000102C 01C7                    add  edi, eax;3  GBR + IMM( Adress for Get Value )
  1557                                  CALL_GETMEM_LONG
  1557                              <1>  CALL_FUNC 2
  1557 0000102E 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1557 00001032 41FFD0              <2>  call r8
  1558 00001035 894500                  mov  dword [rbp],eax         ;3
  1559                                  opdesc MOVLLG,    0xFF,0xFF,0xFF,6,0xFF
  1559                              <1>  global x86_%1_end
  1559                              <1>  x86_%1_end:
  1559                              <1>  global %1_size
  1559 00001038 1A00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1559                              <1>  global %1_src
  1559 0000103A FF                  <1>  %1_src db %2
  1559                              <1>  global %1_dest
  1559 0000103B FF                  <1>  %1_dest db %3
  1559                              <1>  global %1_off1
  1559 0000103C FF                  <1>  %1_off1 db %4
  1559                              <1>  global %1_imm
  1559 0000103D 06                  <1>  %1_imm db %5
  1559                              <1>  global %1_off3
  1559 0000103E FF                  <1>  %1_off3 db %6
  1560                                  
  1561                                  
  1562                                  opfunc MOVBSG
  1562                              <1>  global x86_%1
  1562                              <1>  x86_%1:
  1563                                  GET_R0 rbp
  1563 0000103F 4C89E5              <1>  mov %1, GEN_REG
  1564 00001042 8B7500                  mov esi, dword [rbp]     ;3
  1565 00001045 31C0                    xor  eax,eax         ;2  Clear rax
  1566                                  GET_BYTE_IMM al
  1566 00001047 0C7F                <1>  or %1, 0x7F
  1567                                  GET_GBR edi
  1567 00001049 418B7D04            <1>  mov %1, dword [CTRL_REG+4]
  1568 0000104D 01C7                    add  edi,eax ;2  GBR + IMM( Adress for Get Value )
  1569                                  CALL_SETMEM_BYTE
  1569                              <1>  CALL_FUNC 3
  1569 0000104F 4D8B4634            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1569 00001053 41FFD0              <2>  call r8
  1570                                  opdesc MOVBSG,    0xFF,0xFF,0xFF,9,0xFF
  1570                              <1>  global x86_%1_end
  1570                              <1>  x86_%1_end:
  1570                              <1>  global %1_size
  1570 00001056 1700                <1>  %1_size dw (x86_%1_end - x86_%1)
  1570                              <1>  global %1_src
  1570 00001058 FF                  <1>  %1_src db %2
  1570                              <1>  global %1_dest
  1570 00001059 FF                  <1>  %1_dest db %3
  1570                              <1>  global %1_off1
  1570 0000105A FF                  <1>  %1_off1 db %4
  1570                              <1>  global %1_imm
  1570 0000105B 09                  <1>  %1_imm db %5
  1570                              <1>  global %1_off3
  1570 0000105C FF                  <1>  %1_off3 db %6
  1571                                  
  1572                                  opfunc MOVWSG
  1572                              <1>  global x86_%1
  1572                              <1>  x86_%1:
  1573                                  GET_R0 rbp
  1573 0000105D 4C89E5              <1>  mov %1, GEN_REG
  1574 00001060 8B7500                  mov esi, dword [rbp]
  1575 00001063 31C0                    xor  eax,eax         ;2  Clear rax
  1576                                  GET_BYTE_IMM al
  1576 00001065 0C7F                <1>  or %1, 0x7F
  1577 00001067 66C1E001                shl  ax,byte 1       ;3  Shift left 2
  1578                                  GET_GBR edi
  1578 0000106B 418B7D04            <1>  mov %1, dword [CTRL_REG+4]
  1579 0000106F 01C7                    add  edi, eax ;2  GBR + IMM( Adress for Get Value )
  1580                                  CALL_SETMEM_WORD
  1580                              <1>  CALL_FUNC 4
  1580 00001071 4D8B463C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1580 00001075 41FFD0              <2>  call r8
  1581                                  opdesc MOVWSG,    0xFF,0xFF,0xFF,9,0xFF
  1581                              <1>  global x86_%1_end
  1581                              <1>  x86_%1_end:
  1581                              <1>  global %1_size
  1581 00001078 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1581                              <1>  global %1_src
  1581 0000107A FF                  <1>  %1_src db %2
  1581                              <1>  global %1_dest
  1581 0000107B FF                  <1>  %1_dest db %3
  1581                              <1>  global %1_off1
  1581 0000107C FF                  <1>  %1_off1 db %4
  1581                              <1>  global %1_imm
  1581 0000107D 09                  <1>  %1_imm db %5
  1581                              <1>  global %1_off3
  1581 0000107E FF                  <1>  %1_off3 db %6
  1582                                  
  1583                                  opfunc MOVLSG
  1583                              <1>  global x86_%1
  1583                              <1>  x86_%1:
  1584                                  GET_R0 rbp
  1584 0000107F 4C89E5              <1>  mov %1, GEN_REG
  1585 00001082 8B7500                  mov esi, dword [rbp]     ;3
  1586 00001085 31C0                    xor  eax,eax         ;2  Clear rax
  1587                                  GET_BYTE_IMM al
  1587 00001087 0C7F                <1>  or %1, 0x7F
  1588 00001089 C1E002                  shl eax,byte 2       ;3  Shift left 2
  1589                                  GET_GBR edi
  1589 0000108C 418B7D04            <1>  mov %1, dword [CTRL_REG+4]
  1590 00001090 01C7                    add  edi,eax ;2  GBR + IMM( Adress for Get Value )
  1591                                  CALL_SETMEM_LONG
  1591                              <1>  CALL_FUNC 5
  1591 00001092 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1591 00001096 41FFD0              <2>  call r8
  1592                                  opdesc MOVLSG,    0xFF,0xFF,0xFF,9,0xFF
  1592                              <1>  global x86_%1_end
  1592                              <1>  x86_%1_end:
  1592                              <1>  global %1_size
  1592 00001099 1A00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1592                              <1>  global %1_src
  1592 0000109B FF                  <1>  %1_src db %2
  1592                              <1>  global %1_dest
  1592 0000109C FF                  <1>  %1_dest db %3
  1592                              <1>  global %1_off1
  1592 0000109D FF                  <1>  %1_off1 db %4
  1592                              <1>  global %1_imm
  1592 0000109E 09                  <1>  %1_imm db %5
  1592                              <1>  global %1_off3
  1592 0000109F FF                  <1>  %1_off3 db %6
  1593                                  
  1594                                  
  1595                                  opfunc MOVBS
  1595                              <1>  global x86_%1
  1595                              <1>  x86_%1:
  1596                                  GET_R rbp
  1596 000010A0 4C89E5              <1>  mov %1, GEN_REG
  1596 000010A3 4883C57F            <1>  add %1,byte 0x7F
  1597 000010A7 8B7500                  mov esi, dword [rbp]
  1598                                  GET_R rbp
  1598 000010AA 4C89E5              <1>  mov %1, GEN_REG
  1598 000010AD 4883C57F            <1>  add %1,byte 0x7F
  1599 000010B1 8B7D00                  mov edi, dword [rbp]
  1600                                  CALL_SETMEM_BYTE
  1600                              <1>  CALL_FUNC 3
  1600 000010B4 4D8B4634            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1600 000010B8 41FFD0              <2>  call r8
  1601                                  opdesc MOVBS,	6,16,0xFF,0xFF,0xFF
  1601                              <1>  global x86_%1_end
  1601                              <1>  x86_%1_end:
  1601                              <1>  global %1_size
  1601 000010BB 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1601                              <1>  global %1_src
  1601 000010BD 06                  <1>  %1_src db %2
  1601                              <1>  global %1_dest
  1601 000010BE 10                  <1>  %1_dest db %3
  1601                              <1>  global %1_off1
  1601 000010BF FF                  <1>  %1_off1 db %4
  1601                              <1>  global %1_imm
  1601 000010C0 FF                  <1>  %1_imm db %5
  1601                              <1>  global %1_off3
  1601 000010C1 FF                  <1>  %1_off3 db %6
  1602                                  
  1603                                  
  1604                                  opfunc MOVWS
  1604                              <1>  global x86_%1
  1604                              <1>  x86_%1:
  1605                                  GET_R rbp
  1605 000010C2 4C89E5              <1>  mov %1, GEN_REG
  1605 000010C5 4883C57F            <1>  add %1,byte 0x7F
  1606 000010C9 8B7500                  mov esi, dword [rbp]
  1607                                  GET_R rbp
  1607 000010CC 4C89E5              <1>  mov %1, GEN_REG
  1607 000010CF 4883C57F            <1>  add %1,byte 0x7F
  1608 000010D3 8B7D00                  mov edi, dword [rbp]
  1609                                  CALL_SETMEM_WORD
  1609                              <1>  CALL_FUNC 4
  1609 000010D6 4D8B463C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1609 000010DA 41FFD0              <2>  call r8
  1610                                  opdesc MOVWS,	6,16,0xFF,0xFF,0xFF
  1610                              <1>  global x86_%1_end
  1610                              <1>  x86_%1_end:
  1610                              <1>  global %1_size
  1610 000010DD 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1610                              <1>  global %1_src
  1610 000010DF 06                  <1>  %1_src db %2
  1610                              <1>  global %1_dest
  1610 000010E0 10                  <1>  %1_dest db %3
  1610                              <1>  global %1_off1
  1610 000010E1 FF                  <1>  %1_off1 db %4
  1610                              <1>  global %1_imm
  1610 000010E2 FF                  <1>  %1_imm db %5
  1610                              <1>  global %1_off3
  1610 000010E3 FF                  <1>  %1_off3 db %6
  1611                                  
  1612                                  opfunc MOVLS
  1612                              <1>  global x86_%1
  1612                              <1>  x86_%1:
  1613                                  GET_R rbp
  1613 000010E4 4C89E5              <1>  mov %1, GEN_REG
  1613 000010E7 4883C57F            <1>  add %1,byte 0x7F
  1614 000010EB 8B7500                  mov esi, dword [rbp]
  1615                                  GET_R rbp
  1615 000010EE 4C89E5              <1>  mov %1, GEN_REG
  1615 000010F1 4883C57F            <1>  add %1,byte 0x7F
  1616 000010F5 8B7D00                  mov edi, dword [rbp]
  1617                                  CALL_SETMEM_LONG
  1617                              <1>  CALL_FUNC 5
  1617 000010F8 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1617 000010FC 41FFD0              <2>  call r8
  1618                                  opdesc MOVLS,	6,16,0xFF,0xFF,0xFF
  1618                              <1>  global x86_%1_end
  1618                              <1>  x86_%1_end:
  1618                              <1>  global %1_size
  1618 000010FF 1B00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1618                              <1>  global %1_src
  1618 00001101 06                  <1>  %1_src db %2
  1618                              <1>  global %1_dest
  1618 00001102 10                  <1>  %1_dest db %3
  1618                              <1>  global %1_off1
  1618 00001103 FF                  <1>  %1_off1 db %4
  1618                              <1>  global %1_imm
  1618 00001104 FF                  <1>  %1_imm db %5
  1618                              <1>  global %1_off3
  1618 00001105 FF                  <1>  %1_off3 db %6
  1619                                  
  1620                                  
  1621                                  opfunc MOVR
  1621                              <1>  global x86_%1
  1621                              <1>  x86_%1:
  1622                                  GET_R rbp
  1622 00001106 4C89E5              <1>  mov %1, GEN_REG
  1622 00001109 4883C57F            <1>  add %1,byte 0x7F
  1623 0000110D 8B4500                  mov eax,dword [rbp]       ;3
  1624                                  GET_R rbp
  1624 00001110 4C89E5              <1>  mov %1, GEN_REG
  1624 00001113 4883C57F            <1>  add %1,byte 0x7F
  1625 00001117 894500                  mov dword [rbp],eax       ;3
  1626                                  opdesc MOVR,		6,16,0xFF,0xFF,0xFF
  1626                              <1>  global x86_%1_end
  1626                              <1>  x86_%1_end:
  1626                              <1>  global %1_size
  1626 0000111A 1400                <1>  %1_size dw (x86_%1_end - x86_%1)
  1626                              <1>  global %1_src
  1626 0000111C 06                  <1>  %1_src db %2
  1626                              <1>  global %1_dest
  1626 0000111D 10                  <1>  %1_dest db %3
  1626                              <1>  global %1_off1
  1626 0000111E FF                  <1>  %1_off1 db %4
  1626                              <1>  global %1_imm
  1626 0000111F FF                  <1>  %1_imm db %5
  1626                              <1>  global %1_off3
  1626 00001120 FF                  <1>  %1_off3 db %6
  1627                                  
  1628                                  opfunc MOVBM
  1628                              <1>  global x86_%1
  1628                              <1>  x86_%1:
  1629                                  GET_R rbp 
  1629 00001121 4C89E5              <1>  mov %1, GEN_REG
  1629 00001124 4883C57F            <1>  add %1,byte 0x7F
  1630 00001128 8B7500                  mov esi, dword [rbp]
  1631                                  GET_R rbp 
  1631 0000112B 4C89E5              <1>  mov %1, GEN_REG
  1631 0000112E 4883C57F            <1>  add %1,byte 0x7F
  1632 00001132 836D0001                sub  dword [rbp],byte 1  ;4
  1633 00001136 8B7D00                  mov edi, dword [rbp]
  1634                                  CALL_SETMEM_BYTE
  1634                              <1>  CALL_FUNC 3
  1634 00001139 4D8B4634            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1634 0000113D 41FFD0              <2>  call r8
  1635                                  opdesc MOVBM,		6,16,0xFF,0xFF,0xFF
  1635                              <1>  global x86_%1_end
  1635                              <1>  x86_%1_end:
  1635                              <1>  global %1_size
  1635 00001140 1F00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1635                              <1>  global %1_src
  1635 00001142 06                  <1>  %1_src db %2
  1635                              <1>  global %1_dest
  1635 00001143 10                  <1>  %1_dest db %3
  1635                              <1>  global %1_off1
  1635 00001144 FF                  <1>  %1_off1 db %4
  1635                              <1>  global %1_imm
  1635 00001145 FF                  <1>  %1_imm db %5
  1635                              <1>  global %1_off3
  1635 00001146 FF                  <1>  %1_off3 db %6
  1636                                  
  1637                                  opfunc MOVWM
  1637                              <1>  global x86_%1
  1637                              <1>  x86_%1:
  1638                                  GET_R rbp 
  1638 00001147 4C89E5              <1>  mov %1, GEN_REG
  1638 0000114A 4883C57F            <1>  add %1,byte 0x7F
  1639 0000114E 8B7500                  mov esi, dword [rbp]
  1640                                  GET_R rbp 
  1640 00001151 4C89E5              <1>  mov %1, GEN_REG
  1640 00001154 4883C57F            <1>  add %1,byte 0x7F
  1641 00001158 836D0002                sub  dword [rbp],byte 2  ;4
  1642 0000115C 8B7D00                  mov edi, dword [rbp]
  1643                                  CALL_SETMEM_WORD
  1643                              <1>  CALL_FUNC 4
  1643 0000115F 4D8B463C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1643 00001163 41FFD0              <2>  call r8
  1644                                  opdesc MOVWM,		6,16,0xFF,0xFF,0xFF
  1644                              <1>  global x86_%1_end
  1644                              <1>  x86_%1_end:
  1644                              <1>  global %1_size
  1644 00001166 1F00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1644                              <1>  global %1_src
  1644 00001168 06                  <1>  %1_src db %2
  1644                              <1>  global %1_dest
  1644 00001169 10                  <1>  %1_dest db %3
  1644                              <1>  global %1_off1
  1644 0000116A FF                  <1>  %1_off1 db %4
  1644                              <1>  global %1_imm
  1644 0000116B FF                  <1>  %1_imm db %5
  1644                              <1>  global %1_off3
  1644 0000116C FF                  <1>  %1_off3 db %6
  1645                                  
  1646                                  opfunc MOVLM
  1646                              <1>  global x86_%1
  1646                              <1>  x86_%1:
  1647                                  GET_R rbp  
  1647 0000116D 4C89E5              <1>  mov %1, GEN_REG
  1647 00001170 4883C57F            <1>  add %1,byte 0x7F
  1648 00001174 8B7500                  mov esi,dword [rbp]         ;3 Set data
  1649                                  GET_R rbp
  1649 00001177 4C89E5              <1>  mov %1, GEN_REG
  1649 0000117A 4883C57F            <1>  add %1,byte 0x7F
  1650 0000117E 836D0004                sub  dword [rbp],byte 4  ;4
  1651 00001182 8B7D00                  mov edi, dword [rbp]         ;3 Set addr
  1652                                  CALL_SETMEM_LONG
  1652                              <1>  CALL_FUNC 5
  1652 00001185 4D8B4644            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1652 00001189 41FFD0              <2>  call r8
  1653                                  opdesc MOVLM,		6,16,0xFF,0xFF,0xFF
  1653                              <1>  global x86_%1_end
  1653                              <1>  x86_%1_end:
  1653                              <1>  global %1_size
  1653 0000118C 1F00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1653                              <1>  global %1_src
  1653 0000118E 06                  <1>  %1_src db %2
  1653                              <1>  global %1_dest
  1653 0000118F 10                  <1>  %1_dest db %3
  1653                              <1>  global %1_off1
  1653 00001190 FF                  <1>  %1_off1 db %4
  1653                              <1>  global %1_imm
  1653 00001191 FF                  <1>  %1_imm db %5
  1653                              <1>  global %1_off3
  1653 00001192 FF                  <1>  %1_off3 db %6
  1654                                  
  1655                                  ;------------- added ------------------
  1656                                  
  1657                                  opfunc TAS
  1657                              <1>  global x86_%1
  1657                              <1>  x86_%1:
  1658                                  GET_R rbp
  1658 00001193 4C89E5              <1>  mov %1, GEN_REG
  1658 00001196 4883C57F            <1>  add %1,byte 0x7F
  1659 0000119A 8B7D00                  mov edi, dword [rbp]         ;3
  1660                                  CALL_GETMEM_BYTE
  1660                              <1>  CALL_FUNC 0
  1660 0000119D 4D8B461C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1660 000011A1 41FFD0              <2>  call r8
  1661 000011A4 25FF000000              and  eax,0x000000FF      ;5
  1662                                  CLEAR_T
  1662 000011A9 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
  1663 000011B1 85C0                    test eax,eax             ;3
  1664 000011B3 7505                    jne  NOT_ZERO            ;2
  1665                                  SET_T
  1665 000011B5 41834D0001          <1>  or dword [CTRL_REG], 0x1
  1666                                  NOT_ZERO:              
  1667 000011BA 83C880                  or   eax, byte 0x80        ;3
  1667          ******************       warning: signed byte value exceeds bounds
  1668 000011BD 89C6                    mov  esi, eax
  1669 000011BF 8B7D00                  mov  edi, dword [rbp]          ;3
  1670                                  CALL_SETMEM_BYTE
  1670                              <1>  CALL_FUNC 3
  1670 000011C2 4D8B4634            <2>  mov r8, [SYS_REG + 28 + %1*8]
  1670 000011C6 41FFD0              <2>  call r8
  1671                                  opdesc TAS,  0xFF,6,0xFF,0xFF,0xFF
  1671                              <1>  global x86_%1_end
  1671                              <1>  x86_%1_end:
  1671                              <1>  global %1_size
  1671 000011C9 3600                <1>  %1_size dw (x86_%1_end - x86_%1)
  1671                              <1>  global %1_src
  1671 000011CB FF                  <1>  %1_src db %2
  1671                              <1>  global %1_dest
  1671 000011CC 06                  <1>  %1_dest db %3
  1671                              <1>  global %1_off1
  1671 000011CD FF                  <1>  %1_off1 db %4
  1671                              <1>  global %1_imm
  1671 000011CE FF                  <1>  %1_imm db %5
  1671                              <1>  global %1_off3
  1671 000011CF FF                  <1>  %1_off3 db %6
  1672                                  
  1673                                  
  1674                                  ; sub with overflow check
  1675                                  opfunc SUBV
  1675                              <1>  global x86_%1
  1675                              <1>  x86_%1:
  1676                                  GET_R rbp
  1676 000011D0 4C89E5              <1>  mov %1, GEN_REG
  1676 000011D3 4883C57F            <1>  add %1,byte 0x7F
  1677 000011D7 8B4500                  mov  eax,dword [rbp]        ;3
  1678                                  GET_R rbp
  1678 000011DA 4C89E5              <1>  mov %1, GEN_REG
  1678 000011DD 4883C57F            <1>  add %1,byte 0x7F
  1679                                  CLEAR_T
  1679 000011E1 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
  1680 000011E9 294500                  sub  dword [rbp],eax        ;3 R[n] = R[n] - R[m]
  1681 000011EC 7105                    jno	 NO_OVER_FLOS     ;2
  1682                                  SET_T
  1682 000011EE 41834D0001          <1>  or dword [CTRL_REG], 0x1
  1683                                  NO_OVER_FLOS:
  1684                                  opdesc SUBV, 6,16,0xFF,0xFF,0xFF
  1684                              <1>  global x86_%1_end
  1684                              <1>  x86_%1_end:
  1684                              <1>  global %1_size
  1684 000011F3 2300                <1>  %1_size dw (x86_%1_end - x86_%1)
  1684                              <1>  global %1_src
  1684 000011F5 06                  <1>  %1_src db %2
  1684                              <1>  global %1_dest
  1684 000011F6 10                  <1>  %1_dest db %3
  1684                              <1>  global %1_off1
  1684 000011F7 FF                  <1>  %1_off1 db %4
  1684                              <1>  global %1_imm
  1684 000011F8 FF                  <1>  %1_imm db %5
  1684                              <1>  global %1_off3
  1684 000011F9 FF                  <1>  %1_off3 db %6
  1685                                  
  1686                                  
  1687                                  ; string cmp
  1688                                  opfunc CMPSTR
  1688                              <1>  global x86_%1
  1688                              <1>  x86_%1:
  1689                                  GET_R rbp
  1689 000011FA 4C89E5              <1>  mov %1, GEN_REG
  1689 000011FD 4883C57F            <1>  add %1,byte 0x7F
  1690 00001201 8B4500                  mov  eax,[rbp]        ;3
  1691                                  GET_R rbp
  1691 00001204 4C89E5              <1>  mov %1, GEN_REG
  1691 00001207 4883C57F            <1>  add %1,byte 0x7F
  1692 0000120B 8B4D00                  mov  ecx,[rbp]        ;3
  1693 0000120E 31C8                    xor  eax,ecx          ;2  
  1694                                  CLEAR_T
  1694 00001210 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
  1695 00001218 89C1                    mov  ecx,eax          ;2  
  1696 0000121A C1E918                  shr  ecx,byte 24      ;3 1Byte Check
  1697 0000121D 84C9                    test cl,cl            ;1
  1698 0000121F 7418                    je  HIT_BYTE          ;2
  1699 00001221 89C1                    mov  ecx,eax          ;2  
  1700 00001223 C1E910                  shr  ecx,byte 16       ;3 1Byte Check
  1701 00001226 84C9                    test cl,cl            ;2
  1702 00001228 740F                    je  HIT_BYTE         ;2
  1703 0000122A 89C1                    mov  ecx,eax          ;2  
  1704 0000122C C1E908                  shr  ecx,byte 8       ;3 1Byte Check
  1705 0000122F 84C9                    test cl,cl            ;2
  1706 00001231 7406                    je  HIT_BYTE         ;2
  1707 00001233 84C0                    test al,al            ;2
  1708 00001235 7402                    je  HIT_BYTE         ;2
  1709 00001237 EB05                    jmp  ENDPROC          ;3
  1710                                  HIT_BYTE:
  1711                                  SET_T
  1711 00001239 41834D0001          <1>  or dword [CTRL_REG], 0x1
  1712                                  ENDPROC:
  1713                                  opdesc CMPSTR, 6,16,0xFF,0xFF,0xFF
  1713                              <1>  global x86_%1_end
  1713                              <1>  x86_%1_end:
  1713                              <1>  global %1_size
  1713 0000123E 4400                <1>  %1_size dw (x86_%1_end - x86_%1)
  1713                              <1>  global %1_src
  1713 00001240 06                  <1>  %1_src db %2
  1713                              <1>  global %1_dest
  1713 00001241 10                  <1>  %1_dest db %3
  1713                              <1>  global %1_off1
  1713 00001242 FF                  <1>  %1_off1 db %4
  1713                              <1>  global %1_imm
  1713 00001243 FF                  <1>  %1_imm db %5
  1713                              <1>  global %1_off3
  1713 00001244 FF                  <1>  %1_off3 db %6
  1714                                  
  1715                                  ;-------------------------------------------------------------
  1716                                  ;div0s 
  1717                                  opfunc DIV0S
  1717                              <1>  global x86_%1
  1717                              <1>  x86_%1:
  1718                                  GET_R rbp
  1718 00001245 4C89E5              <1>  mov %1, GEN_REG
  1718 00001248 4883C57F            <1>  add %1,byte 0x7F
  1719                                  CLEAR_Q
  1719 0000124C 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1720 00001254 B800000000              mov  eax, 0                  ;5 Zero Clear rax     
  1721 00001259 F7450000000080          test dword [rbp],0x80000000  ;7 Test sign
  1722 00001260 740A                    je   continue                ;2 if ZF = 1 then goto NO_SIGN
  1723                                  SET_Q
  1723 00001262 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1724 0000126A FFC0                    inc  eax                     ;1 
  1725                                  continue:
  1726                                  GET_R rbp
  1726 0000126C 4C89E5              <1>  mov %1, GEN_REG
  1726 0000126F 4883C57F            <1>  add %1,byte 0x7F
  1727                                  CLEAR_M
  1727 00001273 41816500FF010000    <1>  and dword [CTRL_REG],0x1FF
  1728 0000127B F7450000000080          test dword [rbp],0x80000000  ;7 Test sign
  1729 00001282 740A                    je   continue2               ;2 if ZF = 1 then goto NO_SIGN
  1730                                  SET_M
  1730 00001284 41814D0000020000    <1>  or dword [CTRL_REG],0x200
  1731 0000128C FFC0                    inc  eax                     ;1
  1732                                  continue2:
  1733                                  CLEAR_T
  1733 0000128E 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
  1734 00001296 A901000000              test eax, 1                  ;5 if( Q != M ) SetT(1)
  1735 0000129B 7405                    je  continue3                ;2
  1736                                  SET_T
  1736 0000129D 41834D0001          <1>  or dword [CTRL_REG], 0x1
  1737                                  continue3:
  1738                                  opdesc DIV0S, 45,6,0xFF,0xFF,0xFF
  1738                              <1>  global x86_%1_end
  1738                              <1>  x86_%1_end:
  1738                              <1>  global %1_size
  1738 000012A2 5D00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1738                              <1>  global %1_src
  1738 000012A4 2D                  <1>  %1_src db %2
  1738                              <1>  global %1_dest
  1738 000012A5 06                  <1>  %1_dest db %3
  1738                              <1>  global %1_off1
  1738 000012A6 FF                  <1>  %1_off1 db %4
  1738                              <1>  global %1_imm
  1738 000012A7 FF                  <1>  %1_imm db %5
  1738                              <1>  global %1_off3
  1738 000012A8 FF                  <1>  %1_off3 db %6
  1739                                   
  1740                                  
  1741                                  ;===============================================================
  1742                                  ; DIV1   1bit Divid operation
  1743                                  ; 
  1744                                  ; size = 69 + 135 + 132 + 38 = 374 
  1745                                  ;===============================================================
  1746                                  opfunc DIV1
  1746                              <1>  global x86_%1
  1746                              <1>  x86_%1:
  1747                                  
  1748                                  ; 69
  1749                                  GET_R r8                    ;2 r8 = @R[n]
  1749 000012A9 4D89E0              <1>  mov %1, GEN_REG
  1749 000012AC 4983C07F            <1>  add %1,byte 0x7F
  1750                                  GET_SR ecx		    ;ecx = old SR
  1750 000012B0 418B4D00            <1>  mov %1, dword [CTRL_REG]
  1751 000012B4 418B00                  mov  eax,dword [r8]         ;3 R[n]
  1752                                  
  1753 000012B7 A900000080              test eax,0x80000000          ;5 
  1754 000012BC 740A                    je   NOZERO                  ;2
  1755                                  SET_Q
  1755 000012BE 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1756 000012C6 EB08                    jmp  CONTINUE                ;3
  1757                                  NOZERO:
  1758                                  CLEAR_Q
  1758 000012C8 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1759                                  
  1760                                  CONTINUE:
  1761                                  
  1762                                  ; sh2i->R[n] |= (DWORD)(sh2i->i_get_T())
  1763                                  GET_SR eax  
  1763 000012D0 418B4500            <1>  mov %1, dword [CTRL_REG]
  1764 000012D4 83E001                  and  eax, 0x01               ;5
  1765 000012D7 41C12001                shl  dword [r8], byte 1     ;3
  1766 000012DB 410900                  or   dword [r8],eax         ;3
  1767                                  
  1768                                  ;Get R[n],R[m]
  1769 000012DE 418B00                  mov  eax,dword [r8]               ;3 R[n]
  1770                                  GET_R rbp			;2 rbp = @R[m]
  1770 000012E1 4C89E5              <1>  mov %1, GEN_REG
  1770 000012E4 4883C57F            <1>  add %1,byte 0x7F
  1771 000012E8 448B4D00                mov  r9d,dword [rbp]               ;3 R[m]
  1772                                  
  1773                                  ;switch( old_q )
  1774 000012EC F7C100010000            test ecx,0x00000100          ;6 old_q == 1 ?
  1775 000012F2 7551                    jne   Q_FLG_TMP              ;2
  1776                                  
  1777                                  ;----------------------------------------------------------
  1778                                  ; 8 + 62 + 3 + 62 = 135
  1779                                  NQ_FLG: 
  1780                                  
  1781 000012F4 F7C100020000            test ecx,0x00000200          ;6 M == 1 ?
  1782 000012FA 754B                    jne  NQ_M_FLG                ;2
  1783                                  
  1784                                  	;--------------------------------------------------
  1785                                  	; 62
  1786                                  	NQ_NM_FLG:  
  1787 000012FC 452908                  	  sub dword [r8],r9d         ;3 sh2i->R[n] -= sh2i->R[m]
  1788                                      
  1789                                  	  TEST_IS_Q
  1789 000012FF 410FBA650008        <1>  bt dword [CTRL_REG],0x8
  1790 00001305 721F                    	  jc NQ_NM_Q_FLG                  ;2
  1791                                  
  1792                                  	  NQ_NM_NQ_FLG:
  1793 00001307 413900                  	  cmp dword [r8],eax        ;3 tmp1 = (sh2i->R[n]>tmp0);
  1794 0000130A 760D                    	  jna NQ_NM_NQ_00_FLG  ;2
  1795                                  
  1796                                  		  NQ_NM_NQ_01_FLG:
  1797                                  		  SET_Q
  1797 0000130C 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1798 00001314 E9F9000000              		  jmp END_DIV1                 ;3
  1799                                  
  1800                                  		  NQ_NM_NQ_00_FLG:
  1801                                  		  CLEAR_Q
  1801 00001319 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1802 00001321 E9EC000000              		  jmp END_DIV1                 ;3  
  1803                                    
  1804                                  	  NQ_NM_Q_FLG:
  1805 00001326 413900                  	  cmp dword [r8],eax        ;3 tmp1 = (sh2i->R[n]>tmp0);
  1806 00001329 760D                    	  jna NQ_NM_NQ_10_FLG  ;2
  1807                                  
  1808                                  		  NQ_NM_NQ_11_FLG:
  1809                                  		  CLEAR_Q
  1809 0000132B 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1810 00001333 E9DA000000              		  jmp END_DIV1                 ;3
  1811                                  
  1812                                  		  NQ_NM_NQ_10_FLG:
  1813                                  		  SET_Q
  1813 00001338 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1814 00001340 E9CD000000              		  jmp END_DIV1                 ;3
  1815                                  
  1816                                  Q_FLG_TMP:
  1817 00001345 EB49                    jmp Q_FLG; 3
  1818                                  
  1819                                  	;----------------------------------------------------  
  1820                                  	NQ_M_FLG:
  1821 00001347 450108                  	  add  dword [r8],r9d        ; sh2i->R[n] += sh2i->R[m]  
  1822                                  	  TEST_IS_Q
  1822 0000134A 410FBA650008        <1>  bt dword [CTRL_REG],0x8
  1823 00001350 721F                    	  jc NQ_M_Q_FLG
  1824                                  
  1825                                  	  NQ_M_NQ_FLG:
  1826 00001352 413900                  	  cmp dword [r8],eax         ; tmp1 = (sh2i->R[n]<tmp0);
  1827 00001355 730D                    	  jnb NQ_M_NQ_00_FLG
  1828                                  
  1829                                  		  NQ_M_NQ_01_FLG:
  1830                                  		  CLEAR_Q
  1830 00001357 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1831 0000135F E9AE000000              		  jmp END_DIV1
  1832                                  
  1833                                  		  NQ_M_NQ_00_FLG:
  1834                                  		  SET_Q
  1834 00001364 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1835 0000136C E9A1000000              		  jmp END_DIV1
  1836                                  
  1837                                  
  1838                                  	  NQ_M_Q_FLG:
  1839 00001371 413900                  	  cmp dword [r8],eax                    ; tmp1 = (sh2i->R[n]<tmp0);
  1840 00001374 730D                    	  jnb NQ_M_NQ_10_FLG
  1841                                  
  1842                                  		  NQ_M_NQ_11_FLG:
  1843                                  		  SET_Q
  1843 00001376 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1844 0000137E E98F000000              		  jmp END_DIV1
  1845                                  
  1846                                  		  NQ_M_NQ_10_FLG:
  1847                                  		  CLEAR_Q
  1847 00001383 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1848 0000138B E982000000              		  jmp END_DIV1
  1849                                  
  1850                                  ;------------------------------------------------------
  1851                                  ; 8 + 62 + 62 = 132
  1852                                  Q_FLG:   
  1853                                  
  1854                                  
  1855 00001390 F7C100020000            test ecx,0x200 ; M == 1 ?
  1856 00001396 753D                    jne  Q_M_FLG
  1857                                  
  1858                                  	;--------------------------------------------------
  1859                                  	Q_NM_FLG:
  1860 00001398 450108                  	  add dword [r8],r9d         ; sh2i->R[n] += sh2i->R[m]
  1861                                  	  TEST_IS_Q
  1861 0000139B 410FBA650008        <1>  bt dword [CTRL_REG],0x8
  1862 000013A1 7219                    	  jc Q_NM_Q_FLG
  1863                                  
  1864                                  	  Q_NM_NQ_FLG:
  1865 000013A3 413900                  	  cmp dword [r8],eax      ; tmp1 = (sh2i->R[n]<tmp0);
  1866 000013A6 770A                    	  ja Q_NM_NQ_00_FLG
  1867                                  
  1868                                  		  Q_NM_NQ_01_FLG:
  1869                                  		  SET_Q
  1869 000013A8 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1870 000013B0 EB60                    		  jmp END_DIV1
  1871                                  
  1872                                  		  Q_NM_NQ_00_FLG:
  1873                                  		  CLEAR_Q
  1873 000013B2 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1874 000013BA EB56                    		  jmp END_DIV1
  1875                                    
  1876                                  	  Q_NM_Q_FLG:
  1877 000013BC 413900                  	  cmp dword [r8],eax      ; tmp1 = (sh2i->R[n]<tmp0);
  1878 000013BF 770A                    	  ja Q_NM_NQ_10_FLG  
  1879                                  
  1880                                  		  Q_NM_NQ_11_FLG:
  1881                                  		  CLEAR_Q
  1881 000013C1 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1882 000013C9 EB47                    		  jmp END_DIV1
  1883                                  
  1884                                  		  Q_NM_NQ_10_FLG:
  1885                                  		  SET_Q
  1885 000013CB 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1886 000013D3 EB3D                    		  jmp END_DIV1
  1887                                  
  1888                                  	;----------------------------------------------------  
  1889                                  	Q_M_FLG:
  1890 000013D5 452908                  	  sub dword [r8],r9d      ; sh2i->R[n] -= sh2i->R[m]  
  1891                                  	  TEST_IS_Q 
  1891 000013D8 410FBA650008        <1>  bt dword [CTRL_REG],0x8
  1892 000013DE 7219                    	  jc Q_M_Q_FLG
  1893                                  
  1894                                  	  Q_M_NQ_FLG:
  1895 000013E0 413900                  	  cmp dword [r8],eax      ; tmp1 = (sh2i->R[n]>tmp0);
  1896 000013E3 720A                    	  jb Q_M_NQ_00_FLG
  1897                                  
  1898                                  		  Q_M_NQ_01_FLG:
  1899                                  		  CLEAR_Q
  1899 000013E5 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1900 000013ED EB23                    		  jmp END_DIV1
  1901                                  
  1902                                  		  Q_M_NQ_00_FLG:
  1903                                  		  SET_Q
  1903 000013EF 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1904 000013F7 EB19                    		  jmp END_DIV1
  1905                                   
  1906                                  	  Q_M_Q_FLG:
  1907 000013F9 413900                  	  cmp dword [r8],eax      ; tmp1 = (sh2i->R[n]>tmp0);
  1908 000013FC 720A                    	  jb Q_M_NQ_10_FLG
  1909                                  
  1910                                  		  Q_M_NQ_11_FLG:
  1911                                  		  SET_Q
  1911 000013FE 41814D0000010000    <1>  or dword [CTRL_REG], 0x100
  1912 00001406 EB0A                    		  jmp END_DIV1
  1913                                  
  1914                                  		  Q_M_NQ_10_FLG:
  1915                                  		  CLEAR_Q
  1915 00001408 41816500FF020000    <1>  and dword [CTRL_REG],0x2FF
  1916 00001410 EB00                    		  jmp END_DIV1
  1917                                  
  1918                                  
  1919                                  ;---------------------------------------------------
  1920                                  ; size = 38
  1921                                  END_DIV1: 
  1922                                  
  1923                                  ;sh2i->i_set_T( (sh2i->i_get_Q() == sh2i->i_get_M()) );
  1924                                  
  1925                                  GET_Q eax
  1925 00001412 418B4500            <1>  mov %1,[CTRL_REG]
  1925 00001416 C1E808              <1>  shr %1,8
  1925 00001419 83E001              <1>  and %1,1
  1926                                  GET_M r9d
  1926 0000141C 458B4D00            <1>  mov %1,[CTRL_REG]
  1926 00001420 41C1E909            <1>  shr %1,9
  1926 00001424 4183E101            <1>  and %1,1
  1927                                  CLEAR_T
  1927 00001428 41816500FE030000    <1>  and dword [CTRL_REG], 0x3FE
  1928 00001430 4439C8                  cmp  eax, r9d                  ;2
  1929 00001433 7505                    jne  NO_Q_M                   ;2
  1930                                  SET_T
  1930 00001435 41834D0001          <1>  or dword [CTRL_REG], 0x1
  1931                                  NO_Q_M:
  1932                                  opdesc DIV1, 62,6,0xFF,0xFF,0xFF
  1932                              <1>  global x86_%1_end
  1932                              <1>  x86_%1_end:
  1932                              <1>  global %1_size
  1932 0000143A 9101                <1>  %1_size dw (x86_%1_end - x86_%1)
  1932                              <1>  global %1_src
  1932 0000143C 3E                  <1>  %1_src db %2
  1932                              <1>  global %1_dest
  1932 0000143D 06                  <1>  %1_dest db %3
  1932                              <1>  global %1_off1
  1932 0000143E FF                  <1>  %1_off1 db %4
  1932                              <1>  global %1_imm
  1932 0000143F FF                  <1>  %1_imm db %5
  1932                              <1>  global %1_off3
  1932 00001440 FF                  <1>  %1_off3 db %6
  1933                                  
  1934                                  ;======================================================
  1935                                  ; end of DIV1
  1936                                  ;======================================================
  1937                                  
  1938                                  ;------------------------------------------------------------
  1939                                  ;dmuls
  1940                                  opfunc DMULS
  1940                              <1>  global x86_%1
  1940                              <1>  x86_%1:
  1941                                  GET_R rbp
  1941 00001441 4C89E5              <1>  mov %1, GEN_REG
  1941 00001444 4883C57F            <1>  add %1,byte 0x7F
  1942 00001448 8B4500                  mov  eax,dword [rbp]    ;3
  1943                                  GET_R rbp
  1943 0000144B 4C89E5              <1>  mov %1, GEN_REG
  1943 0000144E 4883C57F            <1>  add %1,byte 0x7F
  1944 00001452 8B5500                  mov  edx,dword [rbp]    ;3  
  1945 00001455 F7EA                    imul edx                ;2
  1946                                  SET_MACH edx  ;2 store MACH             
  1946 00001457 418916              <1>  mov dword [SYS_REG], %1
  1947                                  SET_MACL eax  ;3 store MACL   
  1947 0000145A 41894604            <1>  mov dword [SYS_REG+4], %1
  1948                                  opdesc DMULS, 6,16,0xFF,0xFF,0xFF
  1948                              <1>  global x86_%1_end
  1948                              <1>  x86_%1_end:
  1948                              <1>  global %1_size
  1948 0000145E 1D00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1948                              <1>  global %1_src
  1948 00001460 06                  <1>  %1_src db %2
  1948                              <1>  global %1_dest
  1948 00001461 10                  <1>  %1_dest db %3
  1948                              <1>  global %1_off1
  1948 00001462 FF                  <1>  %1_off1 db %4
  1948                              <1>  global %1_imm
  1948 00001463 FF                  <1>  %1_imm db %5
  1948                              <1>  global %1_off3
  1948 00001464 FF                  <1>  %1_off3 db %6
  1949                                  
  1950                                  ;------------------------------------------------------------
  1951                                  ;dmulu 32bit -> 64bit Mul
  1952                                  opfunc DMULU
  1952                              <1>  global x86_%1
  1952                              <1>  x86_%1:
  1953                                  GET_R rbp
  1953 00001465 4C89E5              <1>  mov %1, GEN_REG
  1953 00001468 4883C57F            <1>  add %1,byte 0x7F
  1954 0000146C 8B4500                  mov  eax,dword [rbp]    ;3
  1955                                  GET_R rbp
  1955 0000146F 4C89E5              <1>  mov %1, GEN_REG
  1955 00001472 4883C57F            <1>  add %1,byte 0x7F
  1956 00001476 8B5500                  mov  edx,dword [rbp]    ;3  
  1957 00001479 F7E2                    mul  edx                ;2
  1958                                  SET_MACH edx  ;2 store MACH             
  1958 0000147B 418916              <1>  mov dword [SYS_REG], %1
  1959                                  SET_MACL eax  ;3 store MACL     
  1959 0000147E 41894604            <1>  mov dword [SYS_REG+4], %1
  1960                                  opdesc DMULU, 6,16,0xFF,0xFF,0xFF
  1960                              <1>  global x86_%1_end
  1960                              <1>  x86_%1_end:
  1960                              <1>  global %1_size
  1960 00001482 1D00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1960                              <1>  global %1_src
  1960 00001484 06                  <1>  %1_src db %2
  1960                              <1>  global %1_dest
  1960 00001485 10                  <1>  %1_dest db %3
  1960                              <1>  global %1_off1
  1960 00001486 FF                  <1>  %1_off1 db %4
  1960                              <1>  global %1_imm
  1960 00001487 FF                  <1>  %1_imm db %5
  1960                              <1>  global %1_off3
  1960 00001488 FF                  <1>  %1_off3 db %6
  1961                                  
  1962                                  ;--------------------------------------------------------------
  1963                                  ; mull 32bit -> 32bit Multip
  1964                                  opfunc MULL
  1964                              <1>  global x86_%1
  1964                              <1>  x86_%1:
  1965                                  GET_R rbp
  1965 00001489 4C89E5              <1>  mov %1, GEN_REG
  1965 0000148C 4883C57F            <1>  add %1,byte 0x7F
  1966 00001490 8B4500                  mov  eax,dword [rbp]    ;3
  1967                                  GET_R rbp
  1967 00001493 4C89E5              <1>  mov %1, GEN_REG
  1967 00001496 4883C57F            <1>  add %1,byte 0x7F
  1968 0000149A 8B5500                  mov  edx,dword [rbp]    ;3  
  1969 0000149D F7EA                    imul edx                ;2
  1970                                  SET_MACL eax  ;3 store MACL  
  1970 0000149F 41894604            <1>  mov dword [SYS_REG+4], %1
  1971                                  opdesc MULL, 6,16,0xFF,0xFF,0xFF
  1971                              <1>  global x86_%1_end
  1971                              <1>  x86_%1_end:
  1971                              <1>  global %1_size
  1971 000014A3 1A00                <1>  %1_size dw (x86_%1_end - x86_%1)
  1971                              <1>  global %1_src
  1971 000014A5 06                  <1>  %1_src db %2
  1971                              <1>  global %1_dest
  1971 000014A6 10                  <1>  %1_dest db %3
  1971                              <1>  global %1_off1
  1971 000014A7 FF                  <1>  %1_off1 db %4
  1971                              <1>  global %1_imm
  1971 000014A8 FF                  <1>  %1_imm db %5
  1971                              <1>  global %1_off3
  1971 000014A9 FF                  <1>  %1_off3 db %6
  1972                                  
  1973                                  ;--------------------------------------------------------------
  1974                                  ; muls 16bit -> 32 bit Multip
  1975                                  opfunc MULS
  1975                              <1>  global x86_%1
  1975                              <1>  x86_%1:
  1976                                  GET_R rbp
  1976 000014AA 4C89E5              <1>  mov %1, GEN_REG
  1976 000014AD 4883C57F            <1>  add %1,byte 0x7F
  1977 000014B1 31C0                    xor  eax,eax           ;2
  1978 000014B3 668B4500                mov  ax,word [rbp]     ;3
  1979                                  GET_R rbp
  1979 000014B7 4C89E5              <1>  mov %1, GEN_REG
  1979 000014BA 4883C57F            <1>  add %1,byte 0x7F
  1980 000014BE 31D2                    xor  edx,edx           ;2
  1981 000014C0 668B5500                mov  dx,word [rbp]     ;3  
  1982 000014C4 66F7EA                  imul dx                ;2
  1983 000014C7 C1E210                  shl  edx, byte 16      ;3
  1984 000014CA 6601C2                  add  dx, ax            ;2
  1985                                  SET_MACL edx ;3 store MACL   
  1985 000014CD 41895604            <1>  mov dword [SYS_REG+4], %1
  1986                                  opdesc MULS, 6,19,0xFF,0xFF,0xFF
  1986                              <1>  global x86_%1_end
  1986                              <1>  x86_%1_end:
  1986                              <1>  global %1_size
  1986 000014D1 2700                <1>  %1_size dw (x86_%1_end - x86_%1)
  1986                              <1>  global %1_src
  1986 000014D3 06                  <1>  %1_src db %2
  1986                              <1>  global %1_dest
  1986 000014D4 13                  <1>  %1_dest db %3
  1986                              <1>  global %1_off1
  1986 000014D5 FF                  <1>  %1_off1 db %4
  1986                              <1>  global %1_imm
  1986 000014D6 FF                  <1>  %1_imm db %5
  1986                              <1>  global %1_off3
  1986 000014D7 FF                  <1>  %1_off3 db %6
  1987                                  
  1988                                  ;--------------------------------------------------------------
  1989                                  ; mulu 16bit -> 32 bit Multip
  1990                                  opfunc MULU
  1990                              <1>  global x86_%1
  1990                              <1>  x86_%1:
  1991                                  GET_R rbp
  1991 000014D8 4C89E5              <1>  mov %1, GEN_REG
  1991 000014DB 4883C57F            <1>  add %1,byte 0x7F
  1992 000014DF 31C0                    xor  eax,eax           ;2
  1993 000014E1 668B4500                mov  ax,word [rbp]     ;3
  1994                                  GET_R rbp
  1994 000014E5 4C89E5              <1>  mov %1, GEN_REG
  1994 000014E8 4883C57F            <1>  add %1,byte 0x7F
  1995 000014EC 31D2                    xor  edx,edx           ;2
  1996 000014EE 668B5500                mov  dx,word [rbp]     ;3  
  1997 000014F2 66F7E2                  mul dx                ;2
  1998 000014F5 C1E210                  shl  edx, byte 16      ;3
  1999 000014F8 6601C2                  add  dx, ax            ;2
  2000                                  SET_MACL edx ;3 store MACL   
  2000 000014FB 41895604            <1>  mov dword [SYS_REG+4], %1
  2001                                  opdesc MULU, 6,19,0xFF,0xFF,0xFF
  2001                              <1>  global x86_%1_end
  2001                              <1>  x86_%1_end:
  2001                              <1>  global %1_size
  2001 000014FF 2700                <1>  %1_size dw (x86_%1_end - x86_%1)
  2001                              <1>  global %1_src
  2001 00001501 06                  <1>  %1_src db %2
  2001                              <1>  global %1_dest
  2001 00001502 13                  <1>  %1_dest db %3
  2001                              <1>  global %1_off1
  2001 00001503 FF                  <1>  %1_off1 db %4
  2001                              <1>  global %1_imm
  2001 00001504 FF                  <1>  %1_imm db %5
  2001                              <1>  global %1_off3
  2001 00001505 FF                  <1>  %1_off3 db %6
  2002                                  
  2003                                  ;--------------------------------------------------------------
  2004                                  ; MACL   ans = 32bit -> 64 bit MUL
  2005                                  ;        (MACH << 32 + MACL)  + ans 
  2006                                  ;------------------------------------------------------------- 
  2007                                  opfunc MAC_L
  2007                              <1>  global x86_%1
  2007                              <1>  x86_%1:
  2008                                  GET_R rbp
  2008 00001506 4C89E5              <1>  mov %1, GEN_REG
  2008 00001509 4883C57F            <1>  add %1,byte 0x7F
  2009 0000150D 8B7D00                  mov  edi,dword [rbp]          ;3
  2010                                  CALL_GETMEM_LONG
  2010                              <1>  CALL_FUNC 2
  2010 00001510 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  2010 00001514 41FFD0              <2>  call r8
  2011 00001517 89C2                    mov  edx,eax                  ;2
  2012 00001519 83450004                add  dword [rbp], 4           ;7 R[n] += 4
  2013                                  GET_R rbp
  2013 0000151D 4C89E5              <1>  mov %1, GEN_REG
  2013 00001520 4883C57F            <1>  add %1,byte 0x7F
  2014 00001524 8B7D00                  mov  edi,dword [rbp]          ;3
  2015                                  CALL_GETMEM_LONG
  2015                              <1>  CALL_FUNC 2
  2015 00001527 4D8B462C            <2>  mov r8, [SYS_REG + 28 + %1*8]
  2015 0000152B 41FFD0              <2>  call r8
  2016 0000152E 83450004                add  dword [rbp], 4           ;7 R[m] += 4 
  2017                                  GET_MACL ecx            ;3 load macl
  2017 00001532 418B4E04            <1>  mov %1, dword [SYS_REG+4]
  2018 00001536 F7EA                    imul edx                      ;2 eax <- low, edx <- high
  2019                                  GET_MACH edi               ;3 load mach
  2019 00001538 418B3E              <1>  mov %1, dword [SYS_REG]
  2020 0000153B 01C1                    add  ecx,eax                  ;3 sum = a+b;
  2021 0000153D 11D7                    adc  edi,edx                  ;2
  2022                                  TEST_IS_S
  2022 0000153F 410FBA650001        <1>  bt dword [CTRL_REG],0X1
  2023 00001545 7338                    jnc   END_PROC                 ;2 if( S == 0 ) goto 'no sign proc'
  2024 00001547 81FFFF7F0000            cmp  edi,7FFFh                ;6
  2025 0000154D 7230                    jb   END_PROC                 ;2 
  2026 0000154F 7705                    ja   COMP_MIN                ;2
  2027 00001551 83F9FF                  cmp  ecx,0FFFFFFFFh           ;3 
  2028 00001554 7629                    jbe  END_PROC                ;2  = 88
  2029                                  
  2030                                  COMP_MIN:
  2031 00001556 81FF0080FFFF            cmp   edi,0FFFF8000h          ;6
  2032 0000155C 7721                    ja   END_PROC                 ;2 
  2033 0000155E 7204                    jb   CHECK_AAA                ;2 
  2034 00001560 85C9                    test ecx,ecx                  ;2
  2035 00001562 731B                    jae  END_PROC                ;2
  2036                                  CHECK_AAA:
  2037 00001564 85D2                    test edx,edx                  ;2
  2038 00001566 7F0F                    jg   MAXMIZE                  ;2
  2039 00001568 7C04                    jl   MINIMIZE                 ;2
  2040 0000156A 85C0                    test eax,eax                  ;3
  2041 0000156C 7309                    jae MAXMIZE                   ;2
  2042                                  MINIMIZE:
  2043 0000156E 31C9                    xor ecx,ecx                   ;2
  2044 00001570 BF0080FFFF              mov edi,0FFFF8000h            ;5
  2045 00001575 EB08                    jmp END_PROC                 ;2
  2046                                  MAXMIZE:
  2047 00001577 83C9FF                  or   ecx,0FFFFFFFFh           ;3 sum = 0x00007FFFFFFFFFFFULL;
  2048 0000157A BFFF7F0000              mov  edi,7FFFh                ;5
  2049                                  END_PROC:
  2050                                  SET_MACH edi
  2050 0000157F 41893E              <1>  mov dword [SYS_REG], %1
  2051                                  SET_MACL ecx
  2051 00001582 41894E04            <1>  mov dword [SYS_REG+4], %1
  2052                                  opdesc MAC_L, 6,29,0xFF,0xFF,0xFF
  2052                              <1>  global x86_%1_end
  2052                              <1>  x86_%1_end:
  2052                              <1>  global %1_size
  2052 00001586 8000                <1>  %1_size dw (x86_%1_end - x86_%1)
  2052                              <1>  global %1_src
  2052 00001588 06                  <1>  %1_src db %2
  2052                              <1>  global %1_dest
  2052 00001589 1D                  <1>  %1_dest db %3
  2052                              <1>  global %1_off1
  2052 0000158A FF                  <1>  %1_off1 db %4
  2052                              <1>  global %1_imm
  2052 0000158B FF                  <1>  %1_imm db %5
  2052                              <1>  global %1_off3
  2052 0000158C FF                  <1>  %1_off3 db %6
  2053                                  
  2054                                  
  2055                                  ;--------------------------------------------------------------
  2056                                  ; MACW   ans = 32bit -> 64 bit MUL
  2057                                  ;        (MACH << 32 + MACL)  + ans 
  2058                                  ;-------------------------------------------------------------
  2059                                  opfunc MAC_W
  2059                              <1>  global x86_%1
  2059                              <1>  x86_%1:
  2060                                  GET_R rbp
  2060 0000158D 4C89E5              <1>  mov %1, GEN_REG
  2060 00001590 4883C57F            <1>  add %1,byte 0x7F
  2061 00001594 8B7D00                  mov  edi,dword [rbp]          ;3
  2062                                  CALL_GETMEM_WORD
  2062                              <1>  CALL_FUNC 1
  2062 00001597 4D8B4624            <2>  mov r8, [SYS_REG + 28 + %1*8]
  2062 0000159B 41FFD0              <2>  call r8
  2063 0000159E 0FBFD0                  movsx  edx,ax                 ;3
  2064 000015A1 83450002                add  dword [rbp], 2           ;7 R[n] += 2
  2065                                  GET_R rbp
  2065 000015A5 4C89E5              <1>  mov %1, GEN_REG
  2065 000015A8 4883C57F            <1>  add %1,byte 0x7F
  2066 000015AC 8B7D00                  mov  edi,dword [rbp]          ;3
  2067                                  CALL_GETMEM_WORD
  2067                              <1>  CALL_FUNC 1
  2067 000015AF 4D8B4624            <2>  mov r8, [SYS_REG + 28 + %1*8]
  2067 000015B3 41FFD0              <2>  call r8
  2068 000015B6 83450002                add  dword [rbp], 2           ;7 R[m] += 2
  2069 000015BA 98                      cwde                          ;1 Sigin extention
  2070 000015BB F7EA                    imul edx                      ;2 rax <- low, rdx <- high
  2071                                  TEST_IS_S
  2071 000015BD 410FBA650001        <1>  bt dword [CTRL_REG],0X1
  2072 000015C3 7326                    jnc   MACW_NO_S_FLG                 ;2 if( S == 0 ) goto 'no sign proc'
  2073                                  
  2074                                  MACW_S_FLG:
  2075 000015C5 41014604                  add dword [SYS_REG+4],eax   ;3 MACL = ansL + MACL
  2076 000015C9 711E                      jno NO_OVERFLO
  2077 000015CB 780E                      js  FU 
  2078                                    SEI:
  2079 000015CD 41C7460400000080            mov dword [SYS_REG+4],0x80000000 ; min value
  2080 000015D5 41830E01                	or  dword [SYS_REG],1
  2081 000015D9 EB1B                    	jmp END_MACW
  2082                                  
  2083                                    FU:
  2084 000015DB 41C74604FFFFFF7F            mov dword [SYS_REG+4],0x7FFFFFFF ; max value
  2085 000015E3 41830E01                	or dword [SYS_REG],1
  2086 000015E7 EB0D                    	jmp END_MACW
  2087                                  
  2088                                    NO_OVERFLO:
  2089 000015E9 EB0B                      jmp END_MACW
  2090                                  
  2091                                  MACW_NO_S_FLG:
  2092 000015EB 41014604                  add dword [SYS_REG+4],eax         ;3 MACL = ansL + MACL
  2093 000015EF 7302                      jnc MACW_NO_CARRY             ;2 Check Carry
  2094 000015F1 FFC2                      inc edx                       ;1
  2095                                  MACW_NO_CARRY: 
  2096 000015F3 410116                    add dword [SYS_REG],edx           ;2 MACH = ansH + MACH
  2097                                  
  2098                                  END_MACW:
  2099                                  opdesc MAC_W, 6,30,0xFF,0xFF,0xFF
  2099                              <1>  global x86_%1_end
  2099                              <1>  x86_%1_end:
  2099                              <1>  global %1_size
  2099 000015F6 6900                <1>  %1_size dw (x86_%1_end - x86_%1)
  2099                              <1>  global %1_src
  2099 000015F8 06                  <1>  %1_src db %2
  2099                              <1>  global %1_dest
  2099 000015F9 1E                  <1>  %1_dest db %3
  2099                              <1>  global %1_off1
  2099 000015FA FF                  <1>  %1_off1 db %4
  2099                              <1>  global %1_imm
  2099 000015FB FF                  <1>  %1_imm db %5
  2099                              <1>  global %1_off3
  2099 000015FC FF                  <1>  %1_off3 db %6
  2100                                    
  2101                                   
  2102                                  end:
